{"version":3,"sources":["pages/admin/users/user-form.js"],"names":["UserForm","history","addToastAction","match","useState","params","id","gender","fullName","password","confirmPassword","email","person","setPerson","validated","validationErrors","setValidationErrors","genders","setGenders","useEffect","arrGenders","key","UserGender","Object","hasOwnProperty","call","value","push","name","capitalizeWord","UserApis","getOne","then","res","data","e","error","ToastStatus","Danger","onUpdatePerson","onRegister","event","preventDefault","stopPropagation","validateRegisterForm","newValidationErrors","invalid","updateOne","result","success","Success","message","createOne","valid","validateEmail","variant","onClick","goBack","className","onSubmit","Group","Label","Control","required","type","placeholder","isInvalid","onChange","target","Feedback","Row","md","xl","as","map","Fragment","defaultProps","withRouter","connectToasts","connectAuth"],"mappings":"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","file":"static/js/14.792e9431.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { Button, Container, Row, Col, Form } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connectToasts, connectAuth } from '../../../common/redux/connects';\r\nimport { ToastStatus } from '../../../common/enums/toast';\r\nimport { UserGender } from '../../../common/enums/auth';\r\nimport UserApis from '../../../common/api/users';\r\nimport { capitalizeWord, validateEmail } from '../../../common/utils/common';\r\n// import AuthAPI from '../../../common/api/auth';\r\n\r\n\r\nfunction UserForm ({ history, addToastAction, match}) {\r\n    const [id, setId] = useState(() => {\r\n        return match.params.id\r\n    });\r\n\r\n    const [person, setPerson] = useState({\r\n        gender: '', fullName: '',\r\n        password: '', confirmPassword: '', email: ''\r\n    });\r\n    const [validationErrors, setValidationErrors] = useState({\r\n        gender: '', fullName: '',\r\n        password: '', confirmPassword: '', email: '', validated: false\r\n    });\r\n    const [genders, setGenders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const arrGenders = [];\r\n        for (const key in UserGender) {\r\n            if (Object.hasOwnProperty.call(UserGender, key)) {\r\n                const value = UserGender[key];\r\n                arrGenders.push({\r\n                    id: value,\r\n                    name: capitalizeWord(value)\r\n                });\r\n            }\r\n        }\r\n        setGenders(arrGenders);\r\n        setPerson({ ...person, gender: arrGenders[0].id })\r\n    }, [UserGender])\r\n\r\n    useEffect(() => {\r\n        if(id) {\r\n            UserApis\r\n                .getOne({id: id})\r\n                .then(res => {\r\n                    setPerson(res.data);\r\n                }, e =>  addToastAction(\"Loading Video faild\", e.error, ToastStatus.Danger))\r\n        }\r\n    }, [id]);\r\n\r\n    const onUpdatePerson = (value, key) => {\r\n        setPerson({ ...person, [key]: value });\r\n    }\r\n\r\n    const onRegister = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        \r\n        const { newValidationErrors, invalid } = validateRegisterForm();\r\n        setValidationErrors({\r\n            ...newValidationErrors, validated: true\r\n        });\r\n        if (!invalid) {\r\n            if(id) {\r\n                UserApis\r\n                    .updateOne({id: id, ...person})\r\n                    .then(result => {\r\n                        if(result.success) {\r\n                            addToastAction(`Congrationations`, 'You have successfully updated.', ToastStatus.Success);\r\n                        }\r\n                    }, e => addToastAction(` ${e.error}`, e.message, ToastStatus.Danger))\r\n                    \r\n            } else {\r\n                UserApis.createOne({\r\n                    email: person.email,\r\n                    fullName: person.fullName,\r\n                    gender: person.gender,\r\n                    password: person.password\r\n                }).then(result => {\r\n                    addToastAction(`Congrationations`, 'You have successfully registered a new account.', ToastStatus.Success);\r\n                }, e => addToastAction(` ${e.error}`, e.message, ToastStatus.Danger));\r\n            }\r\n        }\r\n    };\r\n\r\n    const validateRegisterForm = () => {\r\n        // Validate Registration Form\r\n        const newValidationErrors = {\r\n            email: '', fullName: '', gender: '',\r\n            password: '', confirmPassword: ''\r\n        };\r\n        let valid = true;\r\n        if (!person.email) {\r\n            newValidationErrors.email = 'Please enter an email';\r\n            valid = false;\r\n        } else if (!validateEmail(person.email)){\r\n            newValidationErrors.email = 'Please enter valid email';\r\n            valid = false;\r\n        }\r\n        if (!person.fullName) {\r\n            newValidationErrors.fullName = 'Please enter Full name';\r\n            valid = false;\r\n        }\r\n        if (!person.gender) {\r\n            newValidationErrors.gender = 'Please select your gender';\r\n            valid = false;\r\n        }\r\n        if (!id) {\r\n            if (!person.password) {\r\n                newValidationErrors.password = 'Please enter password';\r\n                valid = false;\r\n            }\r\n            if (!person.confirmPassword) {\r\n                newValidationErrors.confirmPassword = 'Please enter password';\r\n                valid = false;\r\n            } else if (person.confirmPassword !== person.password) {\r\n                newValidationErrors.confirmPassword = 'Different password detected';\r\n                valid = false;\r\n            }\r\n        }\r\n        return { newValidationErrors, invalid: !valid };\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <Button variant='link' onClick={() => history.goBack()}>\r\n                        <span className='h6'>Back</span>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row className='mb-5'>\r\n                <Col>\r\n                    <h1 className='text-primary text-center'>{`${id ? 'Update User info': 'Add a new user'}`}</h1>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Form validated={validationErrors.validated} onSubmit={onRegister}>\r\n                <Form.Group>\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control required type='email' placeholder='Enter Email' value={person.email} isInvalid={!!validationErrors.email}\r\n                        onChange={e => onUpdatePerson(e.target.value, 'email')} />\r\n                    <Form.Control.Feedback type={!!validationErrors.email ? 'invalid' : 'valid'}>{validationErrors.email}</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Row>\r\n                    <Col md={12}>\r\n                        <Form.Group>\r\n                            <Form.Label>Full Name</Form.Label>\r\n                            <Form.Control required type='text' placeholder='Enter Full Name' value={person.fullName} isInvalid={!!validationErrors.fullName}\r\n                                onChange={e => onUpdatePerson(e.target.value, 'fullName')} />\r\n                            <Form.Control.Feedback type={!!validationErrors.fullName ? 'invalid' : 'valid'}>{validationErrors.fullName}</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Col xl={12} md={12} >\r\n                        <Form.Group>\r\n                            <Form.Label>Gender</Form.Label>\r\n                            <Form.Control required as=\"select\" value={person.gender} isInvalid={!!validationErrors.gender}\r\n                                onChange={e => onUpdatePerson(e.target.value, 'gender')}>\r\n                                {genders.map(gender => <option key={gender.id} value={gender.id}>{gender.name}</option>)}\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type={!!validationErrors.gender ? 'invalid' : 'valid'}>{validationErrors.gender}</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Form.Row>\r\n                {\r\n                    !id && (\r\n                    <React.Fragment>\r\n                        <Form.Group>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control required type='password' placeholder='Password' value={person.password} isInvalid={!!validationErrors.password}\r\n                                onChange={e => onUpdatePerson(e.target.value, 'password')} />\r\n                            <Form.Control.Feedback type={!!validationErrors.password ? 'invalid' : 'valid'}>{validationErrors.password}</Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Confirm Password</Form.Label>\r\n                            <Form.Control required type='password' placeholder='Confirm Password' value={person.confirmPassword} isInvalid={!!validationErrors.confirmPassword}\r\n                                onChange={e => onUpdatePerson(e.target.value, 'confirmPassword')} />\r\n                            <Form.Control.Feedback type={!!validationErrors.confirmPassword ? 'invalid' : 'valid'}>{validationErrors.confirmPassword}</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </React.Fragment>\r\n                    )\r\n                }\r\n                <Form.Row className='justify-content-end'>\r\n                    <Button className='ml-3' variant='primary' type=\"submit\" onClick={onRegister}>\r\n                        {`${id ?  \"Update\" : \"Register\"}`}\r\n                    </Button>\r\n                </Form.Row>\r\n            </Form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nUserForm.propTypes = {\r\n    id: PropTypes.number\r\n};\r\n\r\nUserForm.defaultProps = {\r\n    id: 0\r\n};\r\n\r\nexport default withRouter(connectToasts(connectAuth(UserForm)));\r\n"],"sourceRoot":""}