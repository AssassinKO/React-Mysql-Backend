{"version":3,"sources":["common/redux/actions/toast-actions.js","common/utils/common.js","common/redux/actions/types.js","common/api/videos.js","common/api/users.js","common/enums/toast.js","common/constants/default-values.js","index.js","assets/scss/themes lazy /^/.*/.scss$/ groupOptions: {} namespace object","common/redux/connects.js","common/enums/auth.js","common/redux/actions/auth-actions.js","common/api/configuration.js","common/utils/auth.js","components/common/popover.js","pages/admin/dashboard.js","components/common/spinner.js","common/api/exam-bodies.js","pages/admin/questions/select-exam-body.js","components/common/select.js","common/enums/questions.js","common/api/questions.js","common/api/subjects.js","pages/admin/questions/question-groups.js","common/api/sub-topics.js","common/api/upload.js","components/common/text-input.js","components/common/table.js","pages/admin/questions/question-add.js","pages/admin/questions/question-edit.js","components/questions/answer-in-row.js","components/questions/question-in-row.js","pages/admin/questions/question-list.js","components/common/switch.js","common/utils/theme.js","layouts/admin.js","pages/customer/dashboard.js","layouts/customer.js","pages/landing.js","pages/auth/login.js","pages/auth/forgot-password.js","pages/auth/reset-password.js","components/common/datepicker.js","pages/auth/register.js","layouts/anonymous.js","components/common/toast-list.js","App.js","common/redux/reducers/auth-reducer.js","common/redux/reducers/toast-reducer.js","common/redux/reducers/index.js","common/redux/sagas/auth-saga.js","common/redux/sagas/toast-saga.js","common/redux/sagas/index.js","common/redux/store.js","reportWebVitals.js","AppRenderer.js","common/api/auth.js","common/enums/theme.js"],"names":["addToast","title","description","status","ToastStatus","Info","type","TOAST_ADD","payload","id","Date","getTime","removeToast","TOAST_REMOVE","capitalizeWord","word","String","toUpperCase","substring","toLowerCase","validateEmail","email","test","timeFromNow","timestamp","moment","fromNow","secsToHMS","currentSeconds","toISOString","substr","dateToLocalString","stamp","toLocaleString","LOGIN_USER","LOGIN_USER_SUCCESS","LOGIN_USER_ERROR","VERIFY_ACCESS_TOKEN","VERIFY_ACCESS_TOKEN_SUCCESS","VERIFY_ACCESS_TOKEN_ERROR","REGISTER_USER","REGISTER_USER_SUCCESS","REGISTER_USER_ERROR","LOGOUT_USER","FORGOT_PASSWORD","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_ERROR","RESET_PASSWORD","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","TOAST_REMOVE_ALL","VIDEOS_BASE_URL","APIServerURL","VideosAPI","addVideo","file","formData","FormData","url","append","axios","post","getVideos","page","perPage","get","getVideo","updateVideo","put","remove","delete","removeVideo","BASE_URL","UserAPI","createOne","gender","fullName","password","getAll","getOne","updateOne","removeOne","Danger","Warning","Success","defaultTheme","UITheme","Light","ConstantNames","AccessToken","DOMAIN_NAME","ServerURL","AssetsServerURL","SocketServerURL","themes","Object","values","previousUITheme","localStorage","getItem","currentUITheme","includes","setItem","toLocaleLowerCase","then","require","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","e","Error","code","ids","t","keys","module","exports","mapAuthDispatchToProps","loginUserAction","loginUser","logoutUserAction","logoutUser","connectAuth","connect","authReducer","user","authError","error","mapAuthCheckDispatchToProps","verifyAccessTokenAction","verifyAccessToken","connectAuthCheck","tokenVerified","undefined","authenticated","userRole","role","mapToastsDispatchToProps","addToastAction","removeToastAction","connectToasts","toasts","toastReducer","UserRole","SuperAdmin","Admin","User","UserGender","Male","Female","Other","loginUserDto","history","loginUserSuccess","loginUserError","message","forceRedirect","verifyAccessTokenSuccess","verifyAccessTokenError","forgotPasswordSuccess","forgotPasswordError","resetPasswordSuccess","resetPasswordError","registerUserSuccess","registerUserError","interceptors","request","use","config","at","getAccessToken","headers","Authorization","reject","response","data","updateAccessToken","removeAccessToken","removeItem","getDefaultRedirectPath","decodedToken","decodeToken","console","log","isExpired","isAdmin","Customer","ConfirmPopover","visible","target","setVisibility","label","onConfirm","placement","show","onHide","containerPadding","rootClose","Title","as","Content","className","variant","size","onClick","defaultProps","AdminDashboard","useState","userCount","setUserCount","videoCount","setVideoCount","useEffect","UserApis","totalCount","VideosApis","Fragment","Row","Col","Card","to","withRouter","LoadingSpinner","absolute","Spinner","animation","style","position","left","top","examBodiesBaseURL","ExamBodiesAPI","getAllExamBodies","getExamBodyById","examBodyId","AdminSelectExamBody","examBodies","setExamBodies","isLoading","setIsLoading","ExamBodyAPI","arrExamBodies","Container","examBody","ebi","sm","md","lg","Img","src","logoUrl","Body","name","Button","push","CustomSelect","value","onChange","Form","Group","Label","Control","eachValue","QuestionStatus","Draft","UnderReview","Published","questionsBaseURL","QuestionsAPI","findQuestionGroups","filterOptions","copiedFilterOptions","key","hasOwnProperty","call","query","querystring","stringify","findAdditionalDetails","subjectId","year","initRegisterQuestionsPage","registerQuestion","rqDto","answers","registerResponse","attachAnswers","questionId","findQuestionsByExam","objQuery","requestToPublish","publishQuestions","initEditQuestionsPage","updateQuestion","question","deleteQuestion","subjectsBaseURL","SubjectsAPI","getAllSubjects","subjects","questionGroupTableHeaders","AdminQuestionGroups","match","setExamBody","questionGroups","setQuestionGroups","setSubjects","years","setYears","getFullYear","newQuestionGroupInput","setNewQuestionGroupInput","statuses","filterCategories","setFilterCategories","setFilterOptions","selectedQuestionGroup","setSelectedQuestionGroup","visibleAdditionalDetails","setVisibleAdditionalDetails","actionIndex","setActionIndex","visibleActionPopover","setVisibleActionPopover","actionTarget","setActionTarget","visibleNewExamPopover","setVisibleNewExamPopover","newExamTarget","setNewExamTarget","pageIndex","setPageIndex","pagesCount","groupsCount","total","setTotal","visiblePublishConfirmPopover","setVisiblePublishConfirmPopover","publishConfirmTarget","setPublishConfirmTarget","visibleRequestToPublishConfirmPopover","setVisibleRequestToPublishConfirmPopover","requestToPublishConfirmTarget","setRequestToPublishConfirmTarget","params","eb","arrSubjects","newYears","i","newStatuses","split","join","concat","subject","onRefreshQuestionGroups","getSubjectNameWithId","find","s","onAddNewQuestion","qGroup","onClickPublishQuestionGroupButton","event","onClickRequestToPublishQuestionGroupButton","updateQuestionGroupStatus","groupIndex","newGroups","JSON","parse","onChangeNewQuestionGroupInputs","field","onChangeFilterOptions","count","Math","ceil","goBack","parseInt","Image","height","rounded","icon","faPlus","length","Table","responsive","bordered","headerName","hi","qgi","width","faBars","index","objTimeOut","setTimeout","clearTimeout","toggleActionPopover","Pagination","First","disabled","Prev","Item","active","Next","Last","Modal","backdrop","keyboard","aria-labelledby","centered","Header","closeButton","InputGroup","Prepend","Text","FormControl","placeholder","aria-label","aria-describedby","subjectName","createdAt","createdBy","lastModifiedAt","lastModifiedBy","Footer","Overlay","Popover","maxWidth","result","createdByFullName","lastModifiedByFullName","assign","renderAddNewQuestionDropDownItem","renderPublishActionsDropDownItem","findIndex","statusCode","subTopicsBaseURL","SubTopicsAPI","getSubTopics","topicId","subTopics","UploadAPI","uploadFile","form","res","AnyTextInput","editable","equation","tex","onError","err","onSuccess","EditableTable","onChangeDataCell","rowIndex","colIndex","newData","content","onChangeHeaderCell","newHeader","row","ri","cell","ci","CustomTable","striped","hover","AnswerTable","rows","columns","tableMatrix","setTableMatrix","visibleNewTablePopover","setVisibleNewTablePopover","newTableTarget","setNewTableTarget","newTableIndex","setNewTableIndex","onChangeMatrixField","Check","checked","correct","answer","image","faTimes","marginLeft","marginBottom","tableHeaders","tableData","p","answerIndex","onChangeAnswerTable","faImage","faTable","preColumns","preRows","objTimeout","onShowNewTablePopover","faTrash","newTableHeaders","newTableData","answerTableHeaders","initQuestion","questionNumber","AdminQuestionsAdd","topics","setTopics","setSubTopics","examBodyName","exam","setExam","setTopicId","subTopicId","setSubTopicId","fileInput","useRef","setQuestion","setAnswers","assetToChange","setAssetToChange","visibleRegisterConfirmPopover","setVisibleRegisterConfirmPopover","registerConfirmTarget","setRegisterConfirmTarget","visibleClearEntryConfirmPopover","setVisibleClearEntryConfirmPopover","clearEntryConfirmTarget","setClearEntryConfirmTarget","arrSubTopics","onChangeQuestion","onUploadImage","current","click","onFileChanged","a","files","fileName","arrAnswers","onChangeQuestionTableMatrix","clearQuestionEntry","innerValue","splice","File","ref","AdminQuestionsEdit","visibleUpdateConfirmPopover","setVisibleUpdateConfirmPopover","updateConfirmTarget","setUpdateConfirmTarget","AnswerInRow","QuestionInRow","onDelete","topicName","subTopicName","isDetailOpened","setIsDetailOpened","removingQuestionId","setRemovingQuestionId","visibleConfirmPopover","setVisibleConfirmPopover","setTarget","Accordion","Toggle","FontAwesomeIcon","faAngleDown","eventKey","classNames","Collapse","DropdownButton","Dropdown","dropDownTarget","parentNode","firstChild","showDeleteQuestionConfirmPopover","ai","examBodyLogoUrl","PropTypes","func","AdminQuestionsList","questions","setQuestions","onRefreshQuestionsList","keyword","qs","onClickRequestToPublishButton","onClickPublishQuestionsButton","updateQuestionsStatus","newQuestions","onDeleteQuestion","q","Alert","qi","CustomSwitch","color","setId","now","htmlFor","toggleDarkTheme","isDarkTheme","Dark","window","location","reload","VideoList","lazy","VideoView","VideoForm","UserList","UserForm","UserView","ReportList","ReportView","darkTheme","Navbar","expand","Brand","Nav","Link","href","NavDropdown","alignRight","faUser","exact","path","component","CustomerDashboard","bg","LandingPage","setEmail","setPassword","isSubmit","setIsSubmit","replace","controlId","onKeyPress","confirmPassword","person","setPerson","validated","validationErrors","setValidationErrors","genders","setGenders","arrGenders","onUpdatePerson","onRegister","preventDefault","stopPropagation","validateRegisterForm","newValidationErrors","invalid","AuthAPI","registerAdminUser","valid","minWidth","onSubmit","required","isInvalid","Feedback","xl","LoginPage","ForgotPasswordPage","ResetPasswordPage","RegisterPage","right","zIndex","toast","ti","Toast","flexBasis","onClose","INIT_STATE","forgotPasswordEmail","loading","state","action","initialToastState","newToasts","rootReducer","combineReducers","watchLoginUser","loginWithEmailPassword","watchVerifyAccessToken","verifyAccessTokenNow","watchRegisterUser","registerWithEmailPassword","watchLogoutUser","logout","watchForgotPassword","forgotPassword","watchResetPassword","resetPassword","rootSaga","takeEvery","loginWithEmailPasswordAsync","signInWithEmailAndPassword","signOut","verifyAccessTokenAsync","registerUserAsync","registerUserDto","registerUser","successResponse","catch","registerUserResponse","success","logoutAsync","forgotPasswordAsync","sendPasswordResetEmail","forgotPasswordDto","forgotPasswordStatus","resetPasswordAsync","resetPasswordCode","newPassword","confirmPasswordReset","resetPasswordDto","resetPasswordStatus","all","fork","watchToastAdd","autoRemoveToast","delay","time","getState","authSagas","toastSagas","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","compose","applyMiddleware","run","sagas","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","fallback","document","getElementById","authBaseURL","token"],"mappings":"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","file":"static/js/main.011b9fe7.chunk.js","sourcesContent":["import {\r\n    TOAST_ADD,\r\n    TOAST_REMOVE,\r\n    TOAST_REMOVE_ALL,\r\n} from './types';\r\nimport { ToastStatus } from '../../enums/toast';\r\n\r\nexport const addToast = (title, description, status = ToastStatus.Info) => ({ type: TOAST_ADD, payload: {\r\n    title,\r\n    description,\r\n    status,\r\n    id: `toast-${new Date().getTime()}`\r\n}});\r\nexport const removeToast = id => ({ type: TOAST_REMOVE, payload: { id } });\r\nexport const removeAllToasts = () => ({ type: TOAST_REMOVE_ALL });\r\n","import moment from 'moment';\r\n\r\nexport const capitalizeSentence = (sentence, forEachWord = false) => {\r\n    if (forEachWord) {\r\n        return sentence.split(' ').map(eachWord => capitalizeWord(eachWord)).join(' ');\r\n    } else {\r\n        return capitalizeWord(sentence);\r\n    }\r\n};\r\n\r\nexport const capitalizeWord = (word) => {\r\n    return String(word[0]).toUpperCase() + String(word.substring(1)).toLowerCase();\r\n}\r\n\r\nexport const validateEmail = (email) => {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport const timeFromNow = (timestamp) => {\r\n    timestamp = new Date(timestamp).getTime();\r\n    \r\n    return moment(timestamp).fromNow()\r\n}\r\n\r\nexport const secsToHMS = (currentSeconds) => {\r\n    return new Date(currentSeconds * 1000).toISOString().substr(11, 8)\r\n}\r\n\r\nexport const dateToLocalString = (stamp) => {\r\n    return new Date(stamp).toLocaleString()\r\n}\r\n","/* AUTHENTICATION */\r\nexport const LOGIN_USER = 'LOGIN_USER';\r\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\r\nexport const LOGIN_USER_ERROR = 'LOGIN_USER_ERROR';\r\nexport const VERIFY_ACCESS_TOKEN = 'VERIFY-ACCESS-TOKEN';\r\nexport const VERIFY_ACCESS_TOKEN_SUCCESS = 'VERIFY-ACCESS-TOKEN-SUCCESS';\r\nexport const VERIFY_ACCESS_TOKEN_ERROR = 'VERIFY-ACCESS-TOKEN-ERROR';\r\nexport const REGISTER_USER = 'REGISTER_USER';\r\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\r\nexport const REGISTER_USER_ERROR = 'REGISTER_USER_ERROR';\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\nexport const FORGOT_PASSWORD = 'FORGOT_PASSWORD';\r\nexport const FORGOT_PASSWORD_SUCCESS = 'FORGOT_PASSWORD_SUCCESS';\r\nexport const FORGOT_PASSWORD_ERROR = 'FORGOT_PASSWORD_ERROR';\r\nexport const RESET_PASSWORD = 'RESET_PASSWORD';\r\nexport const RESET_PASSWORD_SUCCESS = 'RESET_PASSWORD_SUCCESS';\r\nexport const RESET_PASSWORD_ERROR = 'RESET_PASSWORD_ERROR';\r\n\r\n// Toast\r\nexport const TOAST_ADD = 'TOAST-ADD';\r\nexport const TOAST_REMOVE = 'TOAST-REMOVE';\r\nexport const TOAST_REMOVE_ALL = 'TOAST-REMOVE-ALL';\r\n","import axios from './configuration';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst VIDEOS_BASE_URL = `${APIServerURL}/videos`;\r\nconst VideosAPI =  {\r\n    addVideo: ({title, file}) => {\r\n        let formData = new FormData();\r\n        const url = `${VIDEOS_BASE_URL}`;\r\n\r\n        formData.append('title', title);\r\n        formData.append('file', file);\r\n\r\n        return axios.post(url, formData);\r\n    },\r\n    getVideos: ({ page, perPage }) => {\r\n        const url = `${VIDEOS_BASE_URL}?page=${page}&perPage=${perPage}`;\r\n        return axios.get(url);\r\n    },\r\n    getVideo: ({id}) => {\r\n        return axios.get(`${VIDEOS_BASE_URL}/${id}`)\r\n    },\r\n    updateVideo: ({id, title, file}) => {\r\n        let formData = new FormData();\r\n        const url = `${VIDEOS_BASE_URL}/${id}/update`;\r\n\r\n        formData.append('title', title);\r\n        formData.append('file', file);\r\n        return axios.put(url, formData);\r\n    },\r\n    remove: ({id}) => {\r\n        const url = `${VIDEOS_BASE_URL}/${id}`;\r\n\r\n        return axios.delete(url);\r\n    },\r\n    removeVideo: ({id}) => {\r\n        const url = `${VIDEOS_BASE_URL}/${id}`;\r\n        return axios.delete(`${url}/video`)\r\n    }\r\n}\r\n\r\nexport default VideosAPI;\r\n","import axios from './configuration';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst BASE_URL = `${APIServerURL}/users`;\r\nconst UserAPI =  {\r\n    createOne: ({email, gender, fullName, password}) => {\r\n        return axios.post(`${BASE_URL}`, {\r\n            email, gender, fullName, password\r\n        })\r\n    },\r\n    getAll: ({ page, perPage }) => {\r\n        const url = `${BASE_URL}?page=${page}&perPage=${perPage}`;\r\n        return axios.get(url);\r\n    },\r\n    getOne: ({id}) => {\r\n        return axios.get(`${BASE_URL}/${id}`)\r\n    },\r\n    updateOne: ({id, email, fullName, gender}) => {\r\n        const url = `${BASE_URL}/${id}/update`;\r\n\r\n        return axios.put(url, {email, fullName, gender});\r\n    },\r\n    removeOne: ({id}) => {\r\n        const url = `${BASE_URL}/${id}`;\r\n\r\n        return axios.delete(url);\r\n    },\r\n}\r\n\r\nexport default UserAPI;\r\n","export const ToastStatus = {\r\n    Danger: 'DANGER',\r\n    Warning: 'WARNING',\r\n    Success: 'SUCCESS',\r\n    Info: 'INFO'\r\n};\r\n","import { UITheme } from '../enums/theme';\r\n\r\n// UI Theme\r\nexport const defaultTheme = UITheme.Light;\r\n\r\n// Const Names\r\nexport const ConstantNames = {\r\n    AccessToken: 'access-token',\r\n    UITheme: 'ui-theme'\r\n}\r\n\r\n// API Integration\r\nconst DOMAIN_NAME = 'http://localhost';\r\nconst DevServerURL = `${DOMAIN_NAME}:3300`;\r\nconst ProdServerURL = 'https://yourdev.server.com';\r\n\r\nexport const ServerURL = process.env.NODE_ENV === 'production' ? DevServerURL : DevServerURL;\r\n\r\nexport const APIServerURL = `${ServerURL}/apis`;\r\nexport const AssetsServerURL = `${ServerURL}`;\r\nexport const SocketServerURL = `${DOMAIN_NAME}:3030`;\r\n","import { defaultTheme, ConstantNames } from './common/constants/default-values';\r\nimport { UITheme } from './common/enums/theme';\r\n\r\nconst themes = Object.values(UITheme);\r\n\r\nconst previousUITheme = localStorage.getItem(ConstantNames.UITheme);\r\nconst currentUITheme = (previousUITheme && themes.includes(previousUITheme)) ? previousUITheme : defaultTheme;\r\nlocalStorage.setItem(ConstantNames.UITheme, currentUITheme);\r\n\r\nconst render = () => {\r\n  import(`./assets/scss/themes/${String(currentUITheme).toLocaleLowerCase()}.scss`).then(() => {\r\n    require('./common/api/configuration');\r\n    require('./AppRenderer');\r\n  });\r\n};\r\n\r\nrender();\r\n","var map = {\n\t\"./colors.scss\": [\n\t\t503,\n\t\t8\n\t],\n\t\"./dark.scss\": [\n\t\t504,\n\t\t9\n\t],\n\t\"./light.scss\": [\n\t\t505,\n\t\t10\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 253;\nmodule.exports = webpackAsyncContext;","import { connect } from 'react-redux';\r\n\r\nimport { loginUser, logoutUser, verifyAccessToken } from './actions/auth-actions';\r\nimport { addToast, removeToast } from './actions/toast-actions';\r\n\r\n// AUTHENTICATION\r\nconst mapUserStateToProps = ({ authReducer }) => {\r\n    return {\r\n        user: authReducer.user,\r\n        authError: authReducer.error,\r\n    }\r\n}\r\nconst mapAuthDispatchToProps = { loginUserAction: loginUser, logoutUserAction: logoutUser };\r\nexport const connectAuth = connect( mapUserStateToProps, mapAuthDispatchToProps );\r\n\r\nconst mapAuthStateToProps = ({ authReducer }) => ({\r\n    tokenVerified: !(authReducer.user === undefined),\r\n    authenticated: !!authReducer.user,\r\n    userRole: !authReducer.user ? null : authReducer.user.role });\r\nconst mapAuthCheckDispatchToProps = { verifyAccessTokenAction: verifyAccessToken };\r\nexport const connectAuthCheck = connect(mapAuthStateToProps, mapAuthCheckDispatchToProps);\r\n\r\n// TOASTS\r\nconst mapToastsToProps = ({ toastReducer }) => ({ toasts: toastReducer.toasts });\r\nconst mapToastsDispatchToProps = { addToastAction: addToast, removeToastAction: removeToast };\r\nexport const connectToasts = connect(mapToastsToProps, mapToastsDispatchToProps);\r\n","export const UserRole = {\r\n    SuperAdmin: 'SUPER-ADMIN',\r\n    Admin: 'ADMIN',\r\n    User: 'User'\r\n};\r\n\r\nexport const UserGender = {\r\n    Male: 'MALE',\r\n    Female: 'FEMALE',\r\n    Other: 'OTHER',\r\n};\r\n","import {\r\n    LOGIN_USER,\r\n    LOGIN_USER_SUCCESS,\r\n    LOGIN_USER_ERROR,\r\n    VERIFY_ACCESS_TOKEN,\r\n    VERIFY_ACCESS_TOKEN_SUCCESS,\r\n    VERIFY_ACCESS_TOKEN_ERROR,\r\n    LOGOUT_USER,\r\n    REGISTER_USER,\r\n    REGISTER_USER_SUCCESS,\r\n    REGISTER_USER_ERROR,\r\n    FORGOT_PASSWORD,\r\n    FORGOT_PASSWORD_SUCCESS,\r\n    FORGOT_PASSWORD_ERROR,\r\n    RESET_PASSWORD,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_ERROR,\r\n} from './types';\r\n\r\nexport const loginUser = (loginUserDto, history) => ({\r\n    type: LOGIN_USER,\r\n    payload: { loginUserDto, history },\r\n});\r\nexport const loginUserSuccess = () => ({\r\n    type: LOGIN_USER_SUCCESS,\r\n    payload: {},\r\n});\r\nexport const loginUserError = (message) => ({\r\n    type: LOGIN_USER_ERROR,\r\n    payload: { message },\r\n});\r\n\r\nexport const verifyAccessToken = (history, forceRedirect = true) => ({\r\n    type: VERIFY_ACCESS_TOKEN,\r\n    payload: { history, forceRedirect },\r\n});\r\nexport const verifyAccessTokenSuccess = (user) => ({\r\n    type: VERIFY_ACCESS_TOKEN_SUCCESS,\r\n    payload: { user },\r\n});\r\nexport const verifyAccessTokenError = (message) => ({\r\n    type: VERIFY_ACCESS_TOKEN_ERROR,\r\n    payload: { message },\r\n});\r\n\r\nexport const forgotPassword = (forgotPasswordDto, history) => ({\r\n    type: FORGOT_PASSWORD,\r\n    payload: { forgotPasswordDto, history },\r\n});\r\nexport const forgotPasswordSuccess = (email) => ({\r\n    type: FORGOT_PASSWORD_SUCCESS,\r\n    payload: { email },\r\n});\r\nexport const forgotPasswordError = (message) => ({\r\n    type: FORGOT_PASSWORD_ERROR,\r\n    payload: { message },\r\n});\r\n\r\nexport const resetPassword = ({ password, history }) => ({\r\n    type: RESET_PASSWORD,\r\n    payload: { resetPasswordDto: { password }, history },\r\n});\r\nexport const resetPasswordSuccess = () => ({\r\n    type: RESET_PASSWORD_SUCCESS,\r\n    payload: {},\r\n});\r\nexport const resetPasswordError = (message) => ({\r\n    type: RESET_PASSWORD_ERROR,\r\n    payload: { message },\r\n});\r\n\r\nexport const registerUser = (registerUserDto, history) => ({\r\n    type: REGISTER_USER,\r\n    payload: { registerUserDto, history },\r\n});\r\nexport const registerUserSuccess = () => ({\r\n    type: REGISTER_USER_SUCCESS,\r\n    payload: {},\r\n});\r\nexport const registerUserError = (message) => ({\r\n    type: REGISTER_USER_ERROR,\r\n    payload: { message },\r\n});\r\n\r\nexport const logoutUser = (history) => ({\r\n    type: LOGOUT_USER,\r\n    payload: { history },\r\n});\r\n","import axios from 'axios';\r\nimport { getAccessToken } from '../utils/auth';\r\n\r\n// Add a request interceptor\r\naxios.interceptors.request.use(function (config) {\r\n    const at = getAccessToken();\r\n    config.headers.Authorization = `Bearer ${at}`;\r\n    return config;\r\n}, function (error) {\r\n    return Promise.reject(error);\r\n});\r\n\r\n// Add a response interceptor\r\naxios.interceptors.response.use(function (response) {\r\n    return response.data;\r\n}, function (error) {\r\n    return Promise.reject(error.response.data);\r\n});\r\n\r\nexport default axios","import { decodeToken, isExpired } from \"react-jwt\";\r\n\r\n// Constants\r\nimport { UserRole } from '../enums/auth';\r\nimport { ConstantNames } from '../constants/default-values';\r\n\r\nexport const getAccessToken = () => {\r\n    return localStorage.getItem(ConstantNames.AccessToken);\r\n};\r\n\r\nexport const updateAccessToken = at => {\r\n    localStorage.setItem(ConstantNames.AccessToken, at)\r\n};\r\n\r\nexport const removeAccessToken = () => {\r\n    localStorage.removeItem(ConstantNames.AccessToken);\r\n};\r\n\r\nexport const getDefaultRedirectPath = () => {\r\n    const decodedToken = decodeToken(getAccessToken());\r\n\r\n    console.log(\"decodedToken\", decodedToken)\r\n\r\n    const expiration = isExpired(getAccessToken());\r\n    if (expiration) {\r\n        console.log('Need to Refresh AccesToken.')\r\n        return;\r\n    }\r\n\r\n    if (!decodedToken || !decodedToken.role) return '/';\r\n\r\n    // Go to admin dashboard for Admin / SupuerAdmin\r\n    if (isAdmin(decodedToken.role)) {\r\n        return '/admin';\r\n    } else {\r\n        return '/customer';\r\n    }\r\n}\r\n\r\nexport const isAdmin = userRole => {\r\n    switch(userRole) {\r\n        case UserRole.Admin:\r\n        case UserRole.SuperAdmin:\r\n            return true;\r\n        case UserRole.Customer:\r\n            return false;\r\n        default: return false;\r\n    }\r\n};\r\n\r\nexport const isSuperAdmin = userRole => {\r\n    return userRole === UserRole.SuperAdmin;\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Overlay, Popover } from 'react-bootstrap';\r\n\r\nexport const ConfirmPopover = ({ visible, target, setVisibility, label, onConfirm, placement }) => {\r\n    return (\r\n        <Overlay show={visible} target={target} placement={placement} onHide={() => setVisibility(false)} containerPadding={20} rootClose>\r\n            <Popover>\r\n                <Popover.Title as='h3'>Confirm</Popover.Title>\r\n                <Popover.Content>\r\n                    <p className='m-0'>{label}</p>\r\n                    {/* <Button className='my-2 ' variant='secondary' size='sm' onClick={() => setVisibility(false)}>Close</Button> */}\r\n                    <Button className='my-2 float-right' variant='primary' size='sm' onClick={()=> ([onConfirm(), setVisibility(false)])}>Confirm</Button>\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n    );\r\n};\r\n\r\nConfirmPopover.propTypes = {\r\n    visible: PropTypes.bool,\r\n    target: PropTypes.object,\r\n    setVisibility: PropTypes.func,\r\n    label: PropTypes.string,\r\n    onConfirm: PropTypes.func,\r\n    placement: PropTypes.oneOf(['right', 'left', 'top', 'bottom'])\r\n};\r\nConfirmPopover.defaultProps = {\r\n    visible: false,\r\n    target: null,\r\n    setVisibility: () => {},\r\n    label: '',\r\n    onConfirm: () => {},\r\n    placement: 'left'\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Row, Col } from 'react-bootstrap';\r\nimport UserApis from '../../common/api/users';\r\nimport VideosApis from '../../common/api/videos';\r\n\r\n\r\nfunction AdminDashboard() {\r\n    const [userCount, setUserCount] = useState(0);\r\n    const [videoCount, setVideoCount] = useState(0)\r\n\r\n    useEffect(() => {\r\n        UserApis\r\n            .getAll({perPage: 10, page: 1})\r\n            .then((data) => {\r\n                setUserCount(data.totalCount)\r\n            });\r\n\r\n        VideosApis\r\n            .getVideos({perPage: 10, page: 1})\r\n            .then((data) => {\r\n                setVideoCount(data.totalCount)\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='text-center'>\r\n                <h1>Admin Dashboard</h1>\r\n            </div>\r\n            <Row>\r\n                <Col>\r\n                    <Card className=\"text-center\">\r\n                        <Link to={`/admin/users`}>\r\n                            <div>\r\n                                <strong>Users</strong>\r\n                            </div>\r\n                            <div>\r\n                                <h1>{userCount}</h1>\r\n                            </div>\r\n                        </Link>\r\n                    </Card>\r\n                </Col>\r\n                <Col>\r\n                    <Card className=\"text-center\">\r\n                        <Link to={`/admin/videos`}>\r\n                            <div>\r\n                                <strong>Videos</strong>\r\n                            </div>\r\n                            <div>\r\n                                <h1>{videoCount}</h1>\r\n                            </div>\r\n                        </Link>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nAdminDashboard.propTypes = {};\r\nAdminDashboard.defaultProps = {};\r\n\r\nexport default withRouter(AdminDashboard);\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nexport const LoadingSpinner = (absolute) => {\r\n    return (<Fragment>\r\n        { absolute ?\r\n            <div className='d-flex'><Spinner animation='border' variant='primary' className='w-4rem h-4rem m-auto' /></div> :\r\n            <Spinner animation='border' variant='primary' className='w-4rem h-4rem' style={{ position: 'absolute', left: '50%', top: '50%' }} />\r\n        }\r\n    </Fragment>\r\n    );\r\n};\r\nLoadingSpinner.propTypes = {\r\n    absolute: PropTypes.bool\r\n};\r\nLoadingSpinner.defaultProps = {\r\n    absolute: false\r\n};\r\n\r\nexport const PageLoadingSpinner = () => {\r\n    return (\r\n        <div className='d-flex' style={{\r\n            position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: '#0000008a', zIndex: 10\r\n        }}>\r\n            <Spinner animation='border' variant='primary' className='w-4rem h-4rem m-auto' />\r\n        </div>\r\n    );\r\n};\r\nPageLoadingSpinner.propTypes = {};\r\nPageLoadingSpinner.defaultProps = {};\r\n","import axios from './configuration';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst examBodiesBaseURL = `${APIServerURL}/exam-bodies`;\r\nconst ExamBodiesAPI =  {\r\n    getAllExamBodies: () => {\r\n        const url = `${examBodiesBaseURL}`;\r\n        return axios.get(url);\r\n    },\r\n    getExamBodyById: (examBodyId) => {\r\n        const url = `${examBodiesBaseURL}/by-id/${examBodyId}`;\r\n        return axios.get(url);\r\n    }\r\n}\r\n\r\nexport default ExamBodiesAPI;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { LoadingSpinner } from '../../../components/common/spinner';\r\n\r\nimport ExamBodyAPI from '../../../common/api/exam-bodies';\r\n\r\nfunction AdminSelectExamBody({ history }) {\r\n    const [examBodies, setExamBodies] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        ExamBodyAPI.getAllExamBodies().then(arrExamBodies => {\r\n            setExamBodies(arrExamBodies);\r\n            setIsLoading(false);\r\n        }, e => {\r\n            console.log(e);\r\n            setIsLoading(false);\r\n        });\r\n    }, [])\r\n\r\n    return (<Container className='pt-4'>\r\n        <Row className='mb-3'>\r\n            <Col>\r\n                <h1 className='text-primary text-center'>\r\n                    Select Exam Body to start\r\n                    </h1>\r\n            </Col>\r\n        </Row>\r\n        {isLoading ? <LoadingSpinner /> : null}\r\n        <Row>\r\n            {examBodies.map((examBody, ebi) =>\r\n                <Col key={ebi} sm={6} md={4} lg={3} className='p-1'>\r\n                    <Card className='w-100 shadow-sm'>\r\n                        <Card.Img className='w-50 mx-auto' variant='top' src={examBody.logoUrl} />\r\n                        <Card.Body>\r\n                            <Card.Title className='text-center'>{examBody.name}</Card.Title>\r\n                            <Button className='float-right' variant='primary'\r\n                                onClick={() => history.push(`/admin/questions/by-exam-body/${examBody.id}`)}>Go</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            )}\r\n            <Col sm={6} md={4} lg={3} className='p-1'>\r\n                <Card className='w-100 shadow-sm'>\r\n                    <Card.Img className='w-50 mx-auto' variant='top' src='https://i.ibb.co/g9qh9Ty/instagram-logo-icon-voronezh-russia-january-square-soft-shadow-171161240.jpg' />\r\n                    <Card.Title className='text-center'>&nbsp;</Card.Title>\r\n                    <Card.Body>\r\n                        <Button className='float-right' variant='primary'>Add new Exam Body</Button>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    </Container>);\r\n};\r\n\r\nAdminSelectExamBody.propTypes = {};\r\nAdminSelectExamBody.defaultProps = {};\r\n\r\nexport default withRouter(AdminSelectExamBody);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nexport const CustomSelect = ({ label, value, values, onChange }) => {\r\n    return (\r\n        <Form.Group>\r\n            <Form.Label><strong>{label}</strong></Form.Label>\r\n            <Form.Control as=\"select\" onChange={onChange} value={value}>\r\n                {values.map(eachValue => \r\n                    typeof eachValue === 'object' ?\r\n                    <option key={eachValue.id} value={eachValue.id}>{eachValue.name}</option> :\r\n                    <option key={eachValue}>{eachValue}</option>\r\n                )}\r\n            </Form.Control>\r\n        </Form.Group>\r\n    );\r\n};\r\n\r\nCustomSelect.propTypes = {\r\n    label: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n    values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n        PropTypes.shape({\r\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n            name: PropTypes.string\r\n        })\r\n    ])),\r\n    onChange: PropTypes.func\r\n};\r\nCustomSelect.defaultProps = {\r\n    label: '',\r\n    values: [],\r\n    onChange: () => { }\r\n};\r\n","export const QuestionStatus = {\r\n    Draft: 'DRAFT',\r\n    UnderReview: 'UNDER-REVIEW',\r\n    Published: 'PUBLISHED',\r\n};\r\n","import axios from 'axios';\r\nimport querystring from 'query-string';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\nimport { QuestionStatus } from '../enums/questions';\r\n\r\nconst questionsBaseURL = `${APIServerURL}/questions`;\r\nconst QuestionsAPI = {\r\n    // Questions Groups Page\r\n    findQuestionGroups: (examBodyId, filterOptions = {}) => {\r\n        const copiedFilterOptions = {};\r\n        for (const key in filterOptions) {\r\n            if (Object.hasOwnProperty.call(filterOptions, key)) {\r\n                const value = filterOptions[key];\r\n                if (!!value) {\r\n                    copiedFilterOptions[key] = value;\r\n                }\r\n            }\r\n        }\r\n        const query = querystring.stringify(copiedFilterOptions);\r\n        const url = `${questionsBaseURL}/group-by/${examBodyId}?${query}`;\r\n        return axios.get(url);\r\n    },\r\n    findAdditionalDetails: (examBodyId, subjectId, year) => {\r\n        const url = `${questionsBaseURL}/group-by/additional-details/${examBodyId}/${subjectId}/${year}`;\r\n        return axios.get(url);\r\n    },\r\n    // Add Questions Page\r\n    initRegisterQuestionsPage: (examBodyId, subjectId) => {\r\n        const url = `${questionsBaseURL}/register/init/${examBodyId}/${subjectId}`;\r\n        return axios.get(url);\r\n    },\r\n    registerQuestion: (rqDto, answers) => {\r\n        const url = `${questionsBaseURL}/register`;\r\n        return axios.post(url, rqDto).then(registerResponse => {\r\n            const { id } = registerResponse;\r\n            return QuestionsAPI.attachAnswers(id, answers)\r\n        });\r\n    },\r\n    attachAnswers: (questionId, answers) => {\r\n        const url = `${questionsBaseURL}/attach-answers/${questionId}`;\r\n        return axios.post(url, { answers });\r\n    },\r\n    // Questions List Page\r\n    findQuestionsByExam: (examBodyId, subjectId, year, objQuery) => {\r\n        const query = {};\r\n        for (const key in objQuery) {\r\n            if (Object.hasOwnProperty.call(objQuery, key)) {\r\n                const value = objQuery[key];\r\n                if (!!value) { query[key] = value;}\r\n            }\r\n        }\r\n        const url = `${questionsBaseURL}/by-exam/${examBodyId}/${subjectId}/${year}?${querystring.stringify(query)}`;\r\n        return axios.get(url);\r\n\r\n    },\r\n    requestToPublish: (examBodyId, subjectId, year) => {\r\n        const url = `${questionsBaseURL}/update-exam-status`;\r\n        return axios.put(url, { examBodyId, subjectId, year, status: QuestionStatus.UnderReview });\r\n    },\r\n    publishQuestions: (examBodyId, subjectId, year) => {\r\n        const url = `${questionsBaseURL}/update-exam-status`;\r\n        return axios.put(url, { examBodyId, subjectId, year, status: QuestionStatus.Published });\r\n    },\r\n    // Edit Question Page\r\n    initEditQuestionsPage: (questionId) => {\r\n        const url = `${questionsBaseURL}/update/init/${questionId}`;\r\n        return axios.get(url);\r\n    },\r\n    updateQuestion: (question, answers) => {\r\n        const url = `${questionsBaseURL}/update/${question.id}`;\r\n        return axios.put(url, { question: { ...question, id: null }, answers });\r\n    },\r\n    deleteQuestion: (id) => {\r\n        const url = `${questionsBaseURL}/${id}`;\r\n        return axios.delete(url);\r\n    }\r\n}\r\n\r\nexport default QuestionsAPI;\r\n","import axios from 'axios';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst subjectsBaseURL = `${APIServerURL}/subjects`;\r\nconst SubjectsAPI =  {\r\n    getAllSubjects: () => {\r\n        const url = `${subjectsBaseURL}`;\r\n        return axios.get(url).then(subjects => subjects, e => e);\r\n    },\r\n}\r\n\r\nexport default SubjectsAPI;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Container, FormControl, Image, InputGroup, Modal, Overlay, Pagination, Popover, Row, Table } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars, faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { CustomSelect } from '../../../components/common/select';\r\nimport { LoadingSpinner } from '../../../components/common/spinner';\r\n\r\nimport QuestionsAPI from '../../../common/api/questions';\r\nimport ExamBodyAPI from '../../../common/api/exam-bodies';\r\nimport SubjectsAPI from '../../../common/api/subjects';\r\nimport { connectAuth, connectToasts } from '../../../common/redux/connects';\r\nimport { UserRole } from '../../../common/enums/auth';\r\nimport { QuestionStatus } from '../../../common/enums/questions';\r\nimport { ToastStatus } from '../../../common/enums/toast';\r\nimport { ConfirmPopover } from '../../../components/common/popover';\r\n\r\nconst questionGroupTableHeaders = ['Year', 'Subject', 'Question Count', 'Status', 'Actions'];\r\n\r\nfunction AdminQuestionGroups({ match, history, user, addToastAction }) {\r\n    //Current Exam Body\r\n    const [examBody, setExamBody] = useState({ id: '', name: '', logoUrl: '' });\r\n    // Necessary Arrays\r\n    const [questionGroups, setQuestionGroups] = useState([]);\r\n    const [subjects, setSubjects] = useState([]);\r\n    const [years, setYears] = useState([]);\r\n\r\n    // Create new Question Group\r\n    const [newQuestionGroupInput, setNewQuestionGroupInput] = useState({\r\n        subjectId: '',\r\n        year: new Date().getFullYear()\r\n    });\r\n\r\n    // Admin Filtering by Subject, Year, Status\r\n    const [filterCategories, setFilterCategories] = useState({\r\n        subjects: [{ id: '', name: '- All Subjects -' }],\r\n        years: [{ id: 0, name: '- All Years -' }],\r\n        statuses: [{ id: '', name: '- All Subjects -' }]\r\n    })\r\n    const [filterOptions, setFilterOptions] = useState({\r\n        subjectId: '',\r\n        year: 0,\r\n        status: ''\r\n    });\r\n\r\n    // Additional Details\r\n    const [selectedQuestionGroup, setSelectedQuestionGroup] = useState(null);\r\n    const [visibleAdditionalDetails, setVisibleAdditionalDetails] = useState(false);\r\n\r\n    // OverLay\r\n    const [actionIndex, setActionIndex] = useState(-1);\r\n    const [visibleActionPopover, setVisibleActionPopover] = useState(false);\r\n    const [actionTarget, setActionTarget] = useState(null);\r\n    const [visibleNewExamPopover, setVisibleNewExamPopover] = useState(false);\r\n    const [newExamTarget, setNewExamTarget] = useState(null);\r\n\r\n    // Pagination\r\n    const [pageIndex, setPageIndex] = useState(0);\r\n    const [total, setTotal] = useState({ pagesCount: 1, groupsCount: 0 });\r\n\r\n    // Confirm Popover\r\n    const [visiblePublishConfirmPopover, setVisiblePublishConfirmPopover] = useState(false);\r\n    const [publishConfirmTarget, setPublishConfirmTarget] = useState(null);\r\n    const [visibleRequestToPublishConfirmPopover, setVisibleRequestToPublishConfirmPopover] = useState(false);\r\n    const [requestToPublishConfirmTarget, setRequestToPublishConfirmTarget] = useState(null);\r\n\r\n    // Loading Status\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const { examBodyId } = match.params;\r\n        ExamBodyAPI.getExamBodyById(examBodyId).then(eb => setExamBody(eb), e => console.log(e));\r\n        SubjectsAPI.getAllSubjects().then(arrSubjects => {\r\n            setSubjects(arrSubjects);\r\n            const newYears = [];\r\n            for (let i = 1988; i < new Date().getFullYear(); i++) {\r\n                newYears.push(i);\r\n            }\r\n            setYears(newYears);\r\n\r\n            setNewQuestionGroupInput({ ...newQuestionGroupInput, subjectId: arrSubjects[0].id, year: newYears[0] });\r\n\r\n            const newStatuses = [{ id: '', name: '- All Statuses -' }];\r\n            for (const value of Object.values(QuestionStatus)) {\r\n                newStatuses.push({ id: value, name: String(value).split('-').join(' ') });\r\n            }\r\n\r\n            setFilterCategories({\r\n                subjects: [{ id: '', name: '- All Subjects -' }].concat(arrSubjects.map(subject => ({ id: subject.id, name: subject.name }))),\r\n                years: [{ id: 0, name: '- All Years -' }].concat(newYears.map(year => ({ id: year, name: `${year}` }))),\r\n                statuses: newStatuses\r\n            });\r\n        }, e => {\r\n            console.log(e);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!pageIndex) {\r\n            onRefreshQuestionGroups();\r\n        } else {\r\n            setPageIndex(0);\r\n        }\r\n    }, [filterOptions]);\r\n\r\n    useEffect(() => {\r\n        onRefreshQuestionGroups();\r\n    }, [pageIndex]);\r\n\r\n    const getSubjectNameWithId = (id) => {\r\n        const subject = subjects.find(s => s.id === id);\r\n        if (subject) { return subject.name; }\r\n        return '';\r\n    };\r\n\r\n    // Actions Popover\r\n    const toggleActionPopover = (event, index) => {\r\n        setActionIndex(index);\r\n        setActionTarget(event.target);\r\n        let objTimeOut = setTimeout(() => {\r\n            clearTimeout(objTimeOut);\r\n            setVisibleActionPopover(true);\r\n            setVisibleNewExamPopover(false);\r\n        }, 100);\r\n\r\n    };\r\n\r\n    const onViewAdditionalDetails = () => {\r\n        const { examBodyId } = match.params;\r\n        const qGroup = questionGroups[actionIndex];\r\n        setVisibleActionPopover(false);\r\n        if (qGroup.count < 1) {\r\n            addToastAction('Info', 'Nothing to show additional details.', ToastStatus.Info);\r\n            return;\r\n        }\r\n        const subject = subjects.find(subject => subject.id === qGroup.subjectId);\r\n        QuestionsAPI.findAdditionalDetails(examBodyId, qGroup.subjectId, qGroup.year).then(result => {\r\n            const { createdByFullName, lastModifiedByFullName } = result;\r\n            setSelectedQuestionGroup(Object.assign({\r\n                createdBy: createdByFullName,\r\n                lastModifiedBy: lastModifiedByFullName,\r\n                subjectName: subject.name\r\n            }, qGroup));\r\n            setVisibleAdditionalDetails(true);\r\n        }, e => console.log(e));\r\n    };\r\n\r\n    const onAddNewQuestion = () => {\r\n        const { examBodyId } = match.params;\r\n        const qGroup = questionGroups[actionIndex];\r\n        const { subjectId, year } = qGroup;\r\n        setVisibleActionPopover(false);\r\n        history.push(`/admin/questions/add/${examBodyId}/${subjectId}/${year}`);\r\n    };\r\n\r\n    const onViewAllQuestions = () => {\r\n        const { examBodyId } = match.params;\r\n        const qGroup = questionGroups[actionIndex];\r\n        const { subjectId, year } = qGroup;\r\n        setVisibleActionPopover(false);\r\n        if (qGroup.count < 1) {\r\n            addToastAction('Info', 'No questions to show.', ToastStatus.Info);\r\n            return;\r\n        }\r\n        history.push(`/admin/questions/view/${examBodyId}/${subjectId}/${year}`);\r\n    };\r\n\r\n    const onClickPublishQuestionGroupButton = (event) => {\r\n        setPublishConfirmTarget(event.target);\r\n        setVisiblePublishConfirmPopover(true);\r\n    }\r\n    const onPublishQuestionGroup = () => {\r\n        setVisiblePublishConfirmPopover(false);\r\n        const { examBodyId } = match.params;\r\n        const qGroup = questionGroups[actionIndex];\r\n        setVisibleActionPopover(false);\r\n        if (qGroup.count < 1) {\r\n            addToastAction('Info', 'Nothing to Publish.', ToastStatus.Info);\r\n            return;\r\n        }\r\n        QuestionsAPI.publishQuestions(examBodyId, qGroup.subjectId, qGroup.year).then(result => {\r\n            updateQuestionGroupStatus(actionIndex, QuestionStatus.Published);\r\n            addToastAction('Success', 'Questions are published successfully.', ToastStatus.Success);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    };\r\n\r\n    const onClickRequestToPublishQuestionGroupButton = (event) => {\r\n        setRequestToPublishConfirmTarget(event.target);\r\n        setVisibleRequestToPublishConfirmPopover(true);\r\n    };\r\n    const onRequestToPublishQuestionGroup = () => {\r\n        setVisibleRequestToPublishConfirmPopover(false);\r\n        const { examBodyId } = match.params;\r\n        const qGroup = questionGroups[actionIndex];\r\n        setVisibleActionPopover(false);\r\n        if (qGroup.count < 1) {\r\n            addToastAction('Info', 'Nothing to Review.', ToastStatus.Info);\r\n            return;\r\n        }\r\n        QuestionsAPI.requestToPublish(examBodyId, qGroup.subjectId, qGroup.year).then(result => {\r\n            updateQuestionGroupStatus(actionIndex, QuestionStatus.UnderReview);\r\n            addToastAction('Success', 'Questions are requested to be published.', ToastStatus.Success);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    };\r\n\r\n    const updateQuestionGroupStatus = (groupIndex, status) => {\r\n        const newGroups = JSON.parse(JSON.stringify(questionGroups));\r\n        const qGroup = newGroups[groupIndex];\r\n        qGroup.status = status;\r\n        setQuestionGroups(newGroups);\r\n    }\r\n\r\n    // Add new Question Group\r\n    const onAddNewQuestionGroup = () => {\r\n        const index = questionGroups.findIndex(qGroup => qGroup.year === newQuestionGroupInput.year && qGroup.subjectId === newQuestionGroupInput.subjectId);\r\n        setVisibleNewExamPopover(false);\r\n        if (index >= 0) {\r\n            addToastAction('Error', 'Specific Exam is already registered.', ToastStatus.Warning);\r\n            return;\r\n        }\r\n        setQuestionGroups(questionGroups.concat([{\r\n            count: 0,\r\n            subjectId: newQuestionGroupInput.subjectId,\r\n            year: newQuestionGroupInput.year,\r\n            status: QuestionStatus.Draft\r\n        }]));\r\n    };\r\n    const onChangeNewQuestionGroupInputs = (value, field) => {\r\n        setNewQuestionGroupInput({ ...newQuestionGroupInput, [field]: value });\r\n    };\r\n\r\n    // Filter Options\r\n    const onChangeFilterOptions = (value, field) => {\r\n        setFilterOptions({ ...filterOptions, [field]: value });\r\n    };\r\n    const onRefreshQuestionGroups = () => {\r\n        const { examBodyId } = match.params;\r\n        setIsLoading(true);\r\n        QuestionsAPI.findQuestionGroups(examBodyId, { ...filterOptions, pageIndex }).then(response => {\r\n            const { count, questionGroups } = response;\r\n            setTotal({\r\n                groupsCount: count,\r\n                pagesCount: Math.ceil(count / 10) // 10 is default limit per page\r\n            });\r\n            setQuestionGroups(questionGroups);\r\n            setIsLoading(false);\r\n        }, e => {\r\n            console.log(e);\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n    const onShowNewExamPopover = (event) => {\r\n        setNewExamTarget(event.target);\r\n        setVisibleNewExamPopover(true);\r\n        setVisibleActionPopover(false);\r\n    }\r\n\r\n    const renderPublishActionsDropDownItem = () => {\r\n        const qGroup = questionGroups[actionIndex];\r\n        if (!qGroup) { return null; }\r\n        if (qGroup.status === QuestionStatus.UnderReview && user.role === UserRole.SuperAdmin) {\r\n            return <Button className='my-1' variant='link' size='sm' disabled={user.role !== UserRole.SuperAdmin} onClick={onClickPublishQuestionGroupButton}>Publish Questions</Button>;\r\n        } else if (qGroup.status === QuestionStatus.Draft) {\r\n            return <Button className='my-1' variant='link' size='sm' onClick={onClickRequestToPublishQuestionGroupButton}>Request to Publish</Button>;\r\n        }\r\n        return null;\r\n    }\r\n    const renderAddNewQuestionDropDownItem = () => {\r\n        const qGroup = questionGroups[actionIndex];\r\n        if (!qGroup) { return null; }\r\n        if (qGroup.status !== QuestionStatus.Published) {\r\n            return <Button className='my-1' variant='link' size='sm' onClick={onAddNewQuestion}>\r\n                Add New Question\r\n        </Button>;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (<Container className='pt-4'>\r\n        <Row>\r\n            <Col>\r\n                <Button variant='link' onClick={() => history.goBack()}>\r\n                    <span className='h6'>Back</span>\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n        <Row className='mb-3'>\r\n            <Col>\r\n                <h1 className='text-primary text-center'>Examinations</h1>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12}>\r\n                <h4>Filter Options</h4>\r\n            </Col>\r\n            <Col md={4}>\r\n                <CustomSelect label='Year' values={filterCategories.years} value={filterOptions.year} onChange={(e) => onChangeFilterOptions(parseInt(e.target.value), 'year')} />\r\n            </Col>\r\n            <Col md={4}>\r\n                <CustomSelect label='Subject' values={filterCategories.subjects} value={filterOptions.subjectId} onChange={(e) => onChangeFilterOptions(e.target.value, 'subjectId')} />\r\n            </Col>\r\n            <Col md={4}>\r\n                <CustomSelect label='Status' values={filterCategories.statuses} value={filterOptions.status} onChange={(e) => onChangeFilterOptions(e.target.value, 'status')} />\r\n            </Col>\r\n        </Row>\r\n        <Row className='align-items-center'>\r\n            <Image src={examBody.logoUrl} style={{ height: 60 }} className='d-inline ml-3' rounded />\r\n            <h4 className='ml-2 d-inline'>{examBody.name}</h4>\r\n            {isLoading ?\r\n                <LoadingSpinner /> :\r\n                <FontAwesomeIcon className='cursor-pointer ml-auto mr-3 text-success float-right' icon={faPlus} onClick={(e) => onShowNewExamPopover(e)} size='lg' />\r\n            }\r\n        </Row>\r\n        <Row>\r\n            <Col className='text-right'>\r\n                <h5 className='ml-auto'>({total.groupsCount} Examinations)</h5>\r\n            </Col>\r\n        </Row>\r\n        {!isLoading && questionGroups.length < 1 ?\r\n            <h3 className='text-center'>No Questions found</h3> :\r\n            <Table responsive bordered>\r\n                <thead><tr>\r\n                    {questionGroupTableHeaders.map((headerName, hi) => <th key={hi}>{headerName}</th>)}\r\n                </tr></thead>\r\n                <tbody>\r\n                    {questionGroups.map((qGroup, qgi) => <tr key={qgi}>\r\n                        <td style={{ width: 100 }}>{qGroup.year}</td>\r\n                        <td>{getSubjectNameWithId(qGroup.subjectId)}</td>\r\n                        <td style={{ width: 180 }}>{qGroup.count}</td>\r\n                        <td style={{ width: 180 }}>\r\n                            <span className='text-capitalize'>{String(qGroup.status).split('-').join(' ').toLowerCase()}</span>\r\n                        </td>\r\n                        <td style={{ width: 100 }}>\r\n                            <FontAwesomeIcon className='cursor-pointer' icon={faBars} onClick={(e) => toggleActionPopover(e, qgi)} size='lg' />\r\n                        </td>\r\n                    </tr>)}\r\n                </tbody>\r\n            </Table>\r\n        }\r\n        <Row className='justify-content-end'>\r\n            <Col>\r\n                <Pagination className='float-right'>\r\n                    <Pagination.First disabled={pageIndex <= 0} onClick={() => setPageIndex(0)} />\r\n                    <Pagination.Prev disabled={pageIndex <= 0} onClick={() => setPageIndex(pageIndex - 1)} />\r\n                    <Pagination.Item active>{pageIndex + 1}</Pagination.Item>\r\n                    <Pagination.Next disabled={pageIndex >= total.pagesCount - 1} onClick={() => setPageIndex(pageIndex + 1)} />\r\n                    <Pagination.Last disabled={pageIndex >= total.pagesCount - 1} onClick={() => setPageIndex(total.pagesCount - 1)} />\r\n                </Pagination>\r\n            </Col>\r\n        </Row>\r\n\r\n        {!selectedQuestionGroup ? null :\r\n            <Modal show={visibleAdditionalDetails} onHide={() => setVisibleAdditionalDetails(false)}\r\n                backdrop=\"static\" keyboard={false} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Additional Details</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-year\">Year</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Year\" aria-label=\"Year\" aria-describedby=\"sqgroup-year\" value={selectedQuestionGroup.year} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-subject\">Subject</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Subject\" aria-label=\"Subject\" aria-describedby=\"sqgroup-subject\" value={selectedQuestionGroup.subjectName} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-status\">Status</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Status\" aria-label=\"Status\" aria-describedby=\"sqgroup-status\" value={selectedQuestionGroup.status} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-qcount\">Question Count</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Question Count\" aria-label=\"Question Count\" aria-describedby=\"sqgroup-qcount\" value={selectedQuestionGroup.count} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-created-at\">Created At</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Created At\" aria-label=\"Created At\" aria-describedby=\"sqgroup-created-at\" value={selectedQuestionGroup.createdAt} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-created-by\">Created By</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Created By\" aria-label=\"Created By\" aria-describedby=\"sqgroup-created-by\" value={selectedQuestionGroup.createdBy} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-last-modified-at\">Last Modifed At</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Last Modifed At\" aria-label=\"Last Modifed At\" aria-describedby=\"sqgroup-last-modified-at\" value={selectedQuestionGroup.lastModifiedAt} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-last-modified-by\">Last Modified By</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Last Modified By\" aria-label=\"Last Modified By\" aria-describedby=\"sqgroup-last-modified-by\" value={selectedQuestionGroup.lastModifiedBy} />\r\n                    </InputGroup>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={() => setVisibleAdditionalDetails(false)}>Close</Button>\r\n                </Modal.Footer>\r\n            </Modal>}\r\n\r\n        <Overlay show={visibleActionPopover} target={actionTarget} placement='left' onHide={() => setVisibleActionPopover(false)} containerPadding={20} rootClose>\r\n            <Popover style={{ maxWidth: 200 }}>\r\n                <Popover.Title as='h3' className='p-3'>Actions</Popover.Title>\r\n                <Popover.Content>\r\n                    <Button className='my-1' variant='link' size='sm' onClick={onViewAdditionalDetails}>\r\n                        View Additional Details\r\n                    </Button>\r\n                    {renderAddNewQuestionDropDownItem()}\r\n                    <Button className='my-1' variant='link' size='sm' onClick={onViewAllQuestions}>\r\n                        View All Questions\r\n                    </Button>\r\n                    {renderPublishActionsDropDownItem()}\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n\r\n        <Overlay show={visibleNewExamPopover} target={newExamTarget} placement='left' onHide={() => setVisibleNewExamPopover(false)} containerPadding={20} rootClose>\r\n            <Popover style={{ maxWidth: 200 }}>\r\n                <Popover.Title as='h3' className='p-3'>New Examination</Popover.Title>\r\n                <Popover.Content>\r\n                    <CustomSelect label='Year' values={years} value={newQuestionGroupInput.year} onChange={e => onChangeNewQuestionGroupInputs(parseInt(e.target.value), 'year')} />\r\n                    <CustomSelect label='Subject' values={subjects} value={newQuestionGroupInput.subjectId} onChange={e => onChangeNewQuestionGroupInputs(e.target.value, 'subjectId')} />\r\n                    <div className='d-flex justify-content-end'>\r\n                        <Button size='sm' className='mb-2' onClick={onAddNewQuestionGroup}>Create & Close</Button>\r\n                    </div>\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n\r\n        <ConfirmPopover visible={visiblePublishConfirmPopover} target={publishConfirmTarget} setVisibility={setVisiblePublishConfirmPopover}\r\n            label='Are you sure to publish questions?' onConfirm={onPublishQuestionGroup}/>\r\n\r\n        <ConfirmPopover visible={visibleRequestToPublishConfirmPopover} target={requestToPublishConfirmTarget}\r\n            setVisibility={setVisibleRequestToPublishConfirmPopover} label='Are you sure to request this question group to publish?' onConfirm={onRequestToPublishQuestionGroup}/>\r\n\r\n    </Container>);\r\n};\r\n\r\nAdminQuestionGroups.propTypes = {};\r\nAdminQuestionGroups.defaultProps = {};\r\n\r\nexport default withRouter(connectAuth(connectToasts(AdminQuestionGroups)));\r\n","import axios from 'axios';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst subTopicsBaseURL = `${APIServerURL}/sub-topics`;\r\nconst SubTopicsAPI =  {\r\n    getSubTopics: (topicId) => {\r\n        const url = `${subTopicsBaseURL}/${topicId}`;\r\n        return axios.get(url).then(subTopics => subTopics, e => e);\r\n    },\r\n}\r\n\r\nexport default SubTopicsAPI;\r\n","import axios from 'axios';\r\n\r\n// Constants\r\nimport { APIServerURL, AssetsServerURL } from '../constants/default-values';\r\n\r\nconst UploadAPI = {\r\n    uploadFile: file => {\r\n        const url = `${APIServerURL}/uploads/shapes`;\r\n        const form = new FormData();\r\n        form.append('file', file);\r\n        return axios.post(url, form).then(res => `${AssetsServerURL}/${res.url}`);\r\n    }\r\n}\r\n\r\nexport default UploadAPI;","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form } from 'react-bootstrap';\r\nimport { MathComponent } from 'mathjax-react'\r\n\r\n// const defaultTex = `\\\\begin{array}{l}\\\\frac{1}{x}\\\\end{array}`;\r\n\r\nexport const AnyTextInput = ({ value, onChange, className, editable, equation }) => {\r\n    const onError = (error) => { console.log(error); };\r\n    const onSuccess = () => { };\r\n\r\n    const renderEditableArea = () => {\r\n        if (editable) {\r\n            return <Form.Control as='textarea' value={value} onChange={e => onChange(e.target.value)} />;\r\n        } else if (!equation) {\r\n            return <span>{value}</span>;\r\n        }\r\n    };\r\n\r\n    return (<Fragment>\r\n        {renderEditableArea()}\r\n        {equation?<MathComponent tex={value} onError={(err) => onError(err)} onSuccess={() => onSuccess()} />:null}\r\n    </Fragment>\r\n    );\r\n};\r\nAnyTextInput.propTypes = {\r\n    className: PropTypes.string,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func,\r\n    editable: PropTypes.bool,\r\n    equation: PropTypes.bool\r\n};\r\nAnyTextInput.defaultProps = {\r\n    className: '',\r\n    value: '',\r\n    onChange: () => {},\r\n    editable: false,\r\n    equation: false\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Button, Form, FormControl,\r\n    Image, InputGroup, Overlay,\r\n    Popover, Table\r\n} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTable, faImage, faTrash, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { AnyTextInput } from './text-input';\r\n\r\nexport const EditableTable = ({ headers, data, onChange }) => {\r\n    const onChangeDataCell = (value, rowIndex, colIndex) => {\r\n        const newData = JSON.parse(JSON.stringify(data));\r\n        newData[rowIndex][colIndex] = value;\r\n        onChange({ content: newData, type: 'DATA' });\r\n    };\r\n\r\n    const onChangeHeaderCell = (value, colIndex) => {\r\n        const newHeader = JSON.parse(JSON.stringify(headers));\r\n        newHeader[colIndex] = value;\r\n        onChange({ content: newHeader, type: 'HEADER' });\r\n    };\r\n\r\n    return (\r\n        <Table responsive bordered>\r\n            <thead><tr>\r\n                {headers.map((headerName, hi) => <th key={hi}>\r\n                    <Form.Control variant='dark' type=\"text\" value={headerName} onChange={e => onChangeHeaderCell(e.target.value, hi)} />\r\n                </th>)}\r\n            </tr></thead>\r\n            <tbody>\r\n                {data.map((row, ri) => <tr key={ri}>{row.map((cell, ci) => <td key={ci}>\r\n                    <Form.Control type=\"text\" value={cell} onChange={e => onChangeDataCell(e.target.value, ri, ci)} />\r\n                </td>)}</tr>)}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n};\r\n\r\nexport const CustomTable = ({ headers, data, responsive, striped, bordered, hover }) => {\r\n    return (\r\n        <Table responsive={responsive} striped={striped} bordered={bordered} hover={hover}>\r\n            <thead><tr>\r\n                {headers.map((headerName, hi) => <th key={hi}><AnyTextInput value={headerName} equation/></th>)}\r\n            </tr></thead>\r\n            <tbody>\r\n                {data.map((row, ri) => <tr key={ri}>{row.map((cell, ci) => <td key={ci}><AnyTextInput value={cell} equation/></td>)}</tr>)}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n};\r\n\r\nCustomTable.propTypes = {\r\n    headers: PropTypes.arrayOf(PropTypes.string),\r\n    data: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\r\n    responsive: PropTypes.bool,\r\n    striped: PropTypes.bool,\r\n    bordered: PropTypes.bool,\r\n    hover: PropTypes.bool\r\n};\r\nCustomTable.defaultProps = {\r\n    headers: [],\r\n    data: [],\r\n    responsive: true,\r\n    striped: false,\r\n    bordered: true,\r\n    hover: false\r\n};\r\n\r\nexport const AnswerTable = ({ headers, data, onChange }) => {\r\n    const [tableMatrix, setTableMatrix] = useState({ rows: 0, columns: 0 });\r\n\r\n    const [visibleNewTablePopover, setVisibleNewTablePopover] = useState(false);\r\n    const [newTableTarget, setNewTableTarget] = useState(null);\r\n    const [newTableIndex, setNewTableIndex] = useState(-1);\r\n\r\n    const onChangeMatrixField = (value, field) => {\r\n        setTableMatrix({ ...tableMatrix, [field]: value });\r\n    };\r\n\r\n    const onCreateTable = () => {\r\n        setVisibleNewTablePopover(false);\r\n\r\n        if (tableMatrix.columns < 1 || tableMatrix.rows < 1) {\r\n            onChange({\r\n                tableHeaders: [],\r\n                tableData: []\r\n            }, newTableIndex, 'TABLE');\r\n            return;\r\n        }\r\n\r\n        const newTableHeaders = JSON.parse(JSON.stringify(data[newTableIndex].tableHeaders || []));\r\n        const newTableData = JSON.parse(JSON.stringify(data[newTableIndex].tableData || []));\r\n        if (newTableHeaders.length > tableMatrix.columns) {\r\n            newTableHeaders.length = tableMatrix.columns;\r\n        } else {\r\n            while (newTableHeaders.length < tableMatrix.columns) {\r\n                newTableHeaders.push('');\r\n            }\r\n        }\r\n\r\n        if (newTableData.length > tableMatrix.rows - 1) {\r\n            newTableData.length = tableMatrix.rows - 1;\r\n        } else {\r\n            while (newTableData.length < tableMatrix.rows - 1) {\r\n                newTableData.push([]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < newTableData.length; i++) {\r\n            const row = newTableData[i];\r\n            if (row.length > tableMatrix.columns - 1) {\r\n                row.length = tableMatrix.columns;\r\n                continue;\r\n            }\r\n            while (row.length < tableMatrix.columns) {\r\n                row.push('');\r\n            }\r\n        }\r\n\r\n        onChange({\r\n            tableHeaders: newTableHeaders,\r\n            tableData: newTableData\r\n        }, newTableIndex, 'TABLE');\r\n    };\r\n\r\n    const onChangeAnswerTable = ({ content, type, answerIndex }) => {\r\n        switch (type) {\r\n            case 'HEADER':\r\n                onChange({ tableHeaders: content }, answerIndex, 'TABLE');\r\n                break;\r\n            case 'DATA':\r\n                onChange({ tableData: content }, answerIndex, 'TABLE');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const onShowNewTablePopover = (event, index) => {\r\n        setNewTableIndex(index);\r\n        setNewTableTarget(event.target);\r\n        const preColumns = data[index].tableHeaders.length;\r\n        const preRows = data[index].tableData.length + 1;\r\n        setTableMatrix({ columns: preColumns, rows: preRows > 1 ? preRows : 0 })\r\n        let objTimeout = setTimeout(() => {\r\n            clearTimeout(objTimeout);\r\n            setVisibleNewTablePopover(true);\r\n        }, 100);\r\n    }\r\n\r\n    return (<Table responsive bordered>\r\n        <thead><tr>\r\n            {headers.map((headerName, hi) => <th key={hi}>{headerName}</th>)}\r\n        </tr></thead>\r\n        <tbody>\r\n            {data.map((row, ri) => <tr key={ri}>\r\n                <td width={80}>\r\n                    <Form.Check className='form-check-lg d-flex justify-content-center' type=\"checkbox\"\r\n                        checked={row.correct} onChange={e => onChange(e.target.checked, ri, 'CORRECT')} />\r\n                </td>\r\n                <td>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter Answer\" value={row.answer} className='mb-2'\r\n                        onChange={e => onChange(e.target.value, ri, 'ANSWER')} />\r\n                    {!row.image ? null : <Fragment>\r\n                        <Image src={row.image} rounded style={{ height: 150, maxWidth: '100%' }} className='mb-2' />\r\n                        <FontAwesomeIcon className='cursor-pointer text-danger' size='lg' icon={faTimes}\r\n                            style={{ marginLeft: -25, marginBottom: 60 }} onClick={() => onChange(null, ri, 'IMAGE-REMOVE')} />\r\n                    </Fragment>}\r\n                    <EditableTable headers={row.tableHeaders} data={row.tableData} onChange={p => onChangeAnswerTable({ ...p, answerIndex: ri })} />\r\n                </td>\r\n                <td width={120}>\r\n                    <FontAwesomeIcon className='cursor-pointer text-warning' size='lg' icon={faImage} onClick={() => onChange(null, ri, 'IMAGE-UPLOAD')} />\r\n                    <FontAwesomeIcon className='cursor-pointer text-info ml-1' size='lg' icon={faTable} onClick={(e) => onShowNewTablePopover(e, ri)} />\r\n                    <FontAwesomeIcon className='cursor-pointer text-danger ml-4' size='lg' icon={faTrash} onClick={() => onChange(null, ri, 'REMOVE')} />\r\n                </td>\r\n            </tr>)}\r\n        </tbody>\r\n        <Overlay show={visibleNewTablePopover} target={newTableTarget} placement='left' onHide={() => setVisibleNewTablePopover(false)} containerPadding={20} rootClose>\r\n            <Popover style={{ maxWidth: 200 }}>\r\n                <Popover.Title as='h3' className='p-3'>Create a Table</Popover.Title>\r\n                <Popover.Content>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"create-table-columns\">Columns</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"create-table-columns\" value={tableMatrix.columns}\r\n                            onChange={e => onChangeMatrixField(parseInt(e.target.value), 'columns')} />\r\n                    </InputGroup>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"create-table-rows\">Rows</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"create-table-rows\" value={tableMatrix.rows}\r\n                            onChange={e => onChangeMatrixField(parseInt(e.target.value), 'rows')} />\r\n                    </InputGroup>\r\n                    <div className='d-flex justify-content-end'>\r\n                        <Button size='sm' onClick={onCreateTable}>Create & Close</Button>\r\n                    </div>\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n    </Table>);\r\n};\r\n\r\nAnswerTable.propTypes = {\r\n    headers: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    data: PropTypes.arrayOf(PropTypes.shape({\r\n        correct: PropTypes.bool,\r\n        answer: PropTypes.string,\r\n        image: PropTypes.string,\r\n        tableHeaders: PropTypes.arrayOf(\r\n            PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.number,\r\n            ])\r\n        ),\r\n        tableData: PropTypes.arrayOf(PropTypes.arrayOf(\r\n            PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.number,\r\n            ])\r\n        ))\r\n    })),\r\n    onChange: PropTypes.func\r\n}\r\nAnswerTable.defaultProps = {\r\n    headers: [],\r\n    data: [],\r\n    onChange: () => { }\r\n};","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Col, Container, Form, FormControl, Image, InputGroup, Overlay, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTable, faImage, faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport QuestionsAPI from '../../../common/api/questions';\r\nimport SubTopicsAPI from '../../../common/api/sub-topics';\r\nimport UploadAPI from '../../../common/api/upload';\r\nimport { connectToasts } from '../../../common/redux/connects';\r\nimport { AnswerTable, EditableTable } from '../../../components/common/table';\r\nimport { ToastStatus } from '../../../common/enums/toast';\r\nimport { CustomSelect } from '../../../components/common/select';\r\nimport { ConfirmPopover } from '../../../components/common/popover';\r\n\r\nconst answerTableHeaders = ['Correct', 'Option', 'Actions']\r\nconst initQuestion = {\r\n    question: '',\r\n    questionNumber: 0,\r\n    image: '',\r\n    tableHeaders: [],\r\n    tableData: []\r\n};\r\n\r\nfunction AdminQuestionsAdd({ history, match, addToastAction }) {\r\n    const [topics, setTopics] = useState([]);\r\n    const [subTopics, setSubTopics] = useState([]);\r\n    const [exam, setExam] = useState({\r\n        examBodyId: '', examBodyName: '',\r\n        subjectId: '', subjectName: '', year: 0\r\n    });\r\n\r\n    const [topicId, setTopicId] = useState('');\r\n    const [subTopicId, setSubTopicId] = useState('');\r\n\r\n    const fileInput = useRef(null);\r\n    const [question, setQuestion] = useState(initQuestion);\r\n    const [answers, setAnswers] = useState([]);\r\n\r\n    const [assetToChange, setAssetToChange] = useState(null);\r\n    const [tableMatrix, setTableMatrix] = useState({ rows: 0, columns: 0 });\r\n\r\n    // New Table Popover\r\n    const [newTableTarget, setNewTableTarget] = useState(null);\r\n    const [visibleNewTablePopover, setVisibleNewTablePopover] = useState(false);\r\n\r\n    // Confirm Popover\r\n    const [visibleRegisterConfirmPopover, setVisibleRegisterConfirmPopover] = useState(false);\r\n    const [registerConfirmTarget, setRegisterConfirmTarget] = useState(null);\r\n    const [visibleClearEntryConfirmPopover, setVisibleClearEntryConfirmPopover] = useState(false);\r\n    const [clearEntryConfirmTarget, setClearEntryConfirmTarget] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const { examBodyId, subjectId, year } = match.params;\r\n        QuestionsAPI.initRegisterQuestionsPage(examBodyId, subjectId).then(result => {\r\n            const { examBodyName, subjectName } = result;\r\n            setExam({ examBodyName, subjectName, year: parseInt(year), examBodyId, subjectId });\r\n            setTopics(result.topics);\r\n            if (result.topics.length > 0) {\r\n                setTopicId(result.topics[0].id);\r\n            }\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (topicId) {\r\n            SubTopicsAPI.getSubTopics(topicId).then(arrSubTopics => {\r\n                setSubTopics(arrSubTopics);\r\n                setSubTopicId(arrSubTopics[0].id);\r\n            }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n        }\r\n    }, [topicId]);\r\n\r\n    const onChangeQuestion = (value, key) => { setQuestion({ ...question, [key]: value }); };\r\n    const onUploadImage = index => {\r\n        if (index < 0) {\r\n            setAssetToChange('QUESTION');\r\n        } else { setAssetToChange(`ANSWER-${index}`); }\r\n        fileInput.current.click();\r\n    };\r\n    const onFileChanged = async e => {\r\n        const { files } = e.target;\r\n        if (files.length > 0) {\r\n            const file = e.target.files[0];\r\n            const fileName = await UploadAPI.uploadFile(file);\r\n            if (!assetToChange) {\r\n                return;\r\n            }\r\n            if (assetToChange.includes('ANSWER')) {\r\n                const index = parseInt(assetToChange.split('-')[1]);\r\n                const arrAnswers = JSON.parse(JSON.stringify(answers));\r\n                arrAnswers[index].image = fileName\r\n                setAnswers(arrAnswers);\r\n            } else {\r\n                onChangeQuestion(fileName, 'image');\r\n            }\r\n            e.target.value = '';\r\n        }\r\n    }\r\n    const onChangeQuestionTableMatrix = (value, key) => { setTableMatrix({ ...tableMatrix, [key]: value }); }\r\n    const onChangeQuestionTable = ({ content, type }) => {\r\n        switch (type) {\r\n            case 'HEADER':\r\n                setQuestion({ ...question, tableHeaders: content });\r\n                break;\r\n            case 'DATA':\r\n                setQuestion({ ...question, tableData: content });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    const onCreateQuestionTable = () => {\r\n        setVisibleNewTablePopover(false)\r\n\r\n        if (tableMatrix.columns < 1 || tableMatrix.rows < 1) {\r\n            setQuestion({\r\n                ...question,\r\n                tableHeaders: [],\r\n                tableData: []\r\n            })\r\n            return;\r\n        }\r\n\r\n        const newTableHeaders = JSON.parse(JSON.stringify(question.tableHeaders || []));\r\n        const newTableData = JSON.parse(JSON.stringify(question.tableData || []));\r\n        if (newTableHeaders.length > tableMatrix.columns) {\r\n            newTableHeaders.length = tableMatrix.columns;\r\n        } else {\r\n            while (newTableHeaders.length < tableMatrix.columns) {\r\n                newTableHeaders.push('');\r\n            }\r\n        }\r\n\r\n        if (newTableData.length > tableMatrix.rows - 1) {\r\n            newTableData.length = tableMatrix.rows - 1;\r\n        } else {\r\n            while (newTableData.length < tableMatrix.rows - 1) {\r\n                newTableData.push([]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < newTableData.length; i++) {\r\n            const row = newTableData[i];\r\n            if (row.length > tableMatrix.columns - 1) {\r\n                row.length = tableMatrix.columns;\r\n                continue;\r\n            }\r\n            while (row.length < tableMatrix.columns) {\r\n                row.push('');\r\n            }\r\n        }\r\n\r\n        setQuestion({\r\n            ...question,\r\n            tableHeaders: newTableHeaders,\r\n            tableData: newTableData\r\n        })\r\n    };\r\n    const onClickClearEntryButton = (event) => {\r\n        setClearEntryConfirmTarget(event.target);\r\n        setVisibleClearEntryConfirmPopover(true);\r\n    }\r\n    const clearQuestionEntry = () => { setAnswers([]); setQuestion(initQuestion); setVisibleClearEntryConfirmPopover(false); };\r\n    const onClickRegisterButton = (event) => {\r\n        setRegisterConfirmTarget(event.target);\r\n        setVisibleRegisterConfirmPopover(true);\r\n    }\r\n    const registerQuestion = () => {\r\n        setVisibleRegisterConfirmPopover(false);\r\n        if (!question.question) {\r\n            addToastAction('Warning', 'Need to set question.', ToastStatus.Warning)\r\n            return;\r\n        } else if (answers.length < 1) {\r\n            addToastAction('Warning', 'Need to set answers for the question.', ToastStatus.Warning)\r\n            return;\r\n        }\r\n\r\n        QuestionsAPI.registerQuestion({\r\n            ...question, examBodyId: exam.examBodyId, subjectId: exam.subjectId, topicId, subTopicId, year: exam.year\r\n        }, answers).then(response => {\r\n            addToastAction('Success', 'A new question is registered successfully.', ToastStatus.Success);\r\n            clearQuestionEntry();\r\n        }, e => {\r\n            addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger);\r\n        });\r\n    }\r\n    const onShowNewTablePopover = (event) => {\r\n        const preColumns = question.tableHeaders.length;\r\n        const preRows = question.tableData.length + 1;\r\n        setTableMatrix({ columns: preColumns, rows: preRows > 1 ? preRows : 0 })\r\n        setNewTableTarget(event.target);\r\n        setVisibleNewTablePopover(true);\r\n    }\r\n\r\n    // Answers\r\n    const addAnswer = () => {\r\n        setAnswers(answers.concat([{\r\n            correct: false,\r\n            answer: '',\r\n            image: '',\r\n            tableHeaders: [],\r\n            tableData: []\r\n        }]));\r\n    };\r\n    const onChangeAnswerTable = (value, index, type) => {\r\n        const arrAnswers = JSON.parse(JSON.stringify(answers));\r\n        switch (type) {\r\n            case 'CORRECT':\r\n                arrAnswers[index].correct = value;\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'ANSWER':\r\n                arrAnswers[index].answer = value;\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'IMAGE-REMOVE':\r\n                arrAnswers[index].image = '';\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'IMAGE-UPLOAD':\r\n                onUploadImage(index);\r\n                break;\r\n            case 'TABLE':\r\n                for (const key of Object.keys(value)) {\r\n                    const innerValue = value[key];\r\n                    arrAnswers[index][key] = innerValue;\r\n                }\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'REMOVE':\r\n                arrAnswers.splice(index, 1);\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (<Container className='pt-4'>\r\n        <Row>\r\n            <Col>\r\n                <Button variant='link' onClick={() => history.goBack()}>\r\n                    <span className='h6'>Back</span>\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n        <Row className='mb-5'>\r\n            <Col>\r\n                <h1 className='text-primary text-center'>Add a new Question</h1>\r\n            </Col>\r\n        </Row>\r\n        <Form>\r\n            <Row>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Exam Body</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Exam Body\" value={exam.examBodyName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Subject</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Subject\" value={exam.subjectName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Year</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Year\" value={exam.year} />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}><CustomSelect label='Topic' values={topics} value={topicId} onChange={e => setTopicId(e.target.value)} /></Col>\r\n                <Col md={7}><CustomSelect label='Sub Topic' values={subTopics} value={subTopicId} onChange={e => setSubTopicId(e.target.value)} /></Col>\r\n            </Row>\r\n        </Form>\r\n        <Row>\r\n            <Col md={6} lg={4} className='ml-auto'>\r\n                <Form.Group>\r\n                    <Form.Label><strong>Question Number</strong></Form.Label>\r\n                    <Form.Control type='text' placeholder='Enter Question Number' value={question.questionNumber}\r\n                        onChange={e => onChangeQuestion(parseInt(e.target.value), 'questionNumber')} />\r\n                </Form.Group>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12} className='d-flex'>\r\n                <Form.Group className='flex-fill'>\r\n                    <Form.Label><strong>Question</strong></Form.Label>\r\n                    <Form.Control type='text' as='textarea' rows={3} placeholder='Enter Question' value={question.question}\r\n                        onChange={e => onChangeQuestion(e.target.value, 'question')} />\r\n                </Form.Group>\r\n                <div className='ml-3 d-flex flex-column justify-content-end'>\r\n                    <Form.Group className='mb-2'>\r\n                        <FontAwesomeIcon className='cursor-pointer text-warning' size='lg' icon={faImage} onClick={() => onUploadImage(-1)} />\r\n                    </Form.Group>\r\n                    <Form.Group className='pb-3'>\r\n                        <FontAwesomeIcon className='cursor-pointer text-info' size='lg' icon={faTable} onClick={(e) => onShowNewTablePopover(e)} />\r\n                    </Form.Group>\r\n                </div>\r\n            </Col>\r\n\r\n            {!question.image ? null : <Col sm={12}>\r\n                <Image src={question.image} rounded style={{ height: 200, maxWidth: '100%' }} className='mb-3 rounded border border-gray p-1' />\r\n                <FontAwesomeIcon className='cursor-pointer text-danger' size='lg' icon={faTimes}\r\n                    style={{ marginLeft: -25, marginBottom: 87 }} onClick={() => setQuestion({ ...question, image: '' })} />\r\n            </Col>}\r\n            <Col sm={12}>\r\n                <EditableTable headers={question.tableHeaders} data={question.tableData} onChange={onChangeQuestionTable} />\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12} className='px-0'>\r\n                <Form.Group>\r\n                    <Form.Label><strong>Answers</strong></Form.Label>\r\n                    <FontAwesomeIcon className='ml-3 cursor-pointer text-success' icon={faPlus} onClick={addAnswer} />\r\n                </Form.Group>\r\n            </Col>\r\n\r\n            <AnswerTable headers={answerTableHeaders} data={answers} onChange={onChangeAnswerTable} />\r\n        </Row>\r\n        <Row className='justify-content-between'>\r\n            <Button variant='warning' onClick={onClickClearEntryButton}>Clear Entry</Button>\r\n            <Button onClick={onClickRegisterButton}>Register this Question</Button>\r\n        </Row>\r\n        <Form.File ref={fileInput} label='' className='d-none' onChange={onFileChanged} />\r\n\r\n        <Overlay show={visibleNewTablePopover} target={newTableTarget} placement='left' onHide={() => setVisibleNewTablePopover(false)} containerPadding={20} rootClose>\r\n            <Popover style={{ maxWidth: 200 }}>\r\n                <Popover.Title as='h3' className='p-3'>Create a Table</Popover.Title>\r\n                <Popover.Content>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"question-table-columns\">Columns</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"question-table-columns\" value={tableMatrix.columns}\r\n                            onChange={e => onChangeQuestionTableMatrix(e.target.value, 'columns')} />\r\n                    </InputGroup>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"question-table-rows\">Rows</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"question-table-rows\" value={tableMatrix.rows}\r\n                            onChange={e => onChangeQuestionTableMatrix(e.target.value, 'rows')} />\r\n                    </InputGroup>\r\n                    <div className='d-flex justify-content-end'>\r\n                        <Button size='sm' onClick={onCreateQuestionTable}>Create & Close</Button>\r\n                    </div>\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n\r\n        <ConfirmPopover visible={visibleRegisterConfirmPopover} target={registerConfirmTarget} placement='left' setVisibility={setVisibleRegisterConfirmPopover}\r\n            label='Are you sure to register this question?' onConfirm={registerQuestion}/>\r\n\r\n        <ConfirmPopover visible={visibleClearEntryConfirmPopover} target={clearEntryConfirmTarget} placement='right' setVisibility={setVisibleClearEntryConfirmPopover}\r\n            label='Are you sure to clear entry?' onConfirm={clearQuestionEntry}/>\r\n    </Container>\r\n    );\r\n};\r\n\r\nAdminQuestionsAdd.propTypes = {};\r\nAdminQuestionsAdd.defaultProps = {};\r\n\r\nexport default withRouter(connectToasts(AdminQuestionsAdd));\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Col, Container, Form, FormControl, Image, InputGroup, Overlay, Popover, Row } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTable, faImage, faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport QuestionsAPI from '../../../common/api/questions';\r\nimport SubTopicsAPI from '../../../common/api/sub-topics';\r\nimport UploadAPI from '../../../common/api/upload';\r\nimport { connectToasts } from '../../../common/redux/connects';\r\nimport { AnswerTable, EditableTable } from '../../../components/common/table';\r\nimport { ToastStatus } from '../../../common/enums/toast';\r\nimport { CustomSelect } from '../../../components/common/select';\r\nimport { QuestionStatus } from '../../../common/enums/questions';\r\nimport { ConfirmPopover } from '../../../components/common/popover';\r\n\r\nconst answerTableHeaders = ['Correct', 'Option', 'Actions']\r\nconst initQuestion = {\r\n    id: '',\r\n    question: '',\r\n    questionNumber: 0,\r\n    image: '',\r\n    tableHeaders: [],\r\n    tableData: []\r\n};\r\n\r\nfunction AdminQuestionsEdit({ history, match, addToastAction }) {\r\n    const [topics, setTopics] = useState([]);\r\n    const [subTopics, setSubTopics] = useState([]);\r\n    const [exam, setExam] = useState({\r\n        examBodyId: '', examBodyName: '',\r\n        subjectId: '', subjectName: '', year: 0\r\n    });\r\n\r\n    const [topicId, setTopicId] = useState('');\r\n    const [subTopicId, setSubTopicId] = useState('');\r\n\r\n    const fileInput = useRef(null);\r\n    const [question, setQuestion] = useState(initQuestion);\r\n    const [answers, setAnswers] = useState([]);\r\n\r\n    const [assetToChange, setAssetToChange] = useState(null);\r\n    const [tableMatrix, setTableMatrix] = useState({ rows: 0, columns: 0 });\r\n    \r\n    // New Table Popover\r\n    const [newTableTarget, setNewTableTarget] = useState(null);\r\n    const [visibleNewTablePopover, setVisibleNewTablePopover] = useState(false);\r\n\r\n    // Confirm Popover\r\n    const [visibleUpdateConfirmPopover, setVisibleUpdateConfirmPopover] = useState(false);\r\n    const [updateConfirmTarget, setUpdateConfirmTarget] = useState(null);\r\n    const [visibleClearEntryConfirmPopover, setVisibleClearEntryConfirmPopover] = useState(false);\r\n    const [clearEntryConfirmTarget, setClearEntryConfirmTarget] = useState(null);\r\n    useEffect(() => {\r\n        const { questionId } = match.params;\r\n        QuestionsAPI.initEditQuestionsPage(questionId).then(result => {\r\n            setExam({\r\n                examBodyName: result.question.examBodyName,\r\n                subjectName: result.question.subjectName,\r\n                year: result.question.year,\r\n                examBodyId: result.question.examBodyId,\r\n                subjectId: result.question.subjectId\r\n            });\r\n            setTopics(result.topics);\r\n            if (result.topics.length > 0) {\r\n                setTopicId(result.question.topicId);\r\n            }\r\n            setSubTopicId(result.question.subTopicId);\r\n            setQuestion({\r\n                id: result.question.id,\r\n                question: result.question.question,\r\n                questionNumber: result.question.questionNumber,\r\n                image: result.question.image,\r\n                tableHeaders: [].concat(result.question.tableHeaders),\r\n                tableData: [].concat(result.question.tableData)\r\n            });\r\n            setAnswers([].concat(result.question.answers));\r\n            console.log(result.question.answers);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (topicId) {\r\n            SubTopicsAPI.getSubTopics(topicId).then(arrSubTopics => {\r\n                setSubTopics(arrSubTopics);\r\n                setSubTopicId(arrSubTopics[0].id);\r\n            }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n        }\r\n    }, [topicId]);\r\n\r\n    const onChangeQuestion = (value, key) => { setQuestion({ ...question, [key]: value }); };\r\n    const onUploadImage = index => {\r\n        if (index < 0) {\r\n            setAssetToChange('QUESTION');\r\n        } else { setAssetToChange(`ANSWER-${index}`); }\r\n        fileInput.current.click();\r\n    };\r\n    const onFileChanged = async e => {\r\n        const { files } = e.target;\r\n        if (files.length > 0) {\r\n            const file = e.target.files[0];\r\n            const fileName = await UploadAPI.uploadFile(file);\r\n            if (!assetToChange) {\r\n                return;\r\n            }\r\n            if (assetToChange.includes('ANSWER')) {\r\n                const index = parseInt(assetToChange.split('-')[1]);\r\n                const arrAnswers = JSON.parse(JSON.stringify(answers));\r\n                arrAnswers[index].image = fileName\r\n                setAnswers(arrAnswers);\r\n            } else {\r\n                onChangeQuestion(fileName, 'image');\r\n            }\r\n            e.target.value = '';\r\n        }\r\n    }\r\n    const onChangeQuestionTableMatrix = (value, key) => { setTableMatrix({ ...tableMatrix, [key]: value }); }\r\n    const onChangeQuestionTable = ({ content, type }) => {\r\n        switch (type) {\r\n            case 'HEADER':\r\n                setQuestion({ ...question, tableHeaders: content });\r\n                break;\r\n            case 'DATA':\r\n                setQuestion({ ...question, tableData: content });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    const onCreateQuestionTable = () => {\r\n        setVisibleNewTablePopover(false)\r\n\r\n        if (tableMatrix.columns < 1 || tableMatrix.rows < 1) {\r\n            setQuestion({\r\n                ...question,\r\n                tableHeaders: [],\r\n                tableData: []\r\n            })\r\n            return;\r\n        }\r\n\r\n        const newTableHeaders = JSON.parse(JSON.stringify(question.tableHeaders || []));\r\n        const newTableData = JSON.parse(JSON.stringify(question.tableData || []));\r\n        if (newTableHeaders.length > tableMatrix.columns) {\r\n            newTableHeaders.length = tableMatrix.columns;\r\n        } else {\r\n            while (newTableHeaders.length < tableMatrix.columns) {\r\n                newTableHeaders.push('');\r\n            }\r\n        }\r\n\r\n        if (newTableData.length > tableMatrix.rows - 1) {\r\n            newTableData.length = tableMatrix.rows - 1;\r\n        } else {\r\n            while (newTableData.length < tableMatrix.rows - 1) {\r\n                newTableData.push([]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < newTableData.length; i++) {\r\n            const row = newTableData[i];\r\n            if (row.length > tableMatrix.columns - 1) {\r\n                row.length = tableMatrix.columns;\r\n                continue;\r\n            }\r\n            while (row.length < tableMatrix.columns) {\r\n                row.push('');\r\n            }\r\n        }\r\n\r\n        setQuestion({\r\n            ...question,\r\n            tableHeaders: newTableHeaders,\r\n            tableData: newTableData\r\n        })\r\n    };\r\n    const onClickClearEntryButton = (event) => {\r\n        setClearEntryConfirmTarget(event.target);\r\n        setVisibleClearEntryConfirmPopover(true);\r\n    };\r\n    const clearQuestionEntry = () => { setAnswers([]); setQuestion(initQuestion); setVisibleClearEntryConfirmPopover(false); };\r\n    const onClickUpdateButton = (event) => {\r\n        setUpdateConfirmTarget(event.target);\r\n        setVisibleUpdateConfirmPopover(true);\r\n    };\r\n    const updateQuestion = () => {\r\n        setVisibleUpdateConfirmPopover(false);\r\n        if (!question.question) {\r\n            addToastAction('Warning', 'Need to set question.', ToastStatus.Warning)\r\n            return;\r\n        } else if (answers.length < 1) {\r\n            addToastAction('Warning', 'Need to set answers for the question.', ToastStatus.Warning)\r\n            return;\r\n        }\r\n\r\n        QuestionsAPI.updateQuestion({\r\n            ...question, examBodyId: exam.examBodyId, subjectId: exam.subjectId, topicId, subTopicId, year: exam.year\r\n        }, answers).then(response => {\r\n            addToastAction('Success', 'The question is updated successfully.', ToastStatus.Success);\r\n            // clearQuestionEntry();\r\n        }, e => {\r\n            addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger);\r\n        });\r\n    };\r\n    const onShowNewTablePopover = (event) => {\r\n        const preColumns = question.tableHeaders.length;\r\n        const preRows = question.tableData.length + 1;\r\n        setTableMatrix({ columns: preColumns, rows: preRows > 1 ? preRows : 0 })\r\n        setNewTableTarget(event.target);\r\n        setVisibleNewTablePopover(true);\r\n    };\r\n\r\n    // Answers\r\n    const addAnswer = () => {\r\n        setAnswers(answers.concat([{\r\n            correct: false,\r\n            answer: '',\r\n            image: '',\r\n            tableHeaders: [],\r\n            tableData: []\r\n        }]));\r\n    };\r\n    const onChangeAnswerTable = (value, index, type) => {\r\n        const arrAnswers = JSON.parse(JSON.stringify(answers));\r\n        switch (type) {\r\n            case 'CORRECT':\r\n                arrAnswers[index].correct = value;\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'ANSWER':\r\n                arrAnswers[index].answer = value;\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'IMAGE-REMOVE':\r\n                arrAnswers[index].image = '';\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'IMAGE-UPLOAD':\r\n                onUploadImage(index);\r\n                break;\r\n            case 'TABLE':\r\n                for (const key of Object.keys(value)) {\r\n                    const innerValue = value[key];\r\n                    arrAnswers[index][key] = innerValue;\r\n                }\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'REMOVE':\r\n                arrAnswers.splice(index, 1);\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (<Container className='pt-4'>\r\n        <Row>\r\n            <Col>\r\n                <Button variant='link' onClick={() => history.goBack()}>\r\n                    <span className='h6'>Back</span>\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n        <Row className='mb-5'>\r\n            <Col>\r\n                <h1 className='text-primary text-center'>Edit a Question</h1>\r\n            </Col>\r\n        </Row>\r\n        <Form>\r\n            <Row>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Exam Body</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Exam Body\" value={exam.examBodyName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Subject</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Subject\" value={exam.subjectName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Year</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Year\" value={exam.year} />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}><CustomSelect label='Topic' values={topics} value={topicId} onChange={e => setTopicId(e.target.value)} /></Col>\r\n                <Col md={7}><CustomSelect label='Sub Topic' values={subTopics} value={subTopicId} onChange={e => setSubTopicId(e.target.value)} /></Col>\r\n            </Row>\r\n        </Form>\r\n        <Row>\r\n            <Col md={6} lg={4} className='ml-auto'>\r\n                <Form.Group>\r\n                    <Form.Label><strong>Question Number</strong></Form.Label>\r\n                    <Form.Control type='text' placeholder='Enter Question Number' value={question.questionNumber}\r\n                        onChange={e => onChangeQuestion(parseInt(e.target.value), 'questionNumber')} />\r\n                </Form.Group>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12} className='d-flex'>\r\n                <Form.Group className='flex-fill'>\r\n                    <Form.Label><strong>Question</strong></Form.Label>\r\n                    <Form.Control type='text' as='textarea' rows={3} placeholder='Enter Question' value={question.question}\r\n                        onChange={e => onChangeQuestion(e.target.value, 'question')} />\r\n                </Form.Group>\r\n                <div className='ml-3 d-flex flex-column justify-content-end'>\r\n                    <Form.Group className='mb-2'>\r\n                        <FontAwesomeIcon className='cursor-pointer text-warning' size='lg' icon={faImage} onClick={() => onUploadImage(-1)} />\r\n                    </Form.Group>\r\n                    <Form.Group className='pb-3'>\r\n                        <FontAwesomeIcon className='cursor-pointer text-info' size='lg' icon={faTable} onClick={(e) => onShowNewTablePopover(e)} />\r\n                    </Form.Group>\r\n                </div>\r\n            </Col>\r\n\r\n            {!question.image ? null : <Col sm={12}>\r\n                <Image src={question.image} rounded style={{ height: 200, maxWidth: '100%' }} className='mb-3 rounded border border-gray p-1' />\r\n                <FontAwesomeIcon className='cursor-pointer text-danger' size='lg' icon={faTimes}\r\n                    style={{ marginLeft: -25, marginBottom: 87 }} onClick={() => setQuestion({ ...question, image: '' })} />\r\n            </Col>}\r\n            <Col sm={12}>\r\n                <EditableTable headers={question.tableHeaders} data={question.tableData} onChange={onChangeQuestionTable} />\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12} className='px-0'>\r\n                <Form.Group>\r\n                    <Form.Label><strong>Answers</strong></Form.Label>\r\n                    <FontAwesomeIcon className='ml-3 cursor-pointer text-success' icon={faPlus} onClick={addAnswer} />\r\n                </Form.Group>\r\n            </Col>\r\n\r\n            <AnswerTable headers={answerTableHeaders} data={answers} onChange={onChangeAnswerTable} />\r\n        </Row>\r\n        <Row className='justify-content-between'>\r\n            <Button variant='warning' onClick={onClickClearEntryButton}>Clear Entry</Button>\r\n            <Button disabled={question.status === QuestionStatus.Published} onClick={onClickUpdateButton}>Update this Question</Button>\r\n        </Row>\r\n        <Form.File ref={fileInput} label='' className='d-none' onChange={onFileChanged} />\r\n\r\n        <Overlay show={visibleNewTablePopover} target={newTableTarget} placement='left' onHide={() => setVisibleNewTablePopover(false)} containerPadding={20} rootClose>\r\n            <Popover style={{ maxWidth: 200 }}>\r\n                <Popover.Title as='h3' className='p-3'>Create a Table</Popover.Title>\r\n                <Popover.Content>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"question-table-columns\">Columns</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"question-table-columns\" value={tableMatrix.columns}\r\n                            onChange={e => onChangeQuestionTableMatrix(e.target.value, 'columns')} />\r\n                    </InputGroup>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"question-table-rows\">Rows</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"question-table-rows\" value={tableMatrix.rows}\r\n                            onChange={e => onChangeQuestionTableMatrix(e.target.value, 'rows')} />\r\n                    </InputGroup>\r\n                    <div className='d-flex justify-content-end'>\r\n                        <Button size='sm' onClick={onCreateQuestionTable}>Create & Close</Button>\r\n                    </div>\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n\r\n        <ConfirmPopover visible={visibleUpdateConfirmPopover} target={updateConfirmTarget} placement='left' setVisibility={setVisibleUpdateConfirmPopover}\r\n            label='Are you sure to update this question?' onConfirm={updateQuestion}/>\r\n\r\n        <ConfirmPopover visible={visibleClearEntryConfirmPopover} target={clearEntryConfirmTarget} placement='right' setVisibility={setVisibleClearEntryConfirmPopover}\r\n            label='Are you sure to clear entry?' onConfirm={clearQuestionEntry}/>\r\n    </Container>\r\n    );\r\n};\r\n\r\nAdminQuestionsEdit.propTypes = {};\r\nAdminQuestionsEdit.defaultProps = {};\r\n\r\nexport default withRouter(connectToasts(AdminQuestionsEdit));\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Image } from 'react-bootstrap';\r\n\r\nimport { CustomTable } from '../common/table';\r\nimport { AnyTextInput } from '../common/text-input';\r\n\r\nfunction AnswerInRow({ correct, answer, image, tableHeaders, tableData }) {\r\n    return (<Form className='pb-3'>\r\n        <Form.Check className='d-flex align-items-center' type=\"checkbox\" checked={correct} onChange={() => {}} label={<AnyTextInput value={answer} equation/>} />\r\n\r\n        {!!image ? <Form.Row className='ml-3'><Image src={image} rounded style={{ height: 100, maxWidth: '100%' }} /></Form.Row> : null}\r\n\r\n        {(!!tableHeaders && !!tableHeaders.length) ? <CustomTable headers={tableHeaders} data={tableData}/> : null}\r\n    </Form>);\r\n};\r\n\r\nAnswerInRow.propTypes = {\r\n    correct: PropTypes.bool,\r\n    answer: PropTypes.string,\r\n    image: PropTypes.string,\r\n    tableHeaders: PropTypes.arrayOf(PropTypes.string),\r\n    tableData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))\r\n};\r\nAnswerInRow.defaultProps = {\r\n    correct: false,\r\n    answer: '',\r\n    image: '',\r\n    tableHeaders: [],\r\n    tableData: []\r\n};\r\n\r\nexport default AnswerInRow;\r\n","import React, { useState } from 'react';\r\nimport { Accordion, Button, Card, Dropdown, DropdownButton, Form, Image, Overlay, Popover } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\nimport { withRouter } from 'react-router';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport AnswerInRow from './answer-in-row';\r\nimport { CustomTable } from '../common/table';\r\nimport { AnyTextInput } from '../common/text-input';\r\nimport { QuestionStatus } from '../../common/enums/questions';\r\nimport { connectAuth } from '../../common/redux/connects';\r\nimport { UserRole } from '../../common/enums/auth';\r\nimport { ConfirmPopover } from '../common/popover';\r\n\r\nfunction QuestionInRow({\r\n    history, onDelete, topicName, subTopicName,\r\n    id, question, questionNumber, status,\r\n    image, tableHeaders, tableData, answers, user\r\n}) {\r\n    const [isDetailOpened, setIsDetailOpened] = useState(false);\r\n\r\n    const [removingQuestionId, setRemovingQuestionId] = useState(null);\r\n    const [visibleConfirmPopover, setVisibleConfirmPopover] = useState(false);\r\n    const [target, setTarget] = useState(null);\r\n\r\n    const showDeleteQuestionConfirmPopover = (event, questionId) => {\r\n        const dropDownTarget = event.target.parentNode.parentNode.firstChild;\r\n        setTarget(dropDownTarget);\r\n        setVisibleConfirmPopover(!visibleConfirmPopover);\r\n        setRemovingQuestionId(questionId);\r\n    };\r\n\r\n    return (\r\n        <div className='border-bottom border-gray lh-125 mb-0 pt-1'>\r\n            <Accordion>\r\n                <Card>\r\n                    <Card.Header className='d-flex align-items-center'>\r\n                        <div className='m-0 d-flex align-items-center'><strong className='mr-1'>[{questionNumber}]</strong> <AnyTextInput value={question} equation/></div>\r\n\r\n                        <Accordion.Toggle as={FontAwesomeIcon} icon={faAngleDown} size='lg' eventKey='0'\r\n                            className={classNames(['cursor-pointer', 'toggle-arrow', 'ml-auto'], {\r\n                                'toggle-arrow-open': isDetailOpened\r\n                            })} onClick={() => setIsDetailOpened(!isDetailOpened)}>\r\n                            Click me!\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey='0'>\r\n                        <Card.Body>\r\n                            <DropdownButton variant='secondary' size='sm' title='Actions' className='text-right d-block'>\r\n                                <Dropdown.Item disabled={user.role === UserRole.Admin && status === QuestionStatus.Published}\r\n                                    onClick={() => history.push(`/admin/questions/edit/${id}`)}>Edit Entry</Dropdown.Item>\r\n                                <Dropdown.Item disabled={user.role === UserRole.Admin && status === QuestionStatus.Published}\r\n                                    onClick={(e) => showDeleteQuestionConfirmPopover(e, id)}>Delete Question</Dropdown.Item>\r\n                            </DropdownButton>\r\n                            <p><strong>Topic:</strong> {topicName}</p>\r\n                            <p><strong>Sub Topic:</strong> {subTopicName}</p>\r\n                            <div className='m-0 d-flex align-items-center'><AnyTextInput value={question} equation/></div>\r\n                            {/* <p><strong>{question}</strong></p> */}\r\n\r\n                            {!!image ? <Form.Row className='ml-3'><Image src={image} rounded style={{ height: 100, maxWidth: '100%' }} /></Form.Row> : null}\r\n\r\n                            <CustomTable headers={tableHeaders} data={tableData} />\r\n\r\n                            {answers.map((answer, ai) => <AnswerInRow key={ai} {...answer} />)}\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n\r\n            <ConfirmPopover visible={visibleConfirmPopover} target={target} setVisibility={setVisibleConfirmPopover}\r\n                label='Are you sure to delete this question?' onConfirm={() => { setVisibleConfirmPopover(false); onDelete(removingQuestionId); }}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nQuestionInRow.propTypes = {\r\n    id: PropTypes.string,\r\n    examBodyId: PropTypes.string,\r\n    examBodyName: PropTypes.string,\r\n    examBodyLogoUrl: PropTypes.string,\r\n    subjectId: PropTypes.string,\r\n    subjectName: PropTypes.string,\r\n    topicId: PropTypes.string,\r\n    topicName: PropTypes.string,\r\n    subTopicId: PropTypes.string,\r\n    subTopicName: PropTypes.string,\r\n    year: PropTypes.number,\r\n    question: PropTypes.string,\r\n    questionNumber: PropTypes.number,\r\n    image: PropTypes.string,\r\n    status: PropTypes.oneOf(Object.values(QuestionStatus)),\r\n    tableHeaders: PropTypes.arrayOf(PropTypes.string),\r\n    tableData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\r\n    answers: PropTypes.arrayOf(PropTypes.shape({\r\n        correct: PropTypes.bool,\r\n        value: PropTypes.string,\r\n        image: PropTypes.string,\r\n        tableHeaders: PropTypes.arrayOf(PropTypes.string),\r\n        tableData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\r\n    })),\r\n    onDelete: PropTypes.func\r\n};\r\n\r\nQuestionInRow.defaultProps = {\r\n    id: '',\r\n    examBodyId: '',\r\n    examBodyName: '',\r\n    examBodyLogoUrl: '',\r\n    subjectId: '',\r\n    subjectName: '',\r\n    topicId: '',\r\n    topicName: '',\r\n    subTopicId: '',\r\n    subTopicName: '',\r\n    year: 1988,\r\n    question: '',\r\n    questionNumber: 1,\r\n    image: '',\r\n    status: QuestionStatus.Draft,\r\n    tableHeaders: [],\r\n    tableData: [],\r\n    answers: [],\r\n    onDelete: PropTypes.func\r\n};\r\n\r\nexport default withRouter(connectAuth(QuestionInRow));\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Alert, Button, Col, Container, Form, Row } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { CustomSelect } from '../../../components/common/select';\r\nimport { LoadingSpinner } from '../../../components/common/spinner';\r\nimport QuestionInRow from '../../../components/questions/question-in-row';\r\n\r\nimport QuestionsAPI from '../../../common/api/questions';\r\nimport SubTopicsAPI from '../../../common/api/sub-topics';\r\nimport { ToastStatus } from '../../../common/enums/toast';\r\nimport { connectAuth, connectToasts } from '../../../common/redux/connects';\r\nimport { QuestionStatus } from '../../../common/enums/questions';\r\nimport { UserRole } from '../../../common/enums/auth';\r\nimport { ConfirmPopover } from '../../../components/common/popover';\r\n\r\nfunction AdminQuestionsList({ match, history, addToastAction, user }) {\r\n    const [exam, setExam] = useState({\r\n        examBodyId: '', examBodyName: '',\r\n        subjectId: '', subjectName: '', year: 0\r\n    });\r\n    const [topics, setTopics] = useState([{ id: '', name: '- All Topics -' }]);\r\n    const [subTopics, setSubTopics] = useState([{ id: '', name: '- All Sub Topics -' }]);\r\n    const [topicId, setTopicId] = useState('');\r\n    const [subTopicId, setSubTopicId] = useState('');\r\n\r\n    const [questions, setQuestions] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    // Confirm Popover\r\n    const [visiblePublishConfirmPopover, setVisiblePublishConfirmPopover] = useState(false);\r\n    const [publishConfirmTarget, setPublishConfirmTarget] = useState(null);\r\n    const [visibleRequestToPublishConfirmPopover, setVisibleRequestToPublishConfirmPopover] = useState(false);\r\n    const [requestToPublishConfirmTarget, setRequestToPublishConfirmTarget] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const { examBodyId, subjectId, year } = match.params;\r\n        setIsLoading(true);\r\n        QuestionsAPI.initRegisterQuestionsPage(examBodyId, subjectId).then(result => {\r\n            const { examBodyName, subjectName } = result;\r\n            setExam({ examBodyName, subjectName, year: parseInt(year), examBodyId, subjectId });\r\n            setTopics([{ id: '', name: '- All Topics -' }].concat(result.topics));\r\n        }, e => {\r\n            addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger);\r\n            setIsLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        onRefreshQuestionsList();\r\n    }, [exam])\r\n\r\n    useEffect(() => {\r\n        if (topicId) {\r\n            SubTopicsAPI.getSubTopics(topicId).then(arrSubTopics => {\r\n                setSubTopics([{ id: '', name: '- All Sub Topics -' }].concat(arrSubTopics));\r\n                if (!subTopicId) {\r\n                    onRefreshQuestionsList();\r\n                } else { setSubTopicId(''); }\r\n            }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n        } else {\r\n            setSubTopics([{ id: '', name: '- All Sub Topics -' }]);\r\n            if (!subTopicId) {\r\n                onRefreshQuestionsList();\r\n            } else { setSubTopicId(''); }\r\n        }\r\n    }, [topicId]);\r\n\r\n    useEffect(() => {\r\n        onRefreshQuestionsList();\r\n    }, [subTopicId])\r\n\r\n    const onRefreshQuestionsList = () => {\r\n        if (!exam.examBodyId || !exam.subjectId || !exam.year) { return; }\r\n\r\n        setIsLoading(true);\r\n        QuestionsAPI.findQuestionsByExam(\r\n            exam.examBodyId,\r\n            exam.subjectId,\r\n            exam.year,\r\n            { topicId, subTopicId, keyword: '' }\r\n        ).then(qs => {\r\n            setQuestions(qs);\r\n            setIsLoading(false);\r\n        }, e => {\r\n            addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger);\r\n            setIsLoading(false);\r\n        });\r\n    }\r\n\r\n    const onClickRequestToPublishButton = (event) => {\r\n        setRequestToPublishConfirmTarget(event.target);\r\n        setVisibleRequestToPublishConfirmPopover(true);\r\n    };\r\n\r\n    const onRequestToPublish = () => {\r\n        setVisibleRequestToPublishConfirmPopover(false);\r\n        const { examBodyId, subjectId, year } = match.params;\r\n        QuestionsAPI.requestToPublish(examBodyId, subjectId, parseInt(year)).then(result => {\r\n            addToastAction('Success', 'Questions are requested to be published.', ToastStatus.Success);\r\n            updateQuestionsStatus(QuestionStatus.UnderReview);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    };\r\n\r\n    const onClickPublishQuestionsButton = (event) => {\r\n        setPublishConfirmTarget(event.target);\r\n        setVisiblePublishConfirmPopover(true);\r\n    };\r\n\r\n    const onPublishQuestions = () => {\r\n        setVisiblePublishConfirmPopover(false);\r\n        const { examBodyId, subjectId, year } = match.params;\r\n        QuestionsAPI.publishQuestions(examBodyId, subjectId, parseInt(year)).then(result => {\r\n            addToastAction('Success', 'Questions are requested to be published.', ToastStatus.Success);\r\n            updateQuestionsStatus(QuestionStatus.Published);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    }\r\n\r\n    const updateQuestionsStatus = (status) => {\r\n        const newQuestions = JSON.parse(JSON.stringify(questions));\r\n        for (const iterator of newQuestions) {\r\n            iterator.status = status;\r\n        }\r\n        setQuestions(newQuestions);\r\n    }\r\n\r\n    const onDeleteQuestion = (id) => {\r\n        QuestionsAPI.deleteQuestion(id).then(res => {\r\n            const newQuestions = JSON.parse(JSON.stringify(questions));\r\n            const index = newQuestions.findIndex(q => q.id === id);\r\n            newQuestions.splice(index, 1);\r\n            setQuestions(newQuestions);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    }\r\n\r\n    const renderExaminationStatus = () => {\r\n        if (questions.length < 1) {\r\n            return null;\r\n        }\r\n        if (questions[0].status === QuestionStatus.Draft) {\r\n            return <Alert variant='info'> Questions are in draft.</Alert>\r\n        } else if (questions[0].status === QuestionStatus.UnderReview) {\r\n            return <Alert variant='info'> Questions are under review.</Alert>\r\n        } else {\r\n            return <Alert variant='success'> Questions are already published.</Alert>\r\n        }\r\n    };\r\n\r\n    const renderActionButtons = () => {\r\n        if (questions.length < 1) {\r\n            return null;\r\n        }\r\n        if (questions[0].status === QuestionStatus.Draft) {\r\n            return <Button variant='info' disabled={isLoading} className='float-right' onClick={onClickRequestToPublishButton}>Request to Publish</Button>\r\n        } else if (questions[0].status === QuestionStatus.UnderReview && user.role === UserRole.SuperAdmin) {\r\n            return <Button variant='success' disabled={isLoading} className='float-right' onClick={onClickPublishQuestionsButton}>Publish Now</Button>\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    return (<Container className='pt-4'>\r\n        <Row>\r\n            <Col>\r\n                <Button variant='link' onClick={() => history.goBack()}>\r\n                    <span className='h6'>Back</span>\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n        <Row className='mb-5'>\r\n            <Col>\r\n                <h1 className='text-center text-primary'>Questions List</h1>\r\n            </Col>\r\n        </Row>\r\n        <Form>\r\n            <Row>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Exam Body</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Exam Body\" value={exam.examBodyName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Subject</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Subject\" value={exam.subjectName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Year</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Year\" value={exam.year} />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}><CustomSelect label='Topic' values={topics} value={topicId} onChange={e => setTopicId(e.target.value)} /></Col>\r\n                <Col md={7}><CustomSelect label='Sub Topic' values={subTopics} value={subTopicId} onChange={e => setSubTopicId(e.target.value)} /></Col>\r\n            </Row>\r\n        </Form>\r\n        <Row className='mt-5 mb-3'>\r\n            <Col>\r\n                {renderExaminationStatus()}\r\n                {renderActionButtons()}\r\n            </Col>\r\n        </Row>\r\n        <Row className='justify-content-center'>\r\n            {isLoading ?\r\n                <LoadingSpinner /> :\r\n                questions.map((question, qi) => <Col sm={12} key={qi}><QuestionInRow {...question} onDelete={onDeleteQuestion} /></Col>)\r\n            }\r\n        </Row>\r\n\r\n        <ConfirmPopover visible={visiblePublishConfirmPopover} target={publishConfirmTarget} setVisibility={setVisiblePublishConfirmPopover}\r\n            label='Are you sure to publish questions?' onConfirm={onPublishQuestions}/>\r\n\r\n        <ConfirmPopover visible={visibleRequestToPublishConfirmPopover} target={requestToPublishConfirmTarget}\r\n            setVisibility={setVisibleRequestToPublishConfirmPopover} label='Are you sure to request these questions to publish?' onConfirm={onRequestToPublish}/>\r\n    </Container >);\r\n};\r\n\r\nAdminQuestionsList.propTypes = {};\r\nAdminQuestionsList.defaultProps = {};\r\n\r\nexport default withRouter(connectToasts(connectAuth(AdminQuestionsList)));\r\n","import React, { useEffect, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const CustomSwitch = ({ size, label, color, value, onChange, className }) => {\r\n    const [id, setId] = useState('');\r\n    useEffect(() => {\r\n        setId(String(Date.now()).toLowerCase());\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classNames('custom-control custom-switch', className, {\r\n            'custom-switch-sm': size === 'sm',\r\n            'custom-switch-md': size === 'md',\r\n            'custom-switch-lg': size === 'lg',\r\n            'custom-switch-xl': size === 'xl'\r\n        })}>\r\n            <input type='checkbox' className='custom-control-input' id={`switch-${id}`} checked={value} onChange={onChange}/>\r\n            <label className={classNames('custom-control-label', `custom-control-label-${color}`)} htmlFor={`switch-${id}`}>{}</label>\r\n            <label>{label}</label>\r\n        </div>\r\n    );\r\n};\r\n\r\nCustomSwitch.propTypes = {\r\n    size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),\r\n    color: PropTypes.oneOf(['primary', 'success', 'info', 'warning', 'danger']),\r\n    label: PropTypes.string,\r\n    value: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    className: PropTypes.string\r\n};\r\nCustomSwitch.defaultProps = {\r\n    size: 'md',\r\n    color: 'primary',\r\n    label: '',\r\n    value: false,\r\n    onChange: () => {},\r\n    className: ''\r\n};\r\n","import { ConstantNames } from '../constants/default-values';\r\nimport { UITheme } from '../enums/theme';\r\n\r\nexport const toggleDarkTheme = (isDarkTheme = false, forceRedirect = true) => {\r\n    if (isDarkTheme) {\r\n        localStorage.setItem(ConstantNames.UITheme, UITheme.Dark);\r\n    } else if (!isDarkTheme) {\r\n        localStorage.setItem(ConstantNames.UITheme, UITheme.Light);\r\n    }\r\n    if (forceRedirect) {\r\n        window.location.reload();\r\n    }\r\n};\r\n\r\nexport const isDarkTheme = () => {\r\n    return localStorage.getItem(ConstantNames.UITheme) === UITheme.Dark;\r\n};\r\n","import React, { useState, lazy } from 'react';\r\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap';\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    withRouter\r\n} from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// Pages\r\nimport AdminDashboard from '../pages/admin/dashboard';\r\nimport AdminSelectExamBody from '../pages/admin/questions/select-exam-body';\r\nimport AdminQuestionGroups from '../pages/admin/questions/question-groups';\r\nimport AdminQuestionsAdd from '../pages/admin/questions/question-add';\r\nimport AdminQuestionsEdit from '../pages/admin/questions/question-edit';\r\nimport AdminQuestionsList from '../pages/admin/questions/question-list';\r\n\r\n// Components\r\nimport { CustomSwitch } from '../components/common/switch';\r\n\r\n// Utils\r\nimport { connectAuth } from '../common/redux/connects';\r\nimport { isDarkTheme, toggleDarkTheme } from '../common/utils/theme';\r\nimport { UserRole } from '../common/enums/auth';\r\n\r\nconst VideoList = lazy(() => import('../pages/admin/videos/video-list'));\r\nconst VideoView = lazy(() => import('../pages/admin/videos/video-view'));\r\nconst VideoForm = lazy(() => import('../pages/admin/videos/video-form'));\r\n\r\nconst UserList = lazy(() => import('../pages/admin/users/users-list'));\r\nconst UserForm = lazy(() => import('../pages/admin/users/user-form'));\r\nconst UserView = lazy(() => import('../pages/admin/users/user-view'));\r\n\r\nconst ReportList = lazy(() => import('../pages/admin/reports/reports-list'));\r\nconst ReportView = lazy(() => import('../pages/admin/reports/reports-view'));\r\n\r\n\r\n\r\nfunction AdminLayout({ match, history, user, logoutUserAction }) {\r\n    const [darkTheme] = useState(isDarkTheme());\r\n\r\n    return (<div className='vh-100 vw-100'>\r\n        <Navbar className='shadow-sm bg-white' expand='sm'>\r\n            <Navbar.Brand>\r\n                <span className='cursor-pointer' onClick={() => history.push('/')}>Video Watching</span>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className='justify-content-end'>\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"/admin/users\">Users</Nav.Link>\r\n                    <Nav.Link href=\"/admin/videos\">Videos</Nav.Link>\r\n                    <Nav.Link href=\"/admin/reports\">Reports</Nav.Link>\r\n                    {/* <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                    <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                    <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                    <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                    </NavDropdown> */}\r\n                </Nav>\r\n                <Nav className='ml-auto mr-3'>\r\n                    <div className='d-flex'>\r\n                        <CustomSwitch className='my-auto mr-1' value={darkTheme} onChange={e => toggleDarkTheme(e.target.checked)} />\r\n                        <Nav.Link disabled className='px-0'>Dark Theme</Nav.Link>\r\n                    </div>\r\n                    <NavDropdown alignRight title={<FontAwesomeIcon className='mx-1 my-auto' icon={faUser} size='lg' />}>\r\n                        {/* <NavDropdown.Item disabled={user.role !== UserRole.SuperAdmin}>Exam Bodies</NavDropdown.Item>\r\n                        <NavDropdown.Item disabled={user.role !== UserRole.SuperAdmin}>Subjects</NavDropdown.Item>\r\n                        <NavDropdown.Item disabled={user.role !== UserRole.SuperAdmin}>Topics & Sub Topics</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item disabled>Profile</NavDropdown.Item>\r\n                        <NavDropdown.Item disabled>Notifications</NavDropdown.Item> */}\r\n                        <NavDropdown.Item onClick={logoutUserAction}>Logout</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        <div className='mx-2'>\r\n            <main className='container mt-3 shadow-sm rounded bg-white p-3 mt-2'>\r\n                <Switch>\r\n                    <Route exact path={`${match.url}/dashboard`} component={AdminDashboard} />\r\n                    <Route exact path={`${match.url}/questions/select-exam-body`} component={AdminSelectExamBody} />\r\n                    <Route exact path={`${match.url}/questions/by-exam-body/:examBodyId`} component={AdminQuestionGroups} />\r\n                    <Route exact path={`${match.url}/questions/add/:examBodyId/:subjectId/:year`} component={AdminQuestionsAdd} />\r\n                    <Route exact path={`${match.url}/questions/view/:examBodyId/:subjectId/:year`} component={AdminQuestionsList} />\r\n                    <Route exact path={`${match.url}/questions/edit/:questionId`} component={AdminQuestionsEdit} />\r\n\r\n                    <Route exact path={`${match.url}/videos`} component={VideoList} />\r\n                    <Route exact path={`${match.url}/videos/view/:id`} component={VideoView} />\r\n                    <Route exact path={`${match.url}/videos/add`} component={VideoForm} />\r\n                    <Route exact path={`${match.url}/videos/:id/update`} component={VideoForm} />\r\n\r\n                    <Route exact path={`${match.url}/users`} component={UserList} />\r\n                    <Route exact path={`${match.url}/users/add`} component={UserForm} />\r\n                    <Route exact path={`${match.url}/users/:id/update`} component={UserForm} />\r\n                    <Route exact path={`${match.url}/users/view/:id`} component={UserView} />\r\n\r\n                    <Route exact path={`${match.url}/reports`} component={ReportList} />\r\n                    <Route exact path={`${match.url}/reports/view/:reportId`} component={ReportView} />\r\n\r\n                    <Route path='/' >\r\n                        <Redirect to={`${match.url}/dashboard`} />\r\n                    </Route>\r\n\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    </div>);\r\n};\r\n\r\nexport default withRouter(connectAuth(AdminLayout));","import React from 'react';\r\nimport { withRouter } from 'react-router';\r\n\r\nfunction CustomerDashboard({  }) {\r\n\r\n    return (\r\n        <div className='bg-primary py-100 text-center'>\r\n            <span className='display-4'>Customer Dashboard</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nCustomerDashboard.propTypes = {};\r\nCustomerDashboard.defaultProps = {};\r\n\r\nexport default withRouter(CustomerDashboard);\r\n","import React, { useState, lazy } from 'react';\r\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap';\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    withRouter\r\n} from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\n//  pages\r\nimport CustomerDashboard from '../pages/customer/dashboard';\r\n//  pages\r\nimport { CustomSwitch } from '../components/common/switch';\r\nimport { connectAuth } from '../common/redux/connects';\r\nimport { isDarkTheme, toggleDarkTheme } from '../common/utils/theme';\r\n\r\nconst VideoList = lazy(() => import('../pages/customer/videos/video-list'));\r\nconst VideoView = lazy(() => import('../pages/customer/videos/video-view'));\r\n\r\nconst UserView = lazy(() => import('../pages/admin/users/user-view'));\r\nconst ReportView = lazy(() => import('../pages/admin/reports/reports-view'));\r\n\r\n\r\nfunction CustomerLayout({ match, history, logoutUserAction, user }) {\r\n    const [darkTheme] = useState(isDarkTheme());\r\n\r\n    return (<div className='vh-100 vw-100'>\r\n        <Navbar bg='dark' variant='dark' expand='md'>\r\n            <Navbar.Brand>\r\n                <span className='cursor-pointer' onClick={() => history.push('/')}>Video Watching</span>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className='justify-content-end'>\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href={`${match.url}/videos`}>Videos</Nav.Link>\r\n                    <Nav.Link href={`${match.url}/users/${user.id}/reports`}>Report</Nav.Link>\r\n                </Nav>\r\n\r\n                <Nav className='ml-auto mr-3'>\r\n                    <div className='d-flex'>\r\n                        <CustomSwitch className='my-auto mr-1' value={darkTheme} onChange={e => toggleDarkTheme(e.target.checked)} />\r\n                        <Nav.Link disabled className='px-0'>Dark Theme</Nav.Link>\r\n                    </div>\r\n                    <NavDropdown alignRight title={<FontAwesomeIcon className='mx-1 my-auto' icon={faUser} size='lg' />}>\r\n                        {/* <NavDropdown.Item disabled>Profile</NavDropdown.Item>\r\n                        <NavDropdown.Item disabled>Magazines</NavDropdown.Item>\r\n                        <NavDropdown.Item disabled>Notifications</NavDropdown.Item> */}\r\n                        {/* <NavDropdown.Divider /> */}\r\n                        <NavDropdown.Item onClick={logoutUserAction}>Logout</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <main className='container shadow-sm rounded bg-white p-3 mt-2'>\r\n            <Switch>\r\n                <Route exact path={`${match.url}/dashboard`} component={CustomerDashboard} />\r\n                <Route exact path={`${match.url}/users`}>\r\n                    <div>User Management</div>\r\n                </Route>\r\n                <Route exact path={`${match.url}/users/:id/reports`} component={UserView} />\r\n                <Route exact path={`${match.url}/users/:id/reports/:reportId`} component={ReportView} />\r\n\r\n                <Route exact path={`${match.url}/videos`} component={VideoList} />\r\n                <Route exact path={`${match.url}/videos/view/:id`} component={VideoView} />\r\n\r\n                <Route path='/' >\r\n                    <Redirect to={`${match.url}/videos`} />\r\n                </Route>\r\n            </Switch>\r\n        </main>\r\n    </div>);\r\n};\r\n\r\nexport default withRouter(connectAuth(CustomerLayout));\r\n","import React from 'react';\r\n\r\nfunction LandingPage() {\r\n    return (\r\n        <div className='bg-primary py-100 text-center'>\r\n            <span className='display-1'>Welcome</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nLandingPage.propTypes = {};\r\nLandingPage.defaultProps = {};\r\n\r\nexport default LandingPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form\r\n} from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { getDefaultRedirectPath } from '../../common/utils/auth';\r\nimport { connectAuth } from '../../common/redux/connects';\r\n\r\nfunction LoginPage({ user, loginUserAction, history, authError }) {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isSubmit, setIsSubmit] = useState(false);\r\n\r\n    useEffect(() => {\r\n        user && history.replace(getDefaultRedirectPath());\r\n    }, [user])\r\n\r\n    return (\r\n        <div className='py-100'>\r\n            <Card className='mx-auto shadow-sm' style={{ width: 'fit-content' }}>\r\n                <Card.Header as='h5'>Login</Card.Header>\r\n                <Card.Body>\r\n                    <Form>\r\n                        <Form.Group controlId='loginFormEmail'>\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control type='email' placeholder='Enter email' value={email} onChange={e => setEmail(e.target.value)} />\r\n                            <Form.Text className='text-muted'>  \r\n                                We'll never share your email with anyone else.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId='loginFormPassword'>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type='password' placeholder='Password' value={password} onChange={e => setPassword(e.target.value)}\r\n                                onKeyPress={event => (event.key === 'Enter') && loginUserAction({ email, password }, history)} />\r\n                            {/*\r\n                                <Form.Text className='text-muted'>\r\n                                    <span className='cursor-pointer hover-underline' onClick={() => history.push('/auth/forgot-password')}>Fotgot password?</span>\r\n                                </Form.Text>\r\n                            */}\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Text className='text-center text-danger'>\r\n                                {isSubmit && String(authError)}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Row className='justify-content-end'>\r\n                            <Button className='float-right' variant='primary' onClick={() => {\r\n                                setIsSubmit(true)\r\n                                loginUserAction({ email, password }, history)\r\n                            }}>\r\n                                Login\r\n                            </Button>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row className='flex-direction-column'>\r\n                            <hr className='w-100'></hr>\r\n                            <Form.Text className='text-muted mx-auto'>\r\n                                <span className='cursor-pointer hover-underline' onClick={() => history.push('/auth/register')}>Register now</span>\r\n                            </Form.Text>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(connectAuth(LoginPage));\r\n\r\n","import React from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form\r\n} from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nfunction ForgotPasswordPage({ history }) {\r\n    return (\r\n        <div className='py-100'>\r\n            <Card className='mx-auto shadow-sm' style={{ width: 'fit-content' }}>\r\n                <Card.Header as='h5'>Forgot Password?</Card.Header>\r\n                <Card.Body>\r\n                    <Form>\r\n                        <Form.Group controlId='formBasicEmail'>\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control type='email' placeholder='Enter email' />\r\n                            <Form.Text className='text-muted'>\r\n                                We'll send link to your email.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        \r\n                        <Form.Row className='justify-content-between'>\r\n                            <Button variant='secondary' onClick={() => history.goBack()}>\r\n                                Go back to Login\r\n                            </Button>\r\n\r\n                            <Button className='ml-3' variant='primary'>\r\n                                Submit\r\n                            </Button>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(ForgotPasswordPage);\r\n","import React from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form\r\n} from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nfunction ResetPasswordPage({ history }) {\r\n    return (\r\n        <div className='py-100'>\r\n            <Card className='mx-auto shadow-sm' style={{ width: 'fit-content' }}>\r\n                <Card.Header as='h5'>Reset Password</Card.Header>\r\n                <Card.Body>\r\n                    <Form>\r\n                        <Form.Group controlId='resetPasswordFormPassword'>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type='password' placeholder='Password' />\r\n                            <Form.Text className='text-muted'>\r\n                                Type your password. Preferable a secure combination.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId='resetPasswordFormConfirmPassword'>\r\n                            <Form.Label>Confirm Password</Form.Label>\r\n                            <Form.Control type='password' placeholder='Confirm Password' />\r\n                            <Form.Text className='text-muted'>\r\n                                Confirm your password.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Row className='justify-content-end'>\r\n                            <Button variant='primary' onClick={() => history.push('/auth/login')}>\r\n                                Reset Password\r\n                            </Button>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(ResetPasswordPage);\r\n","import React, { forwardRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form } from 'react-bootstrap';\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport const BootstrapDatePicker = ({ date, onChange, showMonthDropdown, showYearDropdown }) => {\r\n    const BootstrapTextInput = forwardRef(\r\n        ({ value, onClick }, ref) => (\r\n            <Form.Control value={value} type='text' ref={ref} onFocus={onClick} onChange={() => {}} placeholder='Choose date' />\r\n        ),\r\n    );\r\n\r\n    return <DatePicker wrapperClassName='d-block' selected={date} showMonthDropdown={showMonthDropdown} showYearDropdown={showYearDropdown}\r\n        onChange={d => onChange(d)} customInput={<BootstrapTextInput />}/>;\r\n};\r\nBootstrapDatePicker.propTypes = {\r\n    value: PropTypes.object,\r\n    onChange: PropTypes.func,\r\n    showMonthDropdown: PropTypes.bool,\r\n    showYearDropdown: PropTypes.bool\r\n};\r\nBootstrapDatePicker.defaultProps = {\r\n    value: new Date(),\r\n    onChange: () => {},\r\n    showMonthDropdown: false,\r\n    showYearDropdown: false\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    Col,\r\n    Form\r\n} from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { UserGender } from '../../common/enums/auth';\r\nimport { capitalizeWord, validateEmail } from '../../common/utils/common';\r\nimport { BootstrapDatePicker } from '../../components/common/datepicker';\r\n\r\nimport AuthAPI from '../../common/api/auth';\r\nimport { connectToasts } from '../../common/redux/connects';\r\nimport { ToastStatus } from '../../common/enums/toast';\r\n\r\nfunction RegisterPage({ history, addToastAction }) {\r\n    const [person, setPerson] = useState({\r\n        gender: '', fullName: '',\r\n        password: '', confirmPassword: '', email: ''\r\n    });\r\n    const [validationErrors, setValidationErrors] = useState({\r\n        gender: '', fullName: '',\r\n        password: '', confirmPassword: '', email: '', validated: false\r\n    });\r\n    const [genders, setGenders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const arrGenders = [];\r\n        for (const key in UserGender) {\r\n            if (Object.hasOwnProperty.call(UserGender, key)) {\r\n                const value = UserGender[key];\r\n                arrGenders.push({\r\n                    id: value,\r\n                    name: capitalizeWord(value)\r\n                });\r\n            }\r\n        }\r\n        setGenders(arrGenders);\r\n        setPerson({ ...person, gender: arrGenders[0].id })\r\n    }, []);\r\n\r\n    const onUpdatePerson = (value, key) => {\r\n        setPerson({ ...person, [key]: value });\r\n    }\r\n\r\n    const onRegister = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        \r\n        const { newValidationErrors, invalid } = validateRegisterForm();\r\n        setValidationErrors({\r\n            ...newValidationErrors, validated: true\r\n        });\r\n        if (!invalid) {\r\n            AuthAPI.registerAdminUser({\r\n                email: person.email,\r\n                fullName: person.fullName,\r\n                gender: person.gender,\r\n                password: person.password\r\n            }).then(result => {\r\n                addToastAction(`Congrationations`, 'You have successfully registered a new account.', ToastStatus.Success);\r\n                history.push('/auth/login');\r\n            }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n        }\r\n    };\r\n    \r\n    const validateRegisterForm = () => {\r\n        // Validate Registration Form\r\n        const newValidationErrors = {\r\n            email: '', fullName: '', gender: '',\r\n            password: '', confirmPassword: ''\r\n        };\r\n        let valid = true;\r\n        if (!person.email) {\r\n            newValidationErrors.email = 'Please enter an email';\r\n            valid = false;\r\n        } else if (!validateEmail(person.email)){\r\n            newValidationErrors.email = 'Please enter valid email';\r\n            valid = false;\r\n        }\r\n        if (!person.fullName) {\r\n            newValidationErrors.fullName = 'Please enter Full name';\r\n            valid = false;\r\n        }\r\n        if (!person.gender) {\r\n            newValidationErrors.gender = 'Please select your gender';\r\n            valid = false;\r\n        }\r\n        if (!person.password) {\r\n            newValidationErrors.password = 'Please enter password';\r\n            valid = false;\r\n        }\r\n        if (!person.confirmPassword) {\r\n            newValidationErrors.confirmPassword = 'Please enter password';\r\n            valid = false;\r\n        } else if (person.confirmPassword !== person.password) {\r\n            newValidationErrors.confirmPassword = 'Different password detected';\r\n            valid = false;\r\n        }\r\n        return { newValidationErrors, invalid: !valid };\r\n    };\r\n\r\n    return (\r\n        <div className='py-100'>\r\n            <Card className='mx-auto shadow-sm' style={{width: 'fit-content', minWidth: '400px'}}>\r\n                <Card.Header as='h5'>Register</Card.Header>\r\n                <Card.Body>\r\n                    <Form validated={validationErrors.validated} onSubmit={onRegister}>\r\n                        <Form.Group>\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control required type='email' placeholder='Enter Email' value={person.email} isInvalid={!!validationErrors.email}\r\n                                onChange={e => onUpdatePerson(e.target.value, 'email')} />\r\n                            <Form.Control.Feedback type={!!validationErrors.email ? 'invalid' : 'valid'}>{validationErrors.email}</Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Row>\r\n                            <Col md={12}>\r\n                                <Form.Group>\r\n                                    <Form.Label>Full Name</Form.Label>\r\n                                    <Form.Control required type='text' placeholder='Enter Full Name' value={person.fullName} isInvalid={!!validationErrors.fullName}\r\n                                        onChange={e => onUpdatePerson(e.target.value, 'fullName')} />\r\n                                    <Form.Control.Feedback type={!!validationErrors.fullName ? 'invalid' : 'valid'}>{validationErrors.fullName}</Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n                            <Col xl={12} md={12} >\r\n                                <Form.Group>\r\n                                    <Form.Label>Gender</Form.Label>\r\n                                    <Form.Control required as=\"select\" value={person.gender} isInvalid={!!validationErrors.gender}\r\n                                        onChange={e => onUpdatePerson(e.target.value, 'gender')}>\r\n                                        {genders.map(gender => <option key={gender.id} value={gender.id}>{gender.name}</option>)}\r\n                                    </Form.Control>\r\n                                    <Form.Control.Feedback type={!!validationErrors.gender ? 'invalid' : 'valid'}>{validationErrors.gender}</Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Form.Row>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control required type='password' placeholder='Password' value={person.password} isInvalid={!!validationErrors.password}\r\n                                onChange={e => onUpdatePerson(e.target.value, 'password')} />\r\n                            <Form.Control.Feedback type={!!validationErrors.password ? 'invalid' : 'valid'}>{validationErrors.password}</Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Confirm Password</Form.Label>\r\n                            <Form.Control required type='password' placeholder='Confirm Password' value={person.confirmPassword} isInvalid={!!validationErrors.confirmPassword}\r\n                                onChange={e => onUpdatePerson(e.target.value, 'confirmPassword')} />\r\n                            <Form.Control.Feedback type={!!validationErrors.confirmPassword ? 'invalid' : 'valid'}>{validationErrors.confirmPassword}</Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Row className='justify-content-end'>\r\n                            <Button className='ml-3' variant='primary' onClick={onRegister}>\r\n                                Register\r\n                            </Button>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row className='flex-direction-column'>\r\n                            <hr className='w-100'></hr>\r\n                            <Form.Text className='text-muted mx-auto'>\r\n                                <span className='cursor-pointer hover-underline' onClick={() => history.push('/auth/login')}>Already registered?</span>\r\n                            </Form.Text>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(connectToasts(RegisterPage));\r\n","import React, { useState } from 'react';\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    withRouter\r\n} from 'react-router-dom';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\n\r\nimport LandingPage from '../pages/landing';\r\nimport LoginPage from '../pages/auth/login';\r\nimport ForgotPasswordPage from '../pages/auth/forgot-password';\r\nimport ResetPasswordPage from '../pages/auth/reset-password';\r\nimport RegisterPage from '../pages/auth/register';\r\nimport { CustomSwitch } from '../components/common/switch';\r\nimport { connectAuth } from '../common/redux/connects';\r\nimport { isDarkTheme, toggleDarkTheme } from '../common/utils/theme';\r\nimport { getDefaultRedirectPath } from '../common/utils/auth';\r\n\r\nfunction AnonymousLayout({ user, history, logoutUserAction }) {\r\n    const [darkTheme] = useState(isDarkTheme());\r\n\r\n    return (<div className='vh-100 vw-100'>\r\n        <Navbar bg='dark' variant='dark' expand='md'>\r\n            <Navbar.Brand>\r\n                <span className='cursor-pointer' onClick={() => history.push('/')}>Video Watching</span>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className='justify-content-end'>\r\n                <Nav className='ml-auto mr-3'>\r\n                    {!!user ? <Nav.Link className='ml-2' onClick={() => history.push(getDefaultRedirectPath())}>Go to Dashboard</Nav.Link> : null}\r\n                    <div className='d-flex'>\r\n                        <CustomSwitch className='my-auto mr-1' value={darkTheme} onChange={e => toggleDarkTheme(e.target.checked)} />\r\n                        <Nav.Link disabled className='px-0'>Dark Theme</Nav.Link>\r\n                    </div>\r\n                    {!user ?\r\n                        <Nav.Link className='ml-2' onClick={() => history.push('/auth/login')}>Log in</Nav.Link> :\r\n                        <Nav.Link className='ml-2' onClick={logoutUserAction}>Log out</Nav.Link>\r\n                    }\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <main className='container'>\r\n            <Switch>\r\n                <Route exact path='/' component={LandingPage} />\r\n                <Route path='/auth' >\r\n                    <Switch>\r\n                        <Route exact path='/auth/login' component={LoginPage} />\r\n                        <Route exact path='/auth/forgot-password' component={ForgotPasswordPage} />\r\n                        <Route path='/auth/reset-password' component={ResetPasswordPage} />\r\n                        <Route exact path='/auth/register' component={RegisterPage} />\r\n                    </Switch>\r\n                </Route>\r\n                <Route path='/' >\r\n                    <Redirect to='/' />\r\n                </Route>\r\n            </Switch>\r\n        </main>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(connectAuth(AnonymousLayout));","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { Toast } from 'react-bootstrap';\r\n\r\nimport { connectToasts } from '../../common/redux/connects';\r\nimport { ToastStatus } from '../../common/enums/toast';\r\n\r\nconst ToastList = ({ toasts, removeToastAction }) => {\r\n    return (<div style={{ width: 300, position: 'fixed', right: 5, top: 60, zIndex: 9999 }}\r\n        className='d-flex flex-column align-items-end'>\r\n        {toasts.map((toast, ti) =>\r\n        <Toast key={ti} className='w-100' style={{ flexBasis: 'unset' }} animation onClose={() => removeToastAction(toast.id)}>\r\n            <Toast.Header className={classNames({\r\n                'bg-success': toast.status === ToastStatus.Success,\r\n                'bg-danger': toast.status === ToastStatus.Danger,\r\n                'bg-warning': toast.status === ToastStatus.Warning,\r\n                'bg-info': toast.status === ToastStatus.Info,\r\n            })}>\r\n                <strong className=\"text-white mr-auto\">{toast.title}</strong>\r\n            </Toast.Header>\r\n            <Toast.Body>\r\n                {toast.description}\r\n            </Toast.Body>\r\n        </Toast>)}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default connectToasts(ToastList);\r\n","import React, { Fragment, useEffect } from 'react';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  withRouter\r\n} from 'react-router-dom';\r\n\r\n// Layouts\r\nimport AdminLayout from './layouts/admin';\r\nimport CustomerLayout from './layouts/customer';\r\nimport AnonymousLayout from './layouts/anonymous';\r\n\r\n// Components\r\nimport { LoadingSpinner } from './components/common/spinner';\r\nimport ToastList from './components/common/toast-list';\r\n\r\n// Utils\r\nimport { connectAuthCheck } from './common/redux/connects';\r\nimport { isAdmin } from './common/utils/auth';\r\n\r\nfunction App({ history, tokenVerified, authenticated, userRole, verifyAccessTokenAction }) {\r\n  useEffect(() => {\r\n    verifyAccessTokenAction(history, false);\r\n  });\r\n\r\n  const renderApp = () => (<Fragment>\r\n    <ToastList />\r\n    <Switch>\r\n      <Route path='/admin'>\r\n        {authenticated && isAdmin(userRole) ? <AdminLayout /> : <Redirect to='/' />}\r\n      </Route>\r\n      <Route path='/customer'>\r\n        {authenticated && !isAdmin(userRole) ? <CustomerLayout /> : <Redirect to='/' />}\r\n      </Route>\r\n      <Route path='/'>\r\n        <AnonymousLayout />\r\n      </Route>\r\n    </Switch>\r\n  </Fragment>\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      { !tokenVerified ? <LoadingSpinner /> : renderApp()}\r\n    </Fragment>\r\n\r\n  );\r\n}\r\n\r\nexport default withRouter(connectAuthCheck(App));\r\n","import {\r\n    LOGIN_USER,\r\n    LOGIN_USER_SUCCESS,\r\n    LOGIN_USER_ERROR,\r\n    VERIFY_ACCESS_TOKEN,\r\n    VERIFY_ACCESS_TOKEN_SUCCESS,\r\n    VERIFY_ACCESS_TOKEN_ERROR,\r\n    LOGOUT_USER,\r\n    REGISTER_USER,\r\n    REGISTER_USER_SUCCESS,\r\n    REGISTER_USER_ERROR,\r\n    FORGOT_PASSWORD,\r\n    FORGOT_PASSWORD_SUCCESS,\r\n    FORGOT_PASSWORD_ERROR,\r\n    RESET_PASSWORD,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_ERROR,\r\n} from '../actions/types';\r\n\r\nconst INIT_STATE = {\r\n    user: undefined,\r\n    forgotPasswordEmail: '',\r\n    loading: false,\r\n    error: '',\r\n};\r\n\r\nconst authReducer = (state = INIT_STATE, action) => {\r\n    switch (action.type) {\r\n        case LOGIN_USER:\r\n            return { ...state, user: null, loading: true, error: '' };\r\n        case LOGIN_USER_SUCCESS:\r\n            return { ...state, loading: false, user: null, error: '' };\r\n        case LOGIN_USER_ERROR:\r\n            return { ...state, loading: false, user: null, error: action.payload.message };\r\n        case VERIFY_ACCESS_TOKEN:\r\n            return { ...state, loading: true, error: '' };\r\n        case VERIFY_ACCESS_TOKEN_SUCCESS:\r\n            return { ...state, loading: false, user: action.payload.user, error: '' };\r\n        case VERIFY_ACCESS_TOKEN_ERROR:\r\n            return { ...state, loading: false, user: null, error: action.payload.message };\r\n        case FORGOT_PASSWORD:\r\n            return { ...state, loading: true, error: '' };\r\n        case FORGOT_PASSWORD_SUCCESS:\r\n            return { ...state, loading: false, forgotPasswordEmail: action.payload.email, error: '' };\r\n        case FORGOT_PASSWORD_ERROR:\r\n            return { ...state, loading: false, forgotPasswordEmail: '', error: action.payload.message };\r\n        case RESET_PASSWORD:\r\n            return { ...state, loading: true, error: '' };\r\n        case RESET_PASSWORD_SUCCESS:\r\n            return { ...state, loading: false, error: '' };\r\n        case RESET_PASSWORD_ERROR:\r\n            return { ...state, loading: false, error: action.payload.message };\r\n        case REGISTER_USER:\r\n            return { ...state, loading: true, error: '' };\r\n        case REGISTER_USER_SUCCESS:\r\n            return { ...state, loading: false, error: '' };\r\n        case REGISTER_USER_ERROR:\r\n            return { ...state, loading: false, error: action.payload.message };\r\n        case LOGOUT_USER:\r\n            return { ...state, user: null, error: '' };\r\n        default:\r\n            return { ...state };\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n","import {\r\n    TOAST_ADD,\r\n    TOAST_REMOVE,\r\n    TOAST_REMOVE_ALL,\r\n} from '../actions/types';\r\n\r\nconst initialToastState = {\r\n    toasts: []\r\n};\r\n\r\nconst toastReducer = (state = initialToastState, action) => {\r\n    switch (action.type) {\r\n        case TOAST_ADD:\r\n            return {\r\n                toasts: state.toasts.concat([{\r\n                    id: action.payload.id,\r\n                    title: action.payload.title,\r\n                    status: action.payload.status,\r\n                    description: action.payload.description,\r\n                    createdAt: new Date()\r\n                }])\r\n            };\r\n        case TOAST_REMOVE:\r\n            const newToasts = JSON.parse(JSON.stringify(state.toasts));\r\n            const index = newToasts.findIndex(toast => toast.id === action.payload.id);\r\n            if (index >= 0) {\r\n                newToasts.splice(index, 1);\r\n                return { toasts: newToasts };\r\n            }\r\n            return state;\r\n        case TOAST_REMOVE_ALL:\r\n            return { toasts: [] };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default toastReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport authReducer from './auth-reducer';\r\nimport toastReducer from './toast-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    authReducer,\r\n    toastReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\n// Utils\r\nimport AuthAPI from '../../api/auth';\r\nimport { getDefaultRedirectPath } from '../../utils/auth';\r\n\r\n// Constants\r\nimport {\r\n    LOGIN_USER,\r\n    VERIFY_ACCESS_TOKEN,\r\n    REGISTER_USER,\r\n    LOGOUT_USER,\r\n    FORGOT_PASSWORD,\r\n    RESET_PASSWORD,\r\n} from '../actions/types';\r\n\r\nimport {\r\n    loginUserSuccess,\r\n    loginUserError,\r\n    verifyAccessToken,\r\n    verifyAccessTokenSuccess,\r\n    verifyAccessTokenError,\r\n    registerUserSuccess,\r\n    registerUserError,\r\n    forgotPasswordSuccess,\r\n    forgotPasswordError,\r\n    resetPasswordSuccess,\r\n    resetPasswordError,\r\n} from '../actions/auth-actions';\r\n\r\nexport function* watchLoginUser() {\r\n    yield takeEvery(LOGIN_USER, loginWithEmailPassword);\r\n}\r\n\r\nconst loginWithEmailPasswordAsync = async (email, password) =>\r\n    await AuthAPI.signInWithEmailAndPassword(email, password);\r\n\r\nfunction* loginWithEmailPassword({ payload }) {\r\n    const { email, password } = payload.loginUserDto;\r\n    const { history } = payload;\r\n    AuthAPI.signOut();\r\n    try {\r\n        yield call(loginWithEmailPasswordAsync, email, password);\r\n        yield put(loginUserSuccess());\r\n        yield put(verifyAccessToken(history));\r\n    } catch (error) {\r\n        yield put(loginUserError(error));\r\n    }\r\n}\r\n\r\nexport function* watchVerifyAccessToken() {\r\n    yield takeEvery(VERIFY_ACCESS_TOKEN, verifyAccessTokenNow);\r\n}\r\n\r\nconst verifyAccessTokenAsync = async () =>\r\n    await AuthAPI.verifyAccessToken();\r\n\r\nfunction* verifyAccessTokenNow({ payload }) {\r\n    const { history, forceRedirect } = payload;\r\n    try {\r\n        const { user, message } = yield call(verifyAccessTokenAsync);\r\n\r\n        if (user) {\r\n            yield put(verifyAccessTokenSuccess(user));\r\n            if (forceRedirect) {\r\n                history.replace(getDefaultRedirectPath());\r\n            }\r\n        } else {\r\n            yield put(verifyAccessTokenError(message));\r\n        }\r\n    } catch (error) {\r\n        yield put(verifyAccessTokenError(error));\r\n    }\r\n}\r\n\r\nexport function* watchRegisterUser() {\r\n    yield takeEvery(REGISTER_USER, registerWithEmailPassword);\r\n}\r\n\r\nconst registerUserAsync = async (registerUserDto) =>\r\n    await AuthAPI\r\n        .registerUser(registerUserDto)\r\n        .then(successResponse => successResponse)\r\n        .catch(error => error);\r\n\r\nfunction* registerWithEmailPassword({ payload }) {\r\n    const { history } = payload;\r\n    try {\r\n        const registerUserResponse = yield call(registerUserAsync, payload.registerUserDto);\r\n        if (!registerUserResponse.success) {\r\n            yield put(registerUserSuccess());\r\n            history.push('/auth/login');\r\n        } else {\r\n            yield put(registerUserError(registerUserResponse.message));\r\n        }\r\n    } catch (error) {\r\n        yield put(registerUserError(error));\r\n    }\r\n}\r\n\r\nexport function* watchLogoutUser() {\r\n    yield takeEvery(LOGOUT_USER, logout);\r\n}\r\n\r\nconst logoutAsync = async (history) => {\r\n    AuthAPI.signOut();\r\n    history.replace('/');\r\n};\r\n\r\nfunction* logout({ payload }) {\r\n    const { history } = payload;\r\n    try {\r\n        yield call(logoutAsync, history);\r\n    } catch (error) { }\r\n}\r\n\r\nexport function* watchForgotPassword() {\r\n    yield takeEvery(FORGOT_PASSWORD, forgotPassword);\r\n}\r\n\r\nconst forgotPasswordAsync = async (email) => {\r\n    return await AuthAPI\r\n        .sendPasswordResetEmail(email)\r\n        .then(successResponse => successResponse)\r\n        .catch(error => error);\r\n};\r\n\r\nfunction* forgotPassword({ payload }) {\r\n    const { email } = payload.forgotPasswordDto;\r\n    try {\r\n        const forgotPasswordStatus = yield call(forgotPasswordAsync, email);\r\n        if (!forgotPasswordStatus.success) {\r\n            yield put(forgotPasswordSuccess(email));\r\n        } else {\r\n            yield put(forgotPasswordError(forgotPasswordStatus.message));\r\n        }\r\n    } catch (error) {\r\n        yield put(forgotPasswordError(error));\r\n    }\r\n}\r\n\r\nexport function* watchResetPassword() {\r\n    yield takeEvery(RESET_PASSWORD, resetPassword);\r\n}\r\n\r\nconst resetPasswordAsync = async (resetPasswordCode, newPassword) => {\r\n    return await AuthAPI\r\n        .confirmPasswordReset(resetPasswordCode, newPassword)\r\n        .then(successResponse => successResponse)\r\n        .catch((error) => error);\r\n};\r\n\r\nfunction* resetPassword({ payload }) {\r\n    const { password } = payload.resetPasswordDto;\r\n    const { history } = payload;\r\n    try {\r\n        const resetPasswordStatus = yield call(resetPasswordAsync, password);\r\n        if (!resetPasswordStatus.success) {\r\n            yield put(resetPasswordSuccess());\r\n            history.push('/auth/login');\r\n        } else {\r\n            yield put(resetPasswordError(resetPasswordStatus.message));\r\n        }\r\n    } catch (error) {\r\n        yield put(resetPasswordError(error));\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(watchLoginUser),\r\n        fork(watchVerifyAccessToken),\r\n        fork(watchLogoutUser),\r\n        fork(watchRegisterUser),\r\n        fork(watchForgotPassword),\r\n        fork(watchResetPassword),\r\n    ]);\r\n}\r\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { removeToast } from '../actions/toast-actions';\r\n\r\n// Constants\r\nimport {\r\n    TOAST_ADD,\r\n} from '../actions/types';\r\n\r\nexport function* watchToastAdd() {\r\n    yield takeEvery(TOAST_ADD, autoRemoveToast);\r\n}\r\n\r\nconst delay = time => new Promise(resolve => setTimeout(resolve, time));\r\n\r\nfunction* autoRemoveToast({ payload }) {\r\n    const { id } = payload;\r\n    yield call(delay, 5000);\r\n    yield put(removeToast(id));\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(watchToastAdd),\r\n    ]);\r\n}","import { all } from 'redux-saga/effects';\r\nimport authSagas from './auth-saga';\r\nimport toastSagas from './toast-saga';\r\n\r\nexport default function* rootSaga(getState) {\r\n  yield all([\r\n    authSagas(),\r\n    toastSagas()\r\n  ]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './reducers';\r\nimport sagas from './sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middlewares = [sagaMiddleware];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    compose(applyMiddleware(...middlewares))\r\n);\r\n\r\nsagaMiddleware.run(sagas)\r\n\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { Suspense } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport { LoadingSpinner } from './components/common/spinner';\r\nimport store from './common/redux/store';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Suspense fallback={<LoadingSpinner />}>\r\n        <App />\r\n      </Suspense>\r\n    </Router>\r\n  </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import axios from 'axios';\r\n\r\n// Utils\r\nimport { getAccessToken, updateAccessToken, removeAccessToken } from '../utils/auth';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\nimport { UserRole } from '../enums/auth';\r\n\r\nconst authBaseURL = `${APIServerURL}/auth`;\r\nconst AuthAPI =  {\r\n    signInWithEmailAndPassword: (email, password) => {\r\n        const url = `${authBaseURL}/login`;\r\n        return axios.post(url, { email, password }).then(res => {\r\n            updateAccessToken(res.token);\r\n        });\r\n    },\r\n    verifyAccessToken: () => {\r\n        if (!getAccessToken()) {\r\n            return;\r\n        }\r\n        const url = `${authBaseURL}/profile`;\r\n        return axios.get(url).then(user => ({ user }), e => e);\r\n    },\r\n    registerAdminUser: (registerUserDto) => {\r\n        const url = `${authBaseURL}/register`;\r\n        return axios.post(url, { ...registerUserDto, role: UserRole.Admin });\r\n    },\r\n    signOut: () => {\r\n        removeAccessToken();\r\n    },\r\n    sendPasswordResetEmail: (email) => {\r\n\r\n    },\r\n}\r\n\r\nexport default AuthAPI;\r\n","export const UITheme = {\r\n    Light: 'LIGHT',\r\n    Dark: 'DARK'\r\n};\r\n"],"sourceRoot":""}