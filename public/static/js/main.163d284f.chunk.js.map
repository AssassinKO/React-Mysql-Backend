{"version":3,"sources":["common/utils/common.js","common/redux/actions/types.js","common/api/videos.js","common/api/users.js","common/enums/toast.js","index.js","assets/scss/themes lazy /^/.*/.scss$/ groupOptions: {} namespace object","common/constants/default-values.js","common/redux/connects.js","common/enums/auth.js","common/redux/actions/auth-actions.js","common/api/configuration.js","common/utils/auth.js","components/common/popover.js","pages/admin/dashboard.js","components/common/spinner.js","common/api/exam-bodies.js","pages/admin/questions/select-exam-body.js","components/common/select.js","common/enums/questions.js","common/api/questions.js","common/api/subjects.js","pages/admin/questions/question-groups.js","common/api/sub-topics.js","common/api/upload.js","components/common/text-input.js","components/common/table.js","pages/admin/questions/question-add.js","pages/admin/questions/question-edit.js","components/questions/answer-in-row.js","components/questions/question-in-row.js","pages/admin/questions/question-list.js","components/common/switch.js","common/utils/theme.js","layouts/admin.js","pages/customer/dashboard.js","layouts/customer.js","pages/landing.js","pages/auth/login.js","pages/auth/forgot-password.js","pages/auth/reset-password.js","common/api/auth.js","pages/auth/register.js","layouts/anonymous.js","components/common/toast-list.js","App.js","common/redux/reducers/auth-reducer.js","common/redux/reducers/toast-reducer.js","common/redux/reducers/index.js","common/redux/sagas/auth-saga.js","common/redux/sagas/toast-saga.js","common/redux/sagas/index.js","common/redux/store.js","reportWebVitals.js","AppRenderer.js","common/enums/theme.js","common/redux/actions/toast-actions.js"],"names":["capitalizeWord","word","String","toUpperCase","substring","toLowerCase","validateEmail","email","test","timeFromNow","timestamp","Date","getTime","moment","fromNow","secsToHMS","currentSeconds","toISOString","substr","dateToLocalString","stamp","toLocaleString","LOGIN_USER","LOGIN_USER_SUCCESS","LOGIN_USER_ERROR","VERIFY_ACCESS_TOKEN","VERIFY_ACCESS_TOKEN_SUCCESS","VERIFY_ACCESS_TOKEN_ERROR","REGISTER_USER","REGISTER_USER_SUCCESS","REGISTER_USER_ERROR","LOGOUT_USER","FORGOT_PASSWORD","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_ERROR","RESET_PASSWORD","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","TOAST_ADD","TOAST_REMOVE","TOAST_REMOVE_ALL","VIDEOS_BASE_URL","APIServerURL","VideosAPI","addVideo","title","file","formData","FormData","url","append","axios","post","getVideos","page","perPage","get","getVideo","id","updateVideo","put","remove","delete","removeVideo","BASE_URL","UserAPI","createOne","gender","fullName","password","getAll","getOne","updateOne","removeOne","ToastStatus","Danger","Warning","Success","Info","themes","Object","values","UITheme","previousUITheme","localStorage","getItem","ConstantNames","currentUITheme","includes","defaultTheme","setItem","toLocaleLowerCase","then","require","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","e","Error","code","ids","t","keys","module","exports","Light","AccessToken","env","HOST","config","development","AssetsServerURL","SocketServerURL","console","log","process","mapAuthDispatchToProps","loginUserAction","loginUser","logoutUserAction","logoutUser","connectAuth","connect","authReducer","user","authError","error","mapAuthCheckDispatchToProps","verifyAccessTokenAction","verifyAccessToken","connectAuthCheck","tokenVerified","undefined","authenticated","userRole","role","mapToastsDispatchToProps","addToastAction","addToast","removeToastAction","removeToast","connectToasts","toasts","toastReducer","UserRole","SuperAdmin","Admin","User","UserGender","Male","Female","Other","loginUserDto","history","type","payload","loginUserSuccess","loginUserError","message","forceRedirect","verifyAccessTokenSuccess","verifyAccessTokenError","forgotPasswordSuccess","forgotPasswordError","resetPasswordSuccess","resetPasswordError","registerUserSuccess","registerUserError","interceptors","request","use","at","getAccessToken","headers","Authorization","reject","response","data","updateAccessToken","removeAccessToken","removeItem","getDefaultRedirectPath","decodedToken","decodeToken","isExpired","isAdmin","Customer","ConfirmPopover","visible","target","setVisibility","label","onConfirm","placement","show","onHide","containerPadding","rootClose","Title","as","Content","className","variant","size","onClick","defaultProps","AdminDashboard","useState","userCount","setUserCount","videoCount","setVideoCount","useEffect","UserApis","totalCount","VideosApis","Fragment","Row","Col","Card","to","withRouter","LoadingSpinner","absolute","Spinner","animation","style","position","left","top","examBodiesBaseURL","ExamBodiesAPI","getAllExamBodies","getExamBodyById","examBodyId","AdminSelectExamBody","examBodies","setExamBodies","isLoading","setIsLoading","ExamBodyAPI","arrExamBodies","Container","examBody","ebi","sm","md","lg","Img","src","logoUrl","Body","name","Button","push","CustomSelect","value","onChange","Form","Group","Label","Control","eachValue","QuestionStatus","Draft","UnderReview","Published","questionsBaseURL","QuestionsAPI","findQuestionGroups","filterOptions","copiedFilterOptions","key","hasOwnProperty","call","query","querystring","stringify","findAdditionalDetails","subjectId","year","initRegisterQuestionsPage","registerQuestion","rqDto","answers","registerResponse","attachAnswers","questionId","findQuestionsByExam","objQuery","requestToPublish","status","publishQuestions","initEditQuestionsPage","updateQuestion","question","deleteQuestion","subjectsBaseURL","SubjectsAPI","getAllSubjects","subjects","questionGroupTableHeaders","AdminQuestionGroups","match","setExamBody","questionGroups","setQuestionGroups","setSubjects","years","setYears","getFullYear","newQuestionGroupInput","setNewQuestionGroupInput","statuses","filterCategories","setFilterCategories","setFilterOptions","selectedQuestionGroup","setSelectedQuestionGroup","visibleAdditionalDetails","setVisibleAdditionalDetails","actionIndex","setActionIndex","visibleActionPopover","setVisibleActionPopover","actionTarget","setActionTarget","visibleNewExamPopover","setVisibleNewExamPopover","newExamTarget","setNewExamTarget","pageIndex","setPageIndex","pagesCount","groupsCount","total","setTotal","visiblePublishConfirmPopover","setVisiblePublishConfirmPopover","publishConfirmTarget","setPublishConfirmTarget","visibleRequestToPublishConfirmPopover","setVisibleRequestToPublishConfirmPopover","requestToPublishConfirmTarget","setRequestToPublishConfirmTarget","params","eb","arrSubjects","newYears","i","newStatuses","split","join","concat","subject","onRefreshQuestionGroups","getSubjectNameWithId","find","s","onAddNewQuestion","qGroup","onClickPublishQuestionGroupButton","event","onClickRequestToPublishQuestionGroupButton","updateQuestionGroupStatus","groupIndex","newGroups","JSON","parse","onChangeNewQuestionGroupInputs","field","onChangeFilterOptions","count","Math","ceil","goBack","parseInt","Image","height","rounded","icon","faPlus","length","Table","responsive","bordered","headerName","hi","qgi","width","faBars","index","objTimeOut","setTimeout","clearTimeout","toggleActionPopover","Pagination","First","disabled","Prev","Item","active","Next","Last","Modal","backdrop","keyboard","aria-labelledby","centered","Header","closeButton","InputGroup","Prepend","Text","FormControl","placeholder","aria-label","aria-describedby","subjectName","createdAt","createdBy","lastModifiedAt","lastModifiedBy","Footer","Overlay","Popover","maxWidth","result","createdByFullName","lastModifiedByFullName","assign","renderAddNewQuestionDropDownItem","renderPublishActionsDropDownItem","findIndex","statusCode","subTopicsBaseURL","SubTopicsAPI","getSubTopics","topicId","subTopics","UploadAPI","uploadFile","form","res","AnyTextInput","editable","equation","tex","onError","err","onSuccess","EditableTable","onChangeDataCell","rowIndex","colIndex","newData","content","onChangeHeaderCell","newHeader","row","ri","cell","ci","CustomTable","striped","hover","AnswerTable","rows","columns","tableMatrix","setTableMatrix","visibleNewTablePopover","setVisibleNewTablePopover","newTableTarget","setNewTableTarget","newTableIndex","setNewTableIndex","onChangeMatrixField","Check","checked","correct","answer","image","faTimes","marginLeft","marginBottom","tableHeaders","tableData","p","answerIndex","onChangeAnswerTable","faImage","faTable","preColumns","preRows","objTimeout","onShowNewTablePopover","faTrash","newTableHeaders","newTableData","answerTableHeaders","initQuestion","questionNumber","AdminQuestionsAdd","topics","setTopics","setSubTopics","examBodyName","exam","setExam","setTopicId","subTopicId","setSubTopicId","fileInput","useRef","setQuestion","setAnswers","assetToChange","setAssetToChange","visibleRegisterConfirmPopover","setVisibleRegisterConfirmPopover","registerConfirmTarget","setRegisterConfirmTarget","visibleClearEntryConfirmPopover","setVisibleClearEntryConfirmPopover","clearEntryConfirmTarget","setClearEntryConfirmTarget","arrSubTopics","onChangeQuestion","onUploadImage","current","click","onFileChanged","a","files","fileName","arrAnswers","onChangeQuestionTableMatrix","clearQuestionEntry","innerValue","splice","File","ref","AdminQuestionsEdit","visibleUpdateConfirmPopover","setVisibleUpdateConfirmPopover","updateConfirmTarget","setUpdateConfirmTarget","AnswerInRow","QuestionInRow","onDelete","topicName","subTopicName","isDetailOpened","setIsDetailOpened","removingQuestionId","setRemovingQuestionId","visibleConfirmPopover","setVisibleConfirmPopover","setTarget","Accordion","Toggle","FontAwesomeIcon","faAngleDown","eventKey","classNames","Collapse","DropdownButton","Dropdown","dropDownTarget","parentNode","firstChild","showDeleteQuestionConfirmPopover","ai","examBodyLogoUrl","PropTypes","func","AdminQuestionsList","questions","setQuestions","onRefreshQuestionsList","keyword","qs","onClickRequestToPublishButton","onClickPublishQuestionsButton","updateQuestionsStatus","newQuestions","onDeleteQuestion","q","Alert","qi","CustomSwitch","color","setId","now","htmlFor","toggleDarkTheme","isDarkTheme","Dark","window","location","reload","VideoList","lazy","VideoView","VideoForm","UserList","UserForm","UserView","ReportList","ReportView","darkTheme","Navbar","expand","Brand","Nav","Link","NavDropdown","alignRight","faUser","exact","path","component","CustomerDashboard","bg","LandingPage","setEmail","setPassword","isSubmit","setIsSubmit","replace","controlId","onKeyPress","authBaseURL","AuthAPI","signInWithEmailAndPassword","token","registerAdminUser","registerUserDto","signOut","sendPasswordResetEmail","confirmPassword","person","setPerson","validated","validationErrors","setValidationErrors","genders","setGenders","arrGenders","onUpdatePerson","onRegister","preventDefault","stopPropagation","validateRegisterForm","newValidationErrors","invalid","valid","minWidth","onSubmit","required","isInvalid","Feedback","xl","LoginPage","ForgotPasswordPage","ResetPasswordPage","RegisterPage","right","zIndex","toast","ti","Toast","flexBasis","onClose","description","INIT_STATE","forgotPasswordEmail","loading","state","action","initialToastState","newToasts","rootReducer","combineReducers","watchLoginUser","loginWithEmailPassword","watchVerifyAccessToken","verifyAccessTokenNow","watchRegisterUser","registerWithEmailPassword","watchLogoutUser","logout","watchForgotPassword","forgotPassword","watchResetPassword","resetPassword","rootSaga","takeEvery","loginWithEmailPasswordAsync","verifyAccessTokenAsync","registerUserAsync","registerUser","successResponse","catch","registerUserResponse","success","logoutAsync","forgotPasswordAsync","forgotPasswordDto","forgotPasswordStatus","resetPasswordAsync","resetPasswordCode","newPassword","confirmPasswordReset","resetPasswordDto","resetPasswordStatus","all","fork","watchToastAdd","autoRemoveToast","delay","time","getState","authSagas","toastSagas","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","compose","applyMiddleware","run","sagas","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","fallback","document","getElementById"],"mappings":"kIAAA,gMAUaA,EAAiB,SAACC,GAC3B,OAAOC,OAAOD,EAAK,IAAIE,cAAgBD,OAAOD,EAAKG,UAAU,IAAIC,eAGxDC,EAAgB,SAACC,GAE1B,MADW,wJACDC,KAAKN,OAAOK,GAAOF,gBAGpBI,EAAc,SAACC,GAGxB,OAFAA,EAAY,IAAIC,KAAKD,GAAWE,UAEzBC,IAAOH,GAAWI,WAGhBC,EAAY,SAACC,GACtB,OAAO,IAAIL,KAAsB,IAAjBK,GAAuBC,cAAcC,OAAO,GAAI,IAGvDC,EAAoB,SAACC,GAC9B,OAAO,IAAIT,KAAKS,GAAOC,mB,gCC9B3B,soBACO,IAAMC,EAAa,aACbC,EAAqB,qBACrBC,EAAmB,mBACnBC,EAAsB,sBACtBC,EAA8B,8BAC9BC,EAA4B,4BAC5BC,EAAgB,gBAChBC,EAAwB,wBACxBC,EAAsB,sBACtBC,EAAc,cACdC,EAAkB,kBAClBC,EAA0B,0BAC1BC,EAAwB,wBACxBC,EAAiB,iBACjBC,EAAyB,yBACzBC,EAAuB,uBAGvBC,EAAY,YACZC,EAAe,eACfC,EAAmB,oB,iCCrBhC,oBAKMC,EAAe,UAAMC,IAAN,WACfC,EAAa,CACfC,SAAU,YAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACXC,EAAW,IAAIC,SACbC,EAAG,UAAMR,GAKf,OAHAM,EAASG,OAAO,QAASL,GACzBE,EAASG,OAAO,OAAQJ,GAEjBK,UAAMC,KAAKH,EAAKF,IAE3BM,UAAW,YAAwB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACVN,EAAG,UAAMR,EAAN,iBAA8Ba,EAA9B,oBAA8CC,GACvD,OAAOJ,UAAMK,IAAIP,IAErBQ,SAAU,YAAW,IAATC,EAAQ,EAARA,GACR,OAAOP,UAAMK,IAAN,UAAaf,EAAb,YAAgCiB,KAE3CC,YAAa,YAAwB,IAAtBD,EAAqB,EAArBA,GAAIb,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAClBC,EAAW,IAAIC,SACbC,EAAG,UAAMR,EAAN,YAAyBiB,EAAzB,WAIT,OAFAX,EAASG,OAAO,QAASL,GACzBE,EAASG,OAAO,OAAQJ,GACjBK,UAAMS,IAAIX,EAAKF,IAE1Bc,OAAQ,YAAW,IAATH,EAAQ,EAARA,GACAT,EAAG,UAAMR,EAAN,YAAyBiB,GAElC,OAAOP,UAAMW,OAAOb,IAExBc,YAAa,YAAW,IAATL,EAAQ,EAARA,GACLT,EAAG,UAAMR,EAAN,YAAyBiB,GAClC,OAAOP,UAAMW,OAAN,UAAgBb,EAAhB,aAIAN,O,iCC1Cf,oBAKMqB,EAAQ,UAAMtB,IAAN,UACRuB,EAAW,CACbC,UAAW,YAA0C,IAAxC3D,EAAuC,EAAvCA,MAAO4D,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAClC,OAAOlB,UAAMC,KAAN,UAAcY,GAAY,CAC7BzD,QAAO4D,SAAQC,WAAUC,cAGjCC,OAAQ,YAAwB,IAArBhB,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACPN,EAAG,UAAMe,EAAN,iBAAuBV,EAAvB,oBAAuCC,GAChD,OAAOJ,UAAMK,IAAIP,IAErBsB,OAAQ,YAAW,IAATb,EAAQ,EAARA,GACN,OAAOP,UAAMK,IAAN,UAAaQ,EAAb,YAAyBN,KAEpCc,UAAW,YAAoC,IAAlCd,EAAiC,EAAjCA,GAAInD,EAA6B,EAA7BA,MAAO6D,EAAsB,EAAtBA,SAAUD,EAAY,EAAZA,OACxBlB,EAAG,UAAMe,EAAN,YAAkBN,EAAlB,WAET,OAAOP,UAAMS,IAAIX,EAAK,CAAC1C,QAAO6D,WAAUD,YAE5CM,UAAW,YAAW,IAATf,EAAQ,EAARA,GACHT,EAAG,UAAMe,EAAN,YAAkBN,GAE3B,OAAOP,UAAMW,OAAOb,KAIbgB,O,gCC/Bf,kCAAO,IAAMS,EAAc,CACvBC,OAAQ,SACRC,QAAS,UACTC,QAAS,UACTC,KAAM,S,iCCJV,2BAGMC,EAASC,OAAOC,OAAOC,KAEvBC,EAAkBC,aAAaC,QAAQC,IAAcJ,SACrDK,EAAkBJ,GAAmBJ,EAAOS,SAASL,GAAoBA,EAAkBM,IACjGL,aAAaM,QAAQJ,IAAcJ,QAASK,GAG1C,OAAO,YAAwBrF,OAAOqF,GAAgBI,oBAAtD,UAAkFC,MAAK,WACrFC,EAAQ,IACRA,EAAQ,S,oBCZZ,IAAIC,EAAM,CACT,gBAAiB,CAChB,IACA,GAED,cAAe,CACd,IACA,GAED,eAAgB,CACf,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUR,MAAK,WAC7B,IAAIS,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMV,EAAIE,GAAMtC,EAAK8C,EAAI,GAC7B,OAAOP,EAAoBI,EAAEG,EAAI,IAAIZ,MAAK,WACzC,OAAOK,EAAoBQ,EAAE/C,EAAI,MAGnCqC,EAAoBW,KAAO,WAC1B,OAAO1B,OAAO0B,KAAKZ,IAEpBC,EAAoBrC,GAAK,IACzBiD,EAAOC,QAAUb,G,gCChCjB,8KAGaN,EAHb,MAG4BP,EAAQ2B,MAGvBvB,EAAgB,CACzBwB,YAAa,eACb5B,QAAS,YAIP6B,EAAM,cAENC,EAAO,mBAEPC,EAAS,CACXC,YAAa,CACTxE,aAAa,GAAD,OAAKsE,EAAL,cACZG,gBAAgB,GAAD,OAAKH,EAAL,SACfI,gBAAgB,GAAD,OAAKJ,EAAL,WAcvBK,QAAQC,IAAI,8BAA+BC,mIAAY7E,cAEhD,IAAMA,EAAqB6E,mIAAY7E,cAAgBuE,EAAOF,GAAKrE,aAC7DyE,EAAqBI,mIAAYJ,iBAAmBF,EAAOF,GAAKI,gBAChEC,EAAqBG,mIAAYH,iBAAmBH,EAAOF,GAAKK,iB,gCCtC7E,kIAYMI,EAAyB,CAAEC,gBAAiBC,IAAWC,iBAAkBC,KAClEC,EAAcC,aAPC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAC3B,MAAO,CACHC,KAAMD,EAAYC,KAClBC,UAAWF,EAAYG,SAI0BV,GAMnDW,EAA8B,CAAEC,wBAAyBC,KAClDC,EAAmBR,aALJ,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,MAAsB,CAC9CQ,qBAAsCC,IAArBT,EAAYC,MAC7BS,gBAAiBV,EAAYC,KAC7BU,SAAWX,EAAYC,KAAcD,EAAYC,KAAKW,KAAxB,QAE2BR,GAIvDS,EAA2B,CAAEC,eAAgBC,IAAUC,kBAAmBC,KACnEC,EAAgBnB,aAFJ,SAAC,GAAD,MAAuB,CAAEoB,OAAzB,EAAGC,aAA2CD,UAEhBN,I,gCCzBvD,oEAAO,IAAMQ,EAAW,CACpBC,WAAY,cACZC,MAAO,QACPC,KAAM,QAGGC,EAAa,CACtBC,KAAM,OACNC,OAAQ,SACRC,MAAO,U,gCCTX,scAmBajC,EAAY,SAACkC,EAAcC,GAAf,MAA4B,CACjDC,KAAMxI,IACNyI,QAAS,CAAEH,eAAcC,aAEhBG,EAAmB,iBAAO,CACnCF,KAAMvI,IACNwI,QAAS,KAEAE,EAAiB,SAACC,GAAD,MAAc,CACxCJ,KAAMtI,IACNuI,QAAS,CAAEG,aAGF7B,EAAoB,SAACwB,GAAD,IAAUM,IAAV,+DAAoC,CACjEL,KAAMrI,IACNsI,QAAS,CAAEF,UAASM,mBAEXC,EAA2B,SAACpC,GAAD,MAAW,CAC/C8B,KAAMpI,IACNqI,QAAS,CAAE/B,UAEFqC,EAAyB,SAACH,GAAD,MAAc,CAChDJ,KAAMnI,IACNoI,QAAS,CAAEG,aAOFI,EAAwB,SAAC/J,GAAD,MAAY,CAC7CuJ,KAAM7H,IACN8H,QAAS,CAAExJ,WAEFgK,EAAsB,SAACL,GAAD,MAAc,CAC7CJ,KAAM5H,IACN6H,QAAS,CAAEG,aAOFM,EAAuB,iBAAO,CACvCV,KAAM1H,IACN2H,QAAS,KAEAU,EAAqB,SAACP,GAAD,MAAc,CAC5CJ,KAAMzH,IACN0H,QAAS,CAAEG,aAOFQ,EAAsB,iBAAO,CACtCZ,KAAMjI,IACNkI,QAAS,KAEAY,EAAoB,SAACT,GAAD,MAAc,CAC3CJ,KAAMhI,IACNiI,QAAS,CAAEG,aAGFtC,EAAa,SAACiC,GAAD,MAAc,CACpCC,KAAM/H,IACNgI,QAAS,CAAEF,c,gCCtFf,oCAIA1G,IAAMyH,aAAaC,QAAQC,KAAI,SAAU7D,GACrC,IAAM8D,EAAKC,cAEX,OADA/D,EAAOgE,QAAQC,cAAf,iBAAyCH,GAClC9D,KACR,SAAUiB,GACT,OAAO/B,QAAQgF,OAAOjD,MAI1B/E,IAAMyH,aAAaQ,SAASN,KAAI,SAAUM,GACtC,OAAOA,EAASC,QACjB,SAAUnD,GACT,OAAO/B,QAAQgF,OAAOjD,EAAMkD,SAASC,SAG1BlI,YAAf,G,gCCnBA,uMAMa6H,EAAiB,WAC1B,OAAO5F,aAAaC,QAAQC,IAAcwB,cAGjCwE,EAAoB,SAAAP,GAC7B3F,aAAaM,QAAQJ,IAAcwB,YAAaiE,IAGvCQ,EAAoB,WAC7BnG,aAAaoG,WAAWlG,IAAcwB,cAG7B2E,EAAyB,WAClC,IAAMC,EAAeC,YAAYX,KAKjC,GAHA3D,QAAQC,IAAI,eAAgBoE,IAETE,YAAUZ,KAM7B,OAAKU,GAAiBA,EAAa/C,KAG/BkD,EAAQH,EAAa/C,MACd,SAEA,YANqC,IAJ5CtB,QAAQC,IAAI,gCAcPuE,EAAU,SAAAnD,GACnB,OAAOA,GACH,KAAKU,IAASE,MACd,KAAKF,IAASC,WACV,OAAO,EACX,KAAKD,IAAS0C,SAEd,QAAS,OAAO,K,gCC9CxB,6EAIaC,EAAiB,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,QAASC,EAAyD,EAAzDA,OAAQC,EAAiD,EAAjDA,cAAeC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAC/E,OACI,cAAC,IAAD,CAASC,KAAMN,EAASC,OAAQA,EAAQI,UAAWA,EAAWE,OAAQ,kBAAML,GAAc,IAAQM,iBAAkB,GAAIC,WAAS,EAAjI,SACI,eAAC,IAAD,WACI,cAAC,IAAQC,MAAT,CAAeC,GAAG,KAAlB,qBACA,eAAC,IAAQC,QAAT,WACI,mBAAGC,UAAU,MAAb,SAAoBV,IAEpB,cAAC,IAAD,CAAQU,UAAU,mBAAmBC,QAAQ,UAAUC,KAAK,KAAKC,QAAS,iBAAM,CAACZ,IAAaF,GAAc,KAA5G,8BAepBH,EAAekB,aAAe,CAC1BjB,SAAS,EACTC,OAAQ,KACRC,cAAe,aACfC,MAAO,GACPC,UAAW,aACXC,UAAW,S,2MCzBf,SAASa,IACL,MAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAgBA,OAdAC,qBAAU,WACNC,IACKnJ,OAAO,CAACf,QAAS,GAAID,KAAM,IAC3BsC,MAAK,SAACyF,GACHgC,EAAahC,EAAKqC,eAG1BC,IACKtK,UAAU,CAACE,QAAS,GAAID,KAAM,IAC9BsC,MAAK,SAACyF,GACHkC,EAAclC,EAAKqC,iBAE5B,IAGC,eAAC,IAAME,SAAP,WACI,qBAAKf,UAAU,cAAf,SACI,mDAEJ,eAACgB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAMlB,UAAU,cAAhB,SACI,eAAC,IAAD,CAAMmB,GAAE,eAAR,UACI,8BACI,6CAEJ,8BACI,6BAAKZ,aAKrB,cAACU,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAMlB,UAAU,cAAhB,SACI,eAAC,IAAD,CAAMmB,GAAE,gBAAR,UACI,8BACI,8CAEJ,8BACI,6BAAKV,mBAWrCJ,EAAeD,aAAe,GAEfgB,kBAAWf,G,2BC5DbgB,EAAiB,SAACC,GAC3B,OAAQ,cAAC,WAAD,UACFA,EACE,qBAAKtB,UAAU,SAAf,SAAwB,cAACuB,EAAA,EAAD,CAASC,UAAU,SAASvB,QAAQ,UAAUD,UAAU,2BAChF,cAACuB,EAAA,EAAD,CAASC,UAAU,SAASvB,QAAQ,UAAUD,UAAU,gBAAgByB,MAAO,CAAEC,SAAU,WAAYC,KAAM,MAAOC,IAAK,YAQrIP,EAAejB,aAAe,CAC1BkB,UAAU,GAGP,I,gBCfDO,EAAiB,UAAMhM,IAAN,gBAYRiM,EAXQ,CACnBC,iBAAkB,WACd,IAAM3L,EAAG,UAAMyL,GACf,OAAOvL,UAAMK,IAAIP,IAErB4L,gBAAiB,SAACC,GACd,IAAM7L,EAAG,UAAMyL,EAAN,kBAAiCI,GAC1C,OAAO3L,UAAMK,IAAIP,KCLzB,SAAS8L,EAAT,GAA2C,IAAZlF,EAAW,EAAXA,QAC3B,EAAoCsD,mBAAS,IAA7C,mBAAO6B,EAAP,KAAmBC,EAAnB,KACA,EAAkC9B,oBAAS,GAA3C,mBAAO+B,EAAP,KAAkBC,EAAlB,KAaA,OAXA3B,qBAAU,WACN2B,GAAa,GACbC,EAAYR,mBAAmBhJ,MAAK,SAAAyJ,GAChCJ,EAAcI,GACdF,GAAa,MACd,SAAA9I,GACCgB,QAAQC,IAAIjB,GACZ8I,GAAa,QAElB,IAEK,eAACG,EAAA,EAAD,CAAWzC,UAAU,OAArB,UACJ,cAACgB,EAAA,EAAD,CAAKhB,UAAU,OAAf,SACI,cAACiB,EAAA,EAAD,UACI,oBAAIjB,UAAU,2BAAd,2CAKPqC,EAAY,cAAC,EAAD,IAAqB,KAClC,eAACrB,EAAA,EAAD,WACKmB,EAAWlJ,KAAI,SAACyJ,EAAUC,GAAX,OACZ,cAAC1B,EAAA,EAAD,CAAe2B,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG9C,UAAU,MAA9C,SACI,eAACkB,EAAA,EAAD,CAAMlB,UAAU,kBAAhB,UACI,cAACkB,EAAA,EAAK6B,IAAN,CAAU/C,UAAU,eAAeC,QAAQ,MAAM+C,IAAKN,EAASO,UAC/D,eAAC/B,EAAA,EAAKgC,KAAN,WACI,cAAChC,EAAA,EAAKrB,MAAN,CAAYG,UAAU,cAAtB,SAAqC0C,EAASS,OAC9C,cAACC,EAAA,EAAD,CAAQpD,UAAU,cAAcC,QAAQ,UACpCE,QAAS,kBAAMnD,EAAQqG,KAAR,wCAA8CX,EAAS7L,MAD1E,uBALF8L,MAWd,cAAC1B,EAAA,EAAD,CAAK2B,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG9C,UAAU,MAApC,SACI,eAACkB,EAAA,EAAD,CAAMlB,UAAU,kBAAhB,UACI,cAACkB,EAAA,EAAK6B,IAAN,CAAU/C,UAAU,eAAeC,QAAQ,MAAM+C,IAAI,0GACrD,cAAC9B,EAAA,EAAKrB,MAAN,CAAYG,UAAU,cAAtB,kBACA,cAACkB,EAAA,EAAKgC,KAAN,UACI,cAACE,EAAA,EAAD,CAAQpD,UAAU,cAAcC,QAAQ,UAAxC,4CASxBiC,EAAoB9B,aAAe,GAEpBgB,kBAAWc,G,gGCzDboB,EAAe,SAAC,GAAwC,IAAtChE,EAAqC,EAArCA,MAAOiE,EAA8B,EAA9BA,MAAOnL,EAAuB,EAAvBA,OAAQoL,EAAe,EAAfA,SACjD,OACI,eAACC,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,iCAASrE,MACrB,cAACmE,EAAA,EAAKG,QAAN,CAAc9D,GAAG,SAAS0D,SAAUA,EAAUD,MAAOA,EAArD,SACKnL,EAAOa,KAAI,SAAA4K,GAAS,MACI,kBAAdA,EACP,wBAA2BN,MAAOM,EAAUhN,GAA5C,SAAiDgN,EAAUV,MAA9CU,EAAUhN,IACvB,iCAAyBgN,GAAZA,YAoBjCP,EAAalD,aAAe,CACxBd,MAAO,GACPlH,OAAQ,GACRoL,SAAU,c,uCCnCDM,EAAiB,CAC1BC,MAAO,QACPC,YAAa,eACbC,UAAW,aCITC,EAAgB,UAAMrO,IAAN,cAChBsO,EAAe,CAEjBC,mBAAoB,SAACnC,GAAoC,IAAxBoC,EAAuB,uDAAP,GACvCC,EAAsB,GAC5B,IAAK,IAAMC,KAAOF,EACd,GAAIlM,OAAOqM,eAAeC,KAAKJ,EAAeE,GAAM,CAChD,IAAMhB,EAAQc,EAAcE,GACtBhB,IACFe,EAAoBC,GAAOhB,GAIvC,IAAMmB,EAAQC,IAAYC,UAAUN,GAC9BlO,EAAG,UAAM8N,EAAN,qBAAmCjC,EAAnC,YAAiDyC,GAC1D,OAAOpO,IAAMK,IAAIP,IAErByO,sBAAuB,SAAC5C,EAAY6C,EAAWC,GAC3C,IAAM3O,EAAG,UAAM8N,EAAN,wCAAsDjC,EAAtD,YAAoE6C,EAApE,YAAiFC,GAC1F,OAAOzO,IAAMK,IAAIP,IAGrB4O,0BAA2B,SAAC/C,EAAY6C,GACpC,IAAM1O,EAAG,UAAM8N,EAAN,0BAAwCjC,EAAxC,YAAsD6C,GAC/D,OAAOxO,IAAMK,IAAIP,IAErB6O,iBAAkB,SAACC,EAAOC,GACtB,IAAM/O,EAAG,UAAM8N,EAAN,aACT,OAAO5N,IAAMC,KAAKH,EAAK8O,GAAOnM,MAAK,SAAAqM,GAC/B,IAAQvO,EAAOuO,EAAPvO,GACR,OAAOsN,EAAakB,cAAcxO,EAAIsO,OAG9CE,cAAe,SAACC,EAAYH,GACxB,IAAM/O,EAAG,UAAM8N,EAAN,2BAAyCoB,GAClD,OAAOhP,IAAMC,KAAKH,EAAK,CAAE+O,aAG7BI,oBAAqB,SAACtD,EAAY6C,EAAWC,EAAMS,GAC/C,IAAMd,EAAQ,GACd,IAAK,IAAMH,KAAOiB,EACd,GAAIrN,OAAOqM,eAAeC,KAAKe,EAAUjB,GAAM,CAC3C,IAAMhB,EAAQiC,EAASjB,GACjBhB,IAASmB,EAAMH,GAAOhB,GAGpC,IAAMnN,EAAG,UAAM8N,EAAN,oBAAkCjC,EAAlC,YAAgD6C,EAAhD,YAA6DC,EAA7D,YAAqEJ,IAAYC,UAAUF,IACpG,OAAOpO,IAAMK,IAAIP,IAGrBqP,iBAAkB,SAACxD,EAAY6C,EAAWC,GACtC,IAAM3O,EAAG,UAAM8N,EAAN,uBACT,OAAO5N,IAAMS,IAAIX,EAAK,CAAE6L,aAAY6C,YAAWC,OAAMW,OAAQ5B,EAAeE,eAEhF2B,iBAAkB,SAAC1D,EAAY6C,EAAWC,GACtC,IAAM3O,EAAG,UAAM8N,EAAN,uBACT,OAAO5N,IAAMS,IAAIX,EAAK,CAAE6L,aAAY6C,YAAWC,OAAMW,OAAQ5B,EAAeG,aAGhF2B,sBAAuB,SAACN,GACpB,IAAMlP,EAAG,UAAM8N,EAAN,wBAAsCoB,GAC/C,OAAOhP,IAAMK,IAAIP,IAErByP,eAAgB,SAACC,EAAUX,GACvB,IAAM/O,EAAG,UAAM8N,EAAN,mBAAiC4B,EAASjP,IACnD,OAAOP,IAAMS,IAAIX,EAAK,CAAE0P,SAAS,2BAAMA,GAAP,IAAiBjP,GAAI,OAAQsO,aAEjEY,eAAgB,SAAClP,GACb,IAAMT,EAAG,UAAM8N,EAAN,YAA0BrN,GACnC,OAAOP,IAAMW,OAAOb,KAIb+N,IC3ET6B,GAAe,UAAMnQ,IAAN,aAQNoQ,GAPM,CACjBC,eAAgB,WACZ,IAAM9P,EAAG,UAAM4P,IACf,OAAO1P,IAAMK,IAAIP,GAAK2C,MAAK,SAAAoN,GAAQ,OAAIA,KAAU,SAAA3M,GAAC,OAAIA,O,oCCSxD4M,GAA4B,CAAC,OAAQ,UAAW,iBAAkB,SAAU,WAElF,SAASC,GAAT,GAAwE,IAAzCC,EAAwC,EAAxCA,MAAOtJ,EAAiC,EAAjCA,QAAS7B,EAAwB,EAAxBA,KAAMa,EAAkB,EAAlBA,eAEjD,EAAgCsE,mBAAS,CAAEzJ,GAAI,GAAIsM,KAAM,GAAIF,QAAS,KAAtE,mBAAOP,EAAP,KAAiB6D,EAAjB,KAEA,EAA4CjG,mBAAS,IAArD,mBAAOkG,EAAP,KAAuBC,EAAvB,KACA,EAAgCnG,mBAAS,IAAzC,mBAAO6F,EAAP,KAAiBO,EAAjB,KACA,EAA0BpG,mBAAS,IAAnC,mBAAOqG,EAAP,KAAcC,EAAd,KAGA,EAA0DtG,mBAAS,CAC/DwE,UAAW,GACXC,MAAM,IAAIjR,MAAO+S,gBAFrB,mBAAOC,EAAP,KAA8BC,EAA9B,KAMA,EAAgDzG,mBAAS,CACrD6F,SAAU,CAAC,CAAEtP,GAAI,GAAIsM,KAAM,qBAC3BwD,MAAO,CAAC,CAAE9P,GAAI,EAAGsM,KAAM,kBACvB6D,SAAU,CAAC,CAAEnQ,GAAI,GAAIsM,KAAM,uBAH/B,mBAAO8D,EAAP,KAAyBC,EAAzB,KAKA,EAA0C5G,mBAAS,CAC/CwE,UAAW,GACXC,KAAM,EACNW,OAAQ,KAHZ,oBAAOrB,GAAP,MAAsB8C,GAAtB,MAOA,GAA0D7G,mBAAS,MAAnE,qBAAO8G,GAAP,MAA8BC,GAA9B,MACA,GAAgE/G,oBAAS,GAAzE,qBAAOgH,GAAP,MAAiCC,GAAjC,MAGA,GAAsCjH,oBAAU,GAAhD,qBAAOkH,GAAP,MAAoBC,GAApB,MACA,GAAwDnH,oBAAS,GAAjE,qBAAOoH,GAAP,MAA6BC,GAA7B,MACA,GAAwCrH,mBAAS,MAAjD,qBAAOsH,GAAP,MAAqBC,GAArB,MACA,GAA0DvH,oBAAS,GAAnE,qBAAOwH,GAAP,MAA8BC,GAA9B,MACA,GAA0CzH,mBAAS,MAAnD,qBAAO0H,GAAP,MAAsBC,GAAtB,MAGA,GAAkC3H,mBAAS,GAA3C,qBAAO4H,GAAP,MAAkBC,GAAlB,MACA,GAA0B7H,mBAAS,CAAE8H,WAAY,EAAGC,YAAa,IAAjE,qBAAOC,GAAP,MAAcC,GAAd,MAGA,GAAwEjI,oBAAS,GAAjF,qBAAOkI,GAAP,MAAqCC,GAArC,MACA,GAAwDnI,mBAAS,MAAjE,qBAAOoI,GAAP,MAA6BC,GAA7B,MACA,GAA0FrI,oBAAS,GAAnG,qBAAOsI,GAAP,MAA8CC,GAA9C,MACA,GAA0EvI,mBAAS,MAAnF,qBAAOwI,GAAP,MAAsCC,GAAtC,MAGA,GAAkCzI,oBAAS,GAA3C,qBAAO+B,GAAP,MAAkBC,GAAlB,MAEA3B,qBAAU,WACN,IAAQsB,EAAeqE,EAAM0C,OAArB/G,WACRM,EAAYP,gBAAgBC,GAAYlJ,MAAK,SAAAkQ,GAAE,OAAI1C,EAAY0C,MAAK,SAAAzP,GAAC,OAAIgB,QAAQC,IAAIjB,MACrFyM,GAAYC,iBAAiBnN,MAAK,SAAAmQ,GAC9BxC,EAAYwC,GAEZ,IADA,IAAMC,EAAW,GACRC,EAAI,KAAMA,GAAI,IAAItV,MAAO+S,cAAeuC,IAC7CD,EAAS9F,KAAK+F,GAElBxC,EAASuC,GAETpC,EAAyB,2BAAKD,GAAN,IAA6BhC,UAAWoE,EAAY,GAAGrS,GAAIkO,KAAMoE,EAAS,MAGlG,IADA,IAAME,EAAc,CAAC,CAAExS,GAAI,GAAIsM,KAAM,qBACrC,MAAoBhL,OAAOC,OAAO0L,GAAlC,eAAmD,CAA9C,IAAMP,EAAK,KACZ8F,EAAYhG,KAAK,CAAExM,GAAI0M,EAAOJ,KAAM9P,OAAOkQ,GAAO+F,MAAM,KAAKC,KAAK,OAGtErC,EAAoB,CAChBf,SAAU,CAAC,CAAEtP,GAAI,GAAIsM,KAAM,qBAAsBqG,OAAON,EAAYjQ,KAAI,SAAAwQ,GAAO,MAAK,CAAE5S,GAAI4S,EAAQ5S,GAAIsM,KAAMsG,EAAQtG,UACpHwD,MAAO,CAAC,CAAE9P,GAAI,EAAGsM,KAAM,kBAAmBqG,OAAOL,EAASlQ,KAAI,SAAA8L,GAAI,MAAK,CAAElO,GAAIkO,EAAM5B,KAAK,GAAD,OAAK4B,QAC5FiC,SAAUqC,OAEf,SAAA7P,GACCgB,QAAQC,IAAIjB,QAEjB,IAEHmH,qBAAU,WACDuH,GAGDC,GAAa,GAFbuB,OAIL,CAACrF,KAEJ1D,qBAAU,WACN+I,OACD,CAACxB,KAEJ,IAAMyB,GAAuB,SAAC9S,GAC1B,IAAM4S,EAAUtD,EAASyD,MAAK,SAAAC,GAAC,OAAIA,EAAEhT,KAAOA,KAC5C,OAAI4S,EAAkBA,EAAQtG,KACvB,IAmCL2G,GAAmB,WACrB,IAAQ7H,EAAeqE,EAAM0C,OAArB/G,WACF8H,EAASvD,EAAegB,IACtB1C,EAAoBiF,EAApBjF,UAAWC,EAASgF,EAAThF,KACnB4C,IAAwB,GACxB3K,EAAQqG,KAAR,+BAAqCpB,EAArC,YAAmD6C,EAAnD,YAAgEC,KAe9DiF,GAAoC,SAACC,GACvCtB,GAAwBsB,EAAM7K,QAC9BqJ,IAAgC,IAiB9ByB,GAA6C,SAACD,GAChDlB,GAAiCkB,EAAM7K,QACvCyJ,IAAyC,IAiBvCsB,GAA4B,SAACC,EAAY1E,GAC3C,IAAM2E,EAAYC,KAAKC,MAAMD,KAAK1F,UAAU4B,IAC7B6D,EAAUD,GAClB1E,OAASA,EAChBe,EAAkB4D,IAkBhBG,GAAiC,SAACjH,EAAOkH,GAC3C1D,EAAyB,2BAAKD,GAAN,kBAA8B2D,EAAQlH,MAI5DmH,GAAwB,SAACnH,EAAOkH,GAClCtD,GAAiB,2BAAK9C,IAAN,kBAAsBoG,EAAQlH,MAE5CmG,GAA0B,WAC5B,IAAQzH,EAAeqE,EAAM0C,OAArB/G,WACRK,IAAa,GACb6B,EAAaC,mBAAmBnC,EAAhC,2BAAiDoC,IAAjD,IAAgE6D,gBAAanP,MAAK,SAAAwF,GAC9E,IAAQoM,EAA0BpM,EAA1BoM,MAAOnE,EAAmBjI,EAAnBiI,eACf+B,GAAS,CACLF,YAAasC,EACbvC,WAAYwC,KAAKC,KAAKF,EAAQ,MAElClE,EAAkBD,GAClBlE,IAAa,MACd,SAAA9I,GACCgB,QAAQC,IAAIjB,GACZ8I,IAAa,OA8BrB,OAAQ,eAACG,EAAA,EAAD,CAAWzC,UAAU,OAArB,UACJ,cAACgB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACmC,EAAA,EAAD,CAAQnD,QAAQ,OAAOE,QAAS,kBAAMnD,EAAQ8N,UAA9C,SACI,sBAAM9K,UAAU,KAAhB,wBAIZ,cAACgB,EAAA,EAAD,CAAKhB,UAAU,OAAf,SACI,cAACiB,EAAA,EAAD,UACI,oBAAIjB,UAAU,2BAAd,8BAGR,eAACgB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAK2B,GAAI,GAAT,SACI,kDAEJ,cAAC3B,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,cAAC,EAAD,CAAcvD,MAAM,OAAOlH,OAAQ6O,EAAiBN,MAAOpD,MAAOc,GAAcU,KAAMvB,SAAU,SAAChK,GAAD,OAAOkR,GAAsBK,SAASvR,EAAE4F,OAAOmE,OAAQ,aAE3J,cAACtC,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,cAAC,EAAD,CAAcvD,MAAM,UAAUlH,OAAQ6O,EAAiBd,SAAU5C,MAAOc,GAAcS,UAAWtB,SAAU,SAAChK,GAAD,OAAOkR,GAAsBlR,EAAE4F,OAAOmE,MAAO,kBAE5J,cAACtC,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,cAAC,EAAD,CAAcvD,MAAM,SAASlH,OAAQ6O,EAAiBD,SAAUzD,MAAOc,GAAcqB,OAAQlC,SAAU,SAAChK,GAAD,OAAOkR,GAAsBlR,EAAE4F,OAAOmE,MAAO,kBAG5J,eAACvC,EAAA,EAAD,CAAKhB,UAAU,qBAAf,UACI,cAACgL,EAAA,EAAD,CAAOhI,IAAKN,EAASO,QAASxB,MAAO,CAAEwJ,OAAQ,IAAMjL,UAAU,gBAAgBkL,SAAO,IACtF,oBAAIlL,UAAU,gBAAd,SAA+B0C,EAASS,OACvCd,GACG,cAAC,EAAD,IACA,cAAC,IAAD,CAAiBrC,UAAU,uDAAuDmL,KAAMC,IAAQjL,QAAS,SAAC3G,GAAD,OA1DjHyO,GA0D6IzO,EA1DtH4F,QACvB2I,IAAyB,QACzBJ,IAAwB,IAwDyHzH,KAAK,UAGtJ,cAACc,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKjB,UAAU,aAAf,SACI,qBAAIA,UAAU,UAAd,cAA0BsI,GAAMD,YAAhC,yBAGNhG,IAAamE,EAAe6E,OAAS,EACnC,oBAAIrL,UAAU,cAAd,gCACA,eAACsL,EAAA,EAAD,CAAOC,YAAU,EAACC,UAAQ,EAA1B,UACI,gCAAO,6BACFpF,GAA0BnN,KAAI,SAACwS,EAAYC,GAAb,OAAoB,6BAAcD,GAALC,UAEhE,gCACKlF,EAAevN,KAAI,SAAC8Q,EAAQ4B,GAAT,OAAiB,+BACjC,oBAAIlK,MAAO,CAAEmK,MAAO,KAApB,SAA4B7B,EAAOhF,OACnC,6BAAK4E,GAAqBI,EAAOjF,aACjC,oBAAIrD,MAAO,CAAEmK,MAAO,KAApB,SAA4B7B,EAAOY,QACnC,oBAAIlJ,MAAO,CAAEmK,MAAO,KAApB,SACI,sBAAM5L,UAAU,kBAAhB,SAAmC3M,OAAO0W,EAAOrE,QAAQ4D,MAAM,KAAKC,KAAK,KAAK/V,kBAElF,oBAAIiO,MAAO,CAAEmK,MAAO,KAApB,SACI,cAAC,IAAD,CAAiB5L,UAAU,iBAAiBmL,KAAMU,IAAQ1L,QAAS,SAAC3G,GAAD,OAzN/D,SAACyQ,EAAO6B,GAChCrE,GAAeqE,GACfjE,GAAgBoC,EAAM7K,QACtB,IAAI2M,EAAaC,YAAW,WACxBC,aAAaF,GACbpE,IAAwB,GACxBI,IAAyB,KAC1B,KAkN2FmE,CAAoB1S,EAAGmS,IAAMzL,KAAK,WARtEyL,WAc1D,cAAC3K,EAAA,EAAD,CAAKhB,UAAU,sBAAf,SACI,cAACiB,EAAA,EAAD,UACI,eAACkL,EAAA,EAAD,CAAYnM,UAAU,cAAtB,UACI,cAACmM,EAAA,EAAWC,MAAZ,CAAkBC,SAAUnE,IAAa,EAAG/H,QAAS,kBAAMgI,GAAa,MACxE,cAACgE,EAAA,EAAWG,KAAZ,CAAiBD,SAAUnE,IAAa,EAAG/H,QAAS,kBAAMgI,GAAaD,GAAY,MACnF,cAACiE,EAAA,EAAWI,KAAZ,CAAiBC,QAAM,EAAvB,SAAyBtE,GAAY,IACrC,cAACiE,EAAA,EAAWM,KAAZ,CAAiBJ,SAAUnE,IAAaI,GAAMF,WAAa,EAAGjI,QAAS,kBAAMgI,GAAaD,GAAY,MACtG,cAACiE,EAAA,EAAWO,KAAZ,CAAiBL,SAAUnE,IAAaI,GAAMF,WAAa,EAAGjI,QAAS,kBAAMgI,GAAaG,GAAMF,WAAa,aAKvHhB,GACE,eAACuF,EAAA,EAAD,CAAOlN,KAAM6H,GAA0B5H,OAAQ,kBAAM6H,IAA4B,IAC7EqF,SAAS,SAASC,UAAU,EAAOC,kBAAgB,gCAAgCC,UAAQ,EAD/F,UAEI,cAACJ,EAAA,EAAMK,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACN,EAAA,EAAM9M,MAAP,mCAEJ,eAAC8M,EAAA,EAAMzJ,KAAP,WACI,eAACgK,EAAA,EAAD,CAAYlN,UAAU,OAAtB,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,eAApB,oBAEJ,cAACwW,EAAA,EAAD,CAAahB,UAAQ,EAACiB,YAAY,OAAOC,aAAW,OAAOC,mBAAiB,eAAejK,MAAO6D,GAAsBrC,UAE5H,eAACmI,EAAA,EAAD,CAAYlN,UAAU,OAAtB,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,kBAApB,uBAEJ,cAACwW,EAAA,EAAD,CAAahB,UAAQ,EAACiB,YAAY,UAAUC,aAAW,UAAUC,mBAAiB,kBAAkBjK,MAAO6D,GAAsBqG,iBAErI,eAACP,EAAA,EAAD,CAAYlN,UAAU,OAAtB,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,iBAApB,sBAEJ,cAACwW,EAAA,EAAD,CAAahB,UAAQ,EAACiB,YAAY,SAASC,aAAW,SAASC,mBAAiB,iBAAiBjK,MAAO6D,GAAsB1B,YAElI,eAACwH,EAAA,EAAD,CAAYlN,UAAU,OAAtB,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,iBAApB,8BAEJ,cAACwW,EAAA,EAAD,CAAahB,UAAQ,EAACiB,YAAY,iBAAiBC,aAAW,iBAAiBC,mBAAiB,iBAAiBjK,MAAO6D,GAAsBuD,WAElJ,eAACuC,EAAA,EAAD,CAAYlN,UAAU,OAAtB,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,qBAApB,0BAEJ,cAACwW,EAAA,EAAD,CAAahB,UAAQ,EAACiB,YAAY,aAAaC,aAAW,aAAaC,mBAAiB,qBAAqBjK,MAAO6D,GAAsBsG,eAE9I,eAACR,EAAA,EAAD,CAAYlN,UAAU,OAAtB,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,qBAApB,0BAEJ,cAACwW,EAAA,EAAD,CAAahB,UAAQ,EAACiB,YAAY,aAAaC,aAAW,aAAaC,mBAAiB,qBAAqBjK,MAAO6D,GAAsBuG,eAE9I,eAACT,EAAA,EAAD,CAAYlN,UAAU,OAAtB,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,2BAApB,+BAEJ,cAACwW,EAAA,EAAD,CAAahB,UAAQ,EAACiB,YAAY,kBAAkBC,aAAW,kBAAkBC,mBAAiB,2BAA2BjK,MAAO6D,GAAsBwG,oBAE9J,eAACV,EAAA,EAAD,CAAYlN,UAAU,OAAtB,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,2BAApB,gCAEJ,cAACwW,EAAA,EAAD,CAAahB,UAAQ,EAACiB,YAAY,mBAAmBC,aAAW,mBAAmBC,mBAAiB,2BAA2BjK,MAAO6D,GAAsByG,uBAGpK,cAAClB,EAAA,EAAMmB,OAAP,UACI,cAAC1K,EAAA,EAAD,CAAQnD,QAAQ,YAAYE,QAAS,kBAAMoH,IAA4B,IAAvE,wBAzDc,KA6D1B,cAACwG,EAAA,EAAD,CAAStO,KAAMiI,GAAsBtI,OAAQwI,GAAcpI,UAAU,OAAOE,OAAQ,kBAAMiI,IAAwB,IAAQhI,iBAAkB,GAAIC,WAAS,EAAzJ,SACI,eAACoO,EAAA,EAAD,CAASvM,MAAO,CAAEwM,SAAU,KAA5B,UACI,cAACD,EAAA,EAAQnO,MAAT,CAAeC,GAAG,KAAKE,UAAU,MAAjC,qBACA,eAACgO,EAAA,EAAQjO,QAAT,WACI,cAACqD,EAAA,EAAD,CAAQpD,UAAU,OAAOC,QAAQ,OAAOC,KAAK,KAAKC,QAjSlC,WAC5B,IAAQ8B,EAAeqE,EAAM0C,OAArB/G,WACF8H,EAASvD,EAAegB,IAE9B,GADAG,IAAwB,GACpBoC,EAAOY,MAAQ,EACf3O,EAAe,OAAQ,sCAAuCnE,KAAYI,UAD9E,CAIA,IAAMwR,EAAUtD,EAASyD,MAAK,SAAAH,GAAO,OAAIA,EAAQ5S,KAAOkT,EAAOjF,aAC/DX,EAAaU,sBAAsB5C,EAAY8H,EAAOjF,UAAWiF,EAAOhF,MAAMhM,MAAK,SAAAmV,GAC/E,IAAQC,EAA8CD,EAA9CC,kBAAmBC,EAA2BF,EAA3BE,uBAC3B/G,GAAyBlP,OAAOkW,OAAO,CACnCV,UAAWQ,EACXN,eAAgBO,EAChBX,YAAahE,EAAQtG,MACtB4G,IACHxC,IAA4B,MAC7B,SAAA/N,GAAC,OAAIgB,QAAQC,IAAIjB,QAgRR,qCArJyB,WACrC,IAAMuQ,EAASvD,EAAegB,IAC9B,OAAKuC,GACDA,EAAOrE,SAAW5B,EAAeG,UAC1B,cAACb,EAAA,EAAD,CAAQpD,UAAU,OAAOC,QAAQ,OAAOC,KAAK,KAAKC,QAAS2J,GAA3D,8BAFW,KAsJTwE,GACD,cAAClL,EAAA,EAAD,CAAQpD,UAAU,OAAOC,QAAQ,OAAOC,KAAK,KAAKC,QAzQvC,WACvB,IAAQ8B,EAAeqE,EAAM0C,OAArB/G,WACF8H,EAASvD,EAAegB,IACtB1C,EAAoBiF,EAApBjF,UAAWC,EAASgF,EAAThF,KACnB4C,IAAwB,GACpBoC,EAAOY,MAAQ,EACf3O,EAAe,OAAQ,wBAAyBnE,KAAYI,MAGhE+E,EAAQqG,KAAR,gCAAsCpB,EAAtC,YAAoD6C,EAApD,YAAiEC,KAgQrD,gCAnKyB,WACrC,IAAMgF,EAASvD,EAAegB,IAC9B,OAAKuC,EACDA,EAAOrE,SAAW5B,EAAeE,aAAe7I,EAAKW,OAASS,KAASC,WAChE,cAAC4G,EAAA,EAAD,CAAQpD,UAAU,OAAOC,QAAQ,OAAOC,KAAK,KAAKmM,SAAUlR,EAAKW,OAASS,KAASC,WAAY2D,QAAS6J,GAAxG,+BACAD,EAAOrE,SAAW5B,EAAeC,MACjC,cAACX,EAAA,EAAD,CAAQpD,UAAU,OAAOC,QAAQ,OAAOC,KAAK,KAAKC,QAAS+J,GAA3D,gCAEJ,KANe,KAoKTqE,WAKb,cAACR,EAAA,EAAD,CAAStO,KAAMqI,GAAuB1I,OAAQ4I,GAAexI,UAAU,OAAOE,OAAQ,kBAAMqI,IAAyB,IAAQpI,iBAAkB,GAAIC,WAAS,EAA5J,SACI,eAACoO,EAAA,EAAD,CAASvM,MAAO,CAAEwM,SAAU,KAA5B,UACI,cAACD,EAAA,EAAQnO,MAAT,CAAeC,GAAG,KAAKE,UAAU,MAAjC,6BACA,eAACgO,EAAA,EAAQjO,QAAT,WACI,cAAC,EAAD,CAAcT,MAAM,OAAOlH,OAAQuO,EAAOpD,MAAOuD,EAAsB/B,KAAMvB,SAAU,SAAAhK,GAAC,OAAIgR,GAA+BO,SAASvR,EAAE4F,OAAOmE,OAAQ,WACrJ,cAAC,EAAD,CAAcjE,MAAM,UAAUlH,OAAQ+N,EAAU5C,MAAOuD,EAAsBhC,UAAWtB,SAAU,SAAAhK,GAAC,OAAIgR,GAA+BhR,EAAE4F,OAAOmE,MAAO,gBACtJ,qBAAKvD,UAAU,6BAAf,SACI,cAACoD,EAAA,EAAD,CAAQlD,KAAK,KAAKF,UAAU,OAAOG,QA9NzB,WAC1B,IAAM2L,EAAQtF,EAAegI,WAAU,SAAAzE,GAAM,OAAIA,EAAOhF,OAAS+B,EAAsB/B,MAAQgF,EAAOjF,YAAcgC,EAAsBhC,aAC1IiD,IAAyB,GACrB+D,GAAS,EACT9P,EAAe,QAAS,uCAAwCnE,KAAYE,SAGhF0O,EAAkBD,EAAegD,OAAO,CAAC,CACrCmB,MAAO,EACP7F,UAAWgC,EAAsBhC,UACjCC,KAAM+B,EAAsB/B,KAC5BW,OAAQ5B,EAAeC,WAmNX,sCAMhB,cAAC,KAAD,CAAgB5E,QAASqJ,GAA8BpJ,OAAQsJ,GAAsBrJ,cAAeoJ,GAChGnJ,MAAM,qCAAqCC,UA/QpB,WAC3BkJ,IAAgC,GAChC,IAAQxG,EAAeqE,EAAM0C,OAArB/G,WACF8H,EAASvD,EAAegB,IAC9BG,IAAwB,GACpBoC,EAAOY,MAAQ,EACf3O,EAAe,OAAQ,sBAAuBnE,KAAYI,MAG9DkM,EAAawB,iBAAiB1D,EAAY8H,EAAOjF,UAAWiF,EAAOhF,MAAMhM,MAAK,SAAAmV,GAC1E/D,GAA0B3C,GAAa1D,EAAeG,WACtDjI,EAAe,UAAW,wCAAyCnE,KAAYG,YAChF,SAAAwB,GAAC,OAAIwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,cAqQ9E,cAAC,KAAD,CAAgBqH,QAASyJ,GAAuCxJ,OAAQ0J,GACpEzJ,cAAewJ,GAA0CvJ,MAAM,0DAA0DC,UA/PzF,WACpCsJ,IAAyC,GACzC,IAAQ5G,EAAeqE,EAAM0C,OAArB/G,WACF8H,EAASvD,EAAegB,IAC9BG,IAAwB,GACpBoC,EAAOY,MAAQ,EACf3O,EAAe,OAAQ,qBAAsBnE,KAAYI,MAG7DkM,EAAasB,iBAAiBxD,EAAY8H,EAAOjF,UAAWiF,EAAOhF,MAAMhM,MAAK,SAAAmV,GAC1E/D,GAA0B3C,GAAa1D,EAAeE,aACtDhI,EAAe,UAAW,2CAA4CnE,KAAYG,YACnF,SAAAwB,GAAC,OAAIwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,iBAyPtFuO,GAAoBjG,aAAe,GAEpBgB,mBAAWpG,aAAYoB,aAAciK,M,6BCjc9CqI,GAAgB,UAAM7Y,IAAN,eAQP8Y,GAPO,CAClBC,aAAc,SAACC,GACX,IAAMzY,EAAG,UAAMsY,GAAN,YAA0BG,GACnC,OAAOvY,IAAMK,IAAIP,GAAK2C,MAAK,SAAA+V,GAAS,OAAIA,KAAW,SAAAtV,GAAC,OAAIA,OCKjDuV,GATG,CACdC,WAAY,SAAA/Y,GACR,IAAMG,EAAG,UAAMP,IAAN,mBACHoZ,EAAO,IAAI9Y,SAEjB,OADA8Y,EAAK5Y,OAAO,OAAQJ,GACbK,IAAMC,KAAKH,EAAK6Y,GAAMlW,MAAK,SAAAmW,GAAG,gBAAO5U,IAAP,YAA0B4U,EAAI9Y,U,UCH9D+Y,GAAe,SAAC,GAAwD,IAAtD5L,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,SAAqB4L,GAAyB,EAApCpP,UAAoC,EAAzBoP,UAAUC,EAAe,EAAfA,SAYjE,OAAQ,eAAC,WAAD,WAPAD,EACO,cAAC3L,EAAA,EAAKG,QAAN,CAAc9D,GAAG,WAAWyD,MAAOA,EAAOC,SAAU,SAAAhK,GAAC,OAAIgK,EAAShK,EAAE4F,OAAOmE,UAC1E8L,OAAL,EACI,+BAAO9L,IAMjB8L,EAAS,cAAC,KAAD,CAAeC,IAAK/L,EAAOgM,QAAS,SAACC,GAAD,OAbjCnU,EAakDmU,OAbtChV,QAAQC,IAAIY,GAAzB,IAACA,GAawDoU,UAAW,eAAsB,SAW9GN,GAAa/O,aAAe,CACxBJ,UAAW,GACXuD,MAAO,GACPC,SAAU,aACV4L,UAAU,EACVC,UAAU,GCzBP,IAAMK,GAAgB,SAAC,GAAiC,IAA/BtR,EAA8B,EAA9BA,QAASI,EAAqB,EAArBA,KAAMgF,EAAe,EAAfA,SACrCmM,EAAmB,SAACpM,EAAOqM,EAAUC,GACvC,IAAMC,EAAUxF,KAAKC,MAAMD,KAAK1F,UAAUpG,IAC1CsR,EAAQF,GAAUC,GAAYtM,EAC9BC,EAAS,CAAEuM,QAASD,EAAS7S,KAAM,UAGjC+S,EAAqB,SAACzM,EAAOsM,GAC/B,IAAMI,EAAY3F,KAAKC,MAAMD,KAAK1F,UAAUxG,IAC5C6R,EAAUJ,GAAYtM,EACtBC,EAAS,CAAEuM,QAASE,EAAWhT,KAAM,YAGzC,OACI,eAACqO,EAAA,EAAD,CAAOC,YAAU,EAACC,UAAQ,EAA1B,UACI,gCAAO,6BACFpN,EAAQnF,KAAI,SAACwS,EAAYC,GAAb,OAAoB,6BAC7B,cAACjI,EAAA,EAAKG,QAAN,CAAc3D,QAAQ,OAAOhD,KAAK,OAAOsG,MAAOkI,EAAYjI,SAAU,SAAAhK,GAAC,OAAIwW,EAAmBxW,EAAE4F,OAAOmE,MAAOmI,OADxEA,UAI9C,gCACKlN,EAAKvF,KAAI,SAACiX,EAAKC,GAAN,OAAa,6BAAcD,EAAIjX,KAAI,SAACmX,EAAMC,GAAP,OAAc,6BACvD,cAAC5M,EAAA,EAAKG,QAAN,CAAc3G,KAAK,OAAOsG,MAAO6M,EAAM5M,SAAU,SAAAhK,GAAC,OAAImW,EAAiBnW,EAAE4F,OAAOmE,MAAO4M,EAAIE,OAD3BA,OAApCF,YAQnCG,GAAc,SAAC,GAA6D,IAA3DlS,EAA0D,EAA1DA,QAASI,EAAiD,EAAjDA,KAAM+M,EAA2C,EAA3CA,WAAYgF,EAA+B,EAA/BA,QAAS/E,EAAsB,EAAtBA,SAAUgF,EAAY,EAAZA,MACxE,OACI,eAAClF,EAAA,EAAD,CAAOC,WAAYA,EAAYgF,QAASA,EAAS/E,SAAUA,EAAUgF,MAAOA,EAA5E,UACI,gCAAO,6BACFpS,EAAQnF,KAAI,SAACwS,EAAYC,GAAb,OAAoB,6BAAa,cAAC,GAAD,CAAcnI,MAAOkI,EAAY4D,UAAQ,KAA7C3D,UAE9C,gCACKlN,EAAKvF,KAAI,SAACiX,EAAKC,GAAN,OAAa,6BAAcD,EAAIjX,KAAI,SAACmX,EAAMC,GAAP,OAAc,6BAAa,cAAC,GAAD,CAAc9M,MAAO6M,EAAMf,UAAQ,KAAvCgB,OAApCF,YAchDG,GAAYlQ,aAAe,CACvBhC,QAAS,GACTI,KAAM,GACN+M,YAAY,EACZgF,SAAS,EACT/E,UAAU,EACVgF,OAAO,GAGJ,IAAMC,GAAc,SAAC,GAAiC,IAA/BrS,EAA8B,EAA9BA,QAASI,EAAqB,EAArBA,KAAMgF,EAAe,EAAfA,SACzC,EAAsClD,mBAAS,CAAEoQ,KAAM,EAAGC,QAAS,IAAnE,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,EAA4DvQ,oBAAS,GAArE,mBAAOwQ,EAAP,KAA+BC,EAA/B,KACA,EAA4CzQ,mBAAS,MAArD,mBAAO0Q,EAAP,KAAuBC,EAAvB,KACA,EAA0C3Q,oBAAU,GAApD,mBAAO4Q,EAAP,KAAsBC,EAAtB,KAEMC,EAAsB,SAAC7N,EAAOkH,GAChCoG,EAAe,2BAAKD,GAAN,kBAAoBnG,EAAQlH,MA0E9C,OAAQ,eAAC+H,EAAA,EAAD,CAAOC,YAAU,EAACC,UAAQ,EAA1B,UACJ,gCAAO,6BACFpN,EAAQnF,KAAI,SAACwS,EAAYC,GAAb,OAAoB,6BAAcD,GAALC,UAE9C,gCACKlN,EAAKvF,KAAI,SAACiX,EAAKC,GAAN,OAAa,+BACnB,oBAAIvE,MAAO,GAAX,SACI,cAACnI,EAAA,EAAK4N,MAAN,CAAYrR,UAAU,8CAA8C/C,KAAK,WACrEqU,QAASpB,EAAIqB,QAAS/N,SAAU,SAAAhK,GAAC,OAAIgK,EAAShK,EAAE4F,OAAOkS,QAASnB,EAAI,gBAE5E,+BACI,cAAC1M,EAAA,EAAKG,QAAN,CAAc3G,KAAK,OAAOqQ,YAAY,eAAe/J,MAAO2M,EAAIsB,OAAQxR,UAAU,OAC9EwD,SAAU,SAAAhK,GAAC,OAAIgK,EAAShK,EAAE4F,OAAOmE,MAAO4M,EAAI,aAC9CD,EAAIuB,MAAe,eAAC,WAAD,WACjB,cAACzG,EAAA,EAAD,CAAOhI,IAAKkN,EAAIuB,MAAOvG,SAAO,EAACzJ,MAAO,CAAEwJ,OAAQ,IAAKgD,SAAU,QAAUjO,UAAU,SACnF,cAAC,IAAD,CAAiBA,UAAU,6BAA6BE,KAAK,KAAKiL,KAAMuG,IACpEjQ,MAAO,CAAEkQ,YAAa,GAAIC,aAAc,IAAMzR,QAAS,kBAAMqD,EAAS,KAAM2M,EAAI,sBAH1E,KAKd,cAAC,GAAD,CAAe/R,QAAS8R,EAAI2B,aAAcrT,KAAM0R,EAAI4B,UAAWtO,SAAU,SAAAuO,GAAC,OA3C9D,SAAC,GAAoC,IAAlChC,EAAiC,EAAjCA,QAAS9S,EAAwB,EAAxBA,KAAM+U,EAAkB,EAAlBA,YAC1C,OAAQ/U,GACJ,IAAK,SACDuG,EAAS,CAAEqO,aAAc9B,GAAWiC,EAAa,SACjD,MACJ,IAAK,OACDxO,EAAS,CAAEsO,UAAW/B,GAAWiC,EAAa,UAqCoCC,CAAoB,2BAAKF,GAAN,IAASC,YAAa7B,WAE3H,qBAAIvE,MAAO,IAAX,UACI,cAAC,IAAD,CAAiB5L,UAAU,8BAA8BE,KAAK,KAAKiL,KAAM+G,IAAS/R,QAAS,kBAAMqD,EAAS,KAAM2M,EAAI,mBACpH,cAAC,IAAD,CAAiBnQ,UAAU,gCAAgCE,KAAK,KAAKiL,KAAMgH,IAAShS,QAAS,SAAC3G,GAAD,OAlC/E,SAACyQ,EAAO6B,GAClCqF,EAAiBrF,GACjBmF,EAAkBhH,EAAM7K,QACxB,IAAMgT,EAAa5T,EAAKsN,GAAO+F,aAAaxG,OACtCgH,EAAU7T,EAAKsN,GAAOgG,UAAUzG,OAAS,EAC/CwF,EAAe,CAAEF,QAASyB,EAAY1B,KAAM2B,EAAU,EAAIA,EAAU,IACpE,IAAIC,EAAatG,YAAW,WACxBC,aAAaqG,GACbvB,GAA0B,KAC3B,KAyB6GwB,CAAsB/Y,EAAG2W,MAC7H,cAAC,IAAD,CAAiBnQ,UAAU,kCAAkCE,KAAK,KAAKiL,KAAMqH,IAASrS,QAAS,kBAAMqD,EAAS,KAAM2M,EAAI,kBAlBhGA,QAsBpC,cAACpC,EAAA,EAAD,CAAStO,KAAMqR,EAAwB1R,OAAQ4R,EAAgBxR,UAAU,OAAOE,OAAQ,kBAAMqR,GAA0B,IAAQpR,iBAAkB,GAAIC,WAAS,EAA/J,SACI,eAACoO,EAAA,EAAD,CAASvM,MAAO,CAAEwM,SAAU,KAA5B,UACI,cAACD,EAAA,EAAQnO,MAAT,CAAeC,GAAG,KAAKE,UAAU,MAAjC,4BACA,eAACgO,EAAA,EAAQjO,QAAT,WACI,eAACmN,EAAA,EAAD,CAAYhN,KAAK,KAAKF,UAAU,OAAhC,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,uBAApB,uBAEJ,cAACwW,EAAA,EAAD,CAAaE,aAAW,QAAQC,mBAAiB,uBAAuBjK,MAAOqN,EAAYD,QACvFnN,SAAU,SAAAhK,GAAC,OAAI4X,EAAoBrG,SAASvR,EAAE4F,OAAOmE,OAAQ,iBAErE,eAAC2J,EAAA,EAAD,CAAYhN,KAAK,KAAKF,UAAU,OAAhC,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,oBAApB,oBAEJ,cAACwW,EAAA,EAAD,CAAaE,aAAW,QAAQC,mBAAiB,oBAAoBjK,MAAOqN,EAAYF,KACpFlN,SAAU,SAAAhK,GAAC,OAAI4X,EAAoBrG,SAASvR,EAAE4F,OAAOmE,OAAQ,cAErE,qBAAKvD,UAAU,6BAAf,SACI,cAACoD,EAAA,EAAD,CAAQlD,KAAK,KAAKC,QArHhB,WAGlB,GAFA4Q,GAA0B,GAEtBH,EAAYD,QAAU,GAAKC,EAAYF,KAAO,EAC9ClN,EAAS,CACLqO,aAAc,GACdC,UAAW,IACZZ,EAAe,aAJtB,CAQA,IAAMuB,EAAkBnI,KAAKC,MAAMD,KAAK1F,UAAUpG,EAAK0S,GAAeW,cAAgB,KAChFa,EAAepI,KAAKC,MAAMD,KAAK1F,UAAUpG,EAAK0S,GAAeY,WAAa,KAChF,GAAIW,EAAgBpH,OAASuF,EAAYD,QACrC8B,EAAgBpH,OAASuF,EAAYD,aAErC,KAAO8B,EAAgBpH,OAASuF,EAAYD,SACxC8B,EAAgBpP,KAAK,IAI7B,GAAIqP,EAAarH,OAASuF,EAAYF,KAAO,EACzCgC,EAAarH,OAASuF,EAAYF,KAAO,OAEzC,KAAOgC,EAAarH,OAASuF,EAAYF,KAAO,GAC5CgC,EAAarP,KAAK,IAI1B,IAAK,IAAI+F,EAAI,EAAGA,EAAIsJ,EAAarH,OAAQjC,IAAK,CAC1C,IAAM8G,EAAMwC,EAAatJ,GACzB,GAAI8G,EAAI7E,OAASuF,EAAYD,QAAU,EACnCT,EAAI7E,OAASuF,EAAYD,aAG7B,KAAOT,EAAI7E,OAASuF,EAAYD,SAC5BT,EAAI7M,KAAK,IAIjBG,EAAS,CACLqO,aAAcY,EACdX,UAAWY,GACZxB,EAAe,WA0EF,0CA6BxBT,GAAYrQ,aAAe,CACvBhC,QAAS,GACTI,KAAM,GACNgF,SAAU,cCxNd,IAAMmP,GAAqB,CAAC,UAAW,SAAU,WAC3CC,GAAe,CACjB9M,SAAU,GACV+M,eAAgB,EAChBpB,MAAO,GACPI,aAAc,GACdC,UAAW,IAGf,SAASgB,GAAT,GAAgE,IAAnC9V,EAAkC,EAAlCA,QAASsJ,EAAyB,EAAzBA,MAAOtK,EAAkB,EAAlBA,eACzC,EAA4BsE,mBAAS,IAArC,mBAAOyS,EAAP,KAAeC,EAAf,KACA,EAAkC1S,mBAAS,IAA3C,mBAAOwO,EAAP,KAAkBmE,EAAlB,KACA,EAAwB3S,mBAAS,CAC7B2B,WAAY,GAAIiR,aAAc,GAC9BpO,UAAW,GAAI2I,YAAa,GAAI1I,KAAM,IAF1C,mBAAOoO,EAAP,KAAaC,EAAb,KAKA,EAA8B9S,mBAAS,IAAvC,mBAAOuO,EAAP,KAAgBwE,EAAhB,KACA,EAAoC/S,mBAAS,IAA7C,mBAAOgT,EAAP,KAAmBC,EAAnB,KAEMC,EAAYC,iBAAO,MACzB,EAAgCnT,mBAASsS,IAAzC,mBAAO9M,EAAP,KAAiB4N,EAAjB,KACA,EAA8BpT,mBAAS,IAAvC,mBAAO6E,EAAP,KAAgBwO,EAAhB,KAEA,EAA0CrT,mBAAS,MAAnD,mBAAOsT,GAAP,KAAsBC,GAAtB,KACA,GAAsCvT,mBAAS,CAAEoQ,KAAM,EAAGC,QAAS,IAAnE,qBAAOC,GAAP,MAAoBC,GAApB,MAGA,GAA4CvQ,mBAAS,MAArD,qBAAO0Q,GAAP,MAAuBC,GAAvB,MACA,GAA4D3Q,oBAAS,GAArE,qBAAOwQ,GAAP,MAA+BC,GAA/B,MAGA,GAA0EzQ,oBAAS,GAAnF,qBAAOwT,GAAP,MAAsCC,GAAtC,MACA,GAA0DzT,mBAAS,MAAnE,qBAAO0T,GAAP,MAA8BC,GAA9B,MACA,GAA8E3T,oBAAS,GAAvF,qBAAO4T,GAAP,MAAwCC,GAAxC,MACA,GAA8D7T,mBAAS,MAAvE,qBAAO8T,GAAP,MAAgCC,GAAhC,MAEA1T,qBAAU,WACN,MAAwC2F,EAAM0C,OAAtC/G,EAAR,EAAQA,WAAY6C,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,KAC/BZ,EAAaa,0BAA0B/C,EAAY6C,GAAW/L,MAAK,SAAAmV,GAC/D,IAAQgF,EAA8BhF,EAA9BgF,aAAczF,EAAgBS,EAAhBT,YACtB2F,EAAQ,CAAEF,eAAczF,cAAa1I,KAAMgG,SAAShG,GAAO9C,aAAY6C,cACvEkO,EAAU9E,EAAO6E,QACb7E,EAAO6E,OAAO1H,OAAS,GACvBgI,EAAWnF,EAAO6E,OAAO,GAAGlc,OAEjC,SAAA2C,GAAC,OAAIwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,aAC/E,IAEH6I,qBAAU,WACFkO,GACAF,GAAaC,aAAaC,GAAS9V,MAAK,SAAAub,GACpCrB,EAAaqB,GACbf,EAAce,EAAa,GAAGzd,OAC/B,SAAA2C,GAAC,OAAIwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,aAEnF,CAAC+W,IAEJ,IAAM0F,GAAmB,SAAChR,EAAOgB,GAAUmP,EAAY,2BAAK5N,GAAN,kBAAiBvB,EAAMhB,MACvEiR,GAAgB,SAAA1I,GAEd+H,GADA/H,EAAQ,EACS,WACK,UAAD,OAAWA,IACpC0H,EAAUiB,QAAQC,SAEhBC,GAAa,yCAAG,WAAMnb,GAAN,sBAAAob,EAAA,2DACApb,EAAE4F,OAAZyV,MACExJ,OAAS,GAFD,wBAGRpV,EAAOuD,EAAE4F,OAAOyV,MAAM,GAHd,SAIS9F,GAAUC,WAAW/Y,GAJ9B,UAIR6e,EAJQ,OAKTlB,GALS,iDAQVA,GAAcjb,SAAS,WACjBmT,EAAQf,SAAS6I,GAActK,MAAM,KAAK,KAC1CyL,EAAazK,KAAKC,MAAMD,KAAK1F,UAAUO,KAClC2G,GAAO2F,MAAQqD,EAC1BnB,EAAWoB,IAEXR,GAAiBO,EAAU,SAE/Btb,EAAE4F,OAAOmE,MAAQ,GAhBH,4CAAH,sDAmBbyR,GAA8B,SAACzR,EAAOgB,GAAUsM,GAAe,2BAAKD,IAAN,kBAAoBrM,EAAMhB,MAgExF0R,GAAqB,WAAQtB,EAAW,IAAKD,EAAYd,IAAeuB,IAAmC,IA4EjH,OAAQ,eAAC1R,EAAA,EAAD,CAAWzC,UAAU,OAArB,UACJ,cAACgB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACmC,EAAA,EAAD,CAAQnD,QAAQ,OAAOE,QAAS,kBAAMnD,EAAQ8N,UAA9C,SACI,sBAAM9K,UAAU,KAAhB,wBAIZ,cAACgB,EAAA,EAAD,CAAKhB,UAAU,OAAf,SACI,cAACiB,EAAA,EAAD,UACI,oBAAIjB,UAAU,2BAAd,oCAGR,eAACyD,EAAA,EAAD,WACI,eAACzC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,eAACY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,iDACZ,cAACF,EAAA,EAAKG,QAAN,CAAcyI,UAAQ,EAACpP,KAAK,OAAOqQ,YAAY,YAAY/J,MAAO4P,EAAKD,oBAG/E,cAACjS,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,eAACY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,+CACZ,cAACF,EAAA,EAAKG,QAAN,CAAcyI,UAAQ,EAACpP,KAAK,OAAOqQ,YAAY,UAAU/J,MAAO4P,EAAK1F,mBAG7E,cAACxM,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,eAACY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,4CACZ,cAACF,EAAA,EAAKG,QAAN,CAAcyI,UAAQ,EAACpP,KAAK,OAAOqQ,YAAY,OAAO/J,MAAO4P,EAAKpO,eAI9E,eAAC/D,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAK4B,GAAI,EAAT,SAAY,cAAC,EAAD,CAAcvD,MAAM,QAAQlH,OAAQ2a,EAAQxP,MAAOsL,EAASrL,SAAU,SAAAhK,GAAC,OAAI6Z,EAAW7Z,EAAE4F,OAAOmE,YAC3G,cAACtC,EAAA,EAAD,CAAK4B,GAAI,EAAT,SAAY,cAAC,EAAD,CAAcvD,MAAM,YAAYlH,OAAQ0W,EAAWvL,MAAO+P,EAAY9P,SAAU,SAAAhK,GAAC,OAAI+Z,EAAc/Z,EAAE4F,OAAOmE,kBAGhI,cAACvC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAK4B,GAAI,EAAGC,GAAI,EAAG9C,UAAU,UAA7B,SACI,eAACyD,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,uDACZ,cAACF,EAAA,EAAKG,QAAN,CAAc3G,KAAK,OAAOqQ,YAAY,wBAAwB/J,MAAOuC,EAAS+M,eAC1ErP,SAAU,SAAAhK,GAAC,OAAI+a,GAAiBxJ,SAASvR,EAAE4F,OAAOmE,OAAQ,4BAI1E,eAACvC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAK2B,GAAI,GAAI5C,UAAU,SAAvB,UACI,eAACyD,EAAA,EAAKC,MAAN,CAAY1D,UAAU,YAAtB,UACI,cAACyD,EAAA,EAAKE,MAAN,UAAY,gDACZ,cAACF,EAAA,EAAKG,QAAN,CAAc3G,KAAK,OAAO6C,GAAG,WAAW4Q,KAAM,EAAGpD,YAAY,iBAAiB/J,MAAOuC,EAASA,SAC1FtC,SAAU,SAAAhK,GAAC,OAAI+a,GAAiB/a,EAAE4F,OAAOmE,MAAO,kBAExD,sBAAKvD,UAAU,8CAAf,UACI,cAACyD,EAAA,EAAKC,MAAN,CAAY1D,UAAU,OAAtB,SACI,cAAC,IAAD,CAAiBA,UAAU,8BAA8BE,KAAK,KAAKiL,KAAM+G,IAAS/R,QAAS,kBAAMqU,IAAe,QAEpH,cAAC/Q,EAAA,EAAKC,MAAN,CAAY1D,UAAU,OAAtB,SACI,cAAC,IAAD,CAAiBA,UAAU,2BAA2BE,KAAK,KAAKiL,KAAMgH,IAAShS,QAAS,SAAC3G,GAAD,OAhH9E,SAACyQ,GAC3B,IAAMmI,EAAatM,EAAS+L,aAAaxG,OACnCgH,EAAUvM,EAASgM,UAAUzG,OAAS,EAC5CwF,GAAe,CAAEF,QAASyB,EAAY1B,KAAM2B,EAAU,EAAIA,EAAU,IACpEpB,GAAkBhH,EAAM7K,QACxB2R,IAA0B,GA2GqFwB,CAAsB/Y,cAK/HsM,EAAS2L,MAAe,eAACxQ,EAAA,EAAD,CAAK2B,GAAI,GAAT,UACtB,cAACoI,EAAA,EAAD,CAAOhI,IAAK8C,EAAS2L,MAAOvG,SAAO,EAACzJ,MAAO,CAAEwJ,OAAQ,IAAKgD,SAAU,QAAUjO,UAAU,wCACxF,cAAC,IAAD,CAAiBA,UAAU,6BAA6BE,KAAK,KAAKiL,KAAMuG,IACpEjQ,MAAO,CAAEkQ,YAAa,GAAIC,aAAc,IAAMzR,QAAS,kBAAMuT,EAAY,2BAAK5N,GAAN,IAAgB2L,MAAO,YAHpF,KAKnB,cAACxQ,EAAA,EAAD,CAAK2B,GAAI,GAAT,SACI,cAAC,GAAD,CAAexE,QAAS0H,EAAS+L,aAAcrT,KAAMsH,EAASgM,UAAWtO,SAlNvD,SAAC,GAAuB,IAArBuM,EAAoB,EAApBA,QAC7B,OADiD,EAAX9S,MAElC,IAAK,SACDyW,EAAY,2BAAK5N,GAAN,IAAgB+L,aAAc9B,KACzC,MACJ,IAAK,OACD2D,EAAY,2BAAK5N,GAAN,IAAgBgM,UAAW/B,cA+M9C,eAAC/O,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAK2B,GAAI,GAAI5C,UAAU,OAAvB,SACI,eAACyD,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,+CACZ,cAAC,IAAD,CAAiB3D,UAAU,mCAAmCmL,KAAMC,IAAQjL,QAzH1E,WACdwT,EAAWxO,EAAQqE,OAAO,CAAC,CACvB+H,SAAS,EACTC,OAAQ,GACRC,MAAO,GACPI,aAAc,GACdC,UAAW,eAuHX,cAAC,GAAD,CAAa1T,QAASuU,GAAoBnU,KAAM2G,EAAS3B,SApHrC,SAACD,EAAOuI,EAAO7O,GACvC,IAAM8X,EAAazK,KAAKC,MAAMD,KAAK1F,UAAUO,IAC7C,OAAQlI,GACJ,IAAK,UACD8X,EAAWjJ,GAAOyF,QAAUhO,EAC5BoQ,EAAWoB,GACX,MACJ,IAAK,SACDA,EAAWjJ,GAAO0F,OAASjO,EAC3BoQ,EAAWoB,GACX,MACJ,IAAK,eACDA,EAAWjJ,GAAO2F,MAAQ,GAC1BkC,EAAWoB,GACX,MACJ,IAAK,eACDP,GAAc1I,GACd,MACJ,IAAK,QACD,cAAkB3T,OAAO0B,KAAK0J,GAA9B,eAAsC,CAAjC,IAAMgB,EAAG,KACJ2Q,EAAa3R,EAAMgB,GACzBwQ,EAAWjJ,GAAOvH,GAAO2Q,EAE7BvB,EAAWoB,GACX,MACJ,IAAK,SACDA,EAAWI,OAAOrJ,EAAO,GACzB6H,EAAWoB,UA2FnB,eAAC/T,EAAA,EAAD,CAAKhB,UAAU,0BAAf,UACI,cAACoD,EAAA,EAAD,CAAQnD,QAAQ,UAAUE,QArKF,SAAC8J,GAC7BoK,GAA2BpK,EAAM7K,QACjC+U,IAAmC,IAmK/B,yBACA,cAAC/Q,EAAA,EAAD,CAAQjD,QAjKc,SAAC8J,GAC3BgK,GAAyBhK,EAAM7K,QAC/B2U,IAAiC,IA+J7B,uCAEJ,cAACtQ,EAAA,EAAK2R,KAAN,CAAWC,IAAK7B,EAAWlU,MAAM,GAAGU,UAAU,SAASwD,SAAUmR,KAEjE,cAAC5G,EAAA,EAAD,CAAStO,KAAMqR,GAAwB1R,OAAQ4R,GAAgBxR,UAAU,OAAOE,OAAQ,kBAAMqR,IAA0B,IAAQpR,iBAAkB,GAAIC,WAAS,EAA/J,SACI,eAACoO,EAAA,EAAD,CAASvM,MAAO,CAAEwM,SAAU,KAA5B,UACI,cAACD,EAAA,EAAQnO,MAAT,CAAeC,GAAG,KAAKE,UAAU,MAAjC,4BACA,eAACgO,EAAA,EAAQjO,QAAT,WACI,eAACmN,EAAA,EAAD,CAAYhN,KAAK,KAAKF,UAAU,OAAhC,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,yBAApB,uBAEJ,cAACwW,EAAA,EAAD,CAAaE,aAAW,QAAQC,mBAAiB,yBAAyBjK,MAAOqN,GAAYD,QACzFnN,SAAU,SAAAhK,GAAC,OAAIwb,GAA4Bxb,EAAE4F,OAAOmE,MAAO,iBAEnE,eAAC2J,EAAA,EAAD,CAAYhN,KAAK,KAAKF,UAAU,OAAhC,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,sBAApB,oBAEJ,cAACwW,EAAA,EAAD,CAAaE,aAAW,QAAQC,mBAAiB,sBAAsBjK,MAAOqN,GAAYF,KACtFlN,SAAU,SAAAhK,GAAC,OAAIwb,GAA4Bxb,EAAE4F,OAAOmE,MAAO,cAEnE,qBAAKvD,UAAU,6BAAf,SACI,cAACoD,EAAA,EAAD,CAAQlD,KAAK,KAAKC,QA5OR,WAG1B,GAFA4Q,IAA0B,GAEtBH,GAAYD,QAAU,GAAKC,GAAYF,KAAO,EAC9CgD,EAAY,2BACL5N,GADI,IAEP+L,aAAc,GACdC,UAAW,UAJnB,CASA,IAAMW,EAAkBnI,KAAKC,MAAMD,KAAK1F,UAAUkB,EAAS+L,cAAgB,KACrEa,EAAepI,KAAKC,MAAMD,KAAK1F,UAAUkB,EAASgM,WAAa,KACrE,GAAIW,EAAgBpH,OAASuF,GAAYD,QACrC8B,EAAgBpH,OAASuF,GAAYD,aAErC,KAAO8B,EAAgBpH,OAASuF,GAAYD,SACxC8B,EAAgBpP,KAAK,IAI7B,GAAIqP,EAAarH,OAASuF,GAAYF,KAAO,EACzCgC,EAAarH,OAASuF,GAAYF,KAAO,OAEzC,KAAOgC,EAAarH,OAASuF,GAAYF,KAAO,GAC5CgC,EAAarP,KAAK,IAI1B,IAAK,IAAI+F,EAAI,EAAGA,EAAIsJ,EAAarH,OAAQjC,IAAK,CAC1C,IAAM8G,EAAMwC,EAAatJ,GACzB,GAAI8G,EAAI7E,OAASuF,GAAYD,QAAU,EACnCT,EAAI7E,OAASuF,GAAYD,aAG7B,KAAOT,EAAI7E,OAASuF,GAAYD,SAC5BT,EAAI7M,KAAK,IAIjBqQ,EAAY,2BACL5N,GADI,IAEP+L,aAAcY,EACdX,UAAWY,OAgMC,sCAMhB,cAAC,KAAD,CAAgBvT,QAAS2U,GAA+B1U,OAAQ4U,GAAuBxU,UAAU,OAAOH,cAAe0U,GACnHzU,MAAM,0CAA0CC,UA3L/B,WACrBwU,IAAiC,GAC5BjO,EAASA,SAGHX,EAAQkG,OAAS,EACxBrP,EAAe,UAAW,wCAAyCnE,KAAYE,SAInFoM,EAAac,iBAAb,2BACOa,GADP,IACiB7D,WAAYkR,EAAKlR,WAAY6C,UAAWqO,EAAKrO,UAAW+J,UAASyE,aAAYvO,KAAMoO,EAAKpO,OACtGI,GAASpM,MAAK,SAAAwF,GACbvC,EAAe,UAAW,6CAA8CnE,KAAYG,SACpFid,QACD,SAAAzb,GACCwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,WAbtEkE,EAAe,UAAW,wBAAyBnE,KAAYE,YA0LnE,cAAC,KAAD,CAAgBoH,QAAS+U,GAAiC9U,OAAQgV,GAAyB5U,UAAU,QAAQH,cAAe8U,GACxH7U,MAAM,+BAA+BC,UAAW0V,QAM5DnC,GAAkB1S,aAAe,GAElBgB,mBAAWhF,aAAc0W,KC9VlCH,GAAqB,CAAC,UAAW,SAAU,WAC3CC,GAAe,CACjB/b,GAAI,GACJiP,SAAU,GACV+M,eAAgB,EAChBpB,MAAO,GACPI,aAAc,GACdC,UAAW,IAGf,SAASwD,GAAT,GAAiE,IAAnCtY,EAAkC,EAAlCA,QAASsJ,EAAyB,EAAzBA,MAAOtK,EAAkB,EAAlBA,eAC1C,EAA4BsE,mBAAS,IAArC,mBAAOyS,EAAP,KAAeC,EAAf,KACA,EAAkC1S,mBAAS,IAA3C,mBAAOwO,EAAP,KAAkBmE,EAAlB,KACA,EAAwB3S,mBAAS,CAC7B2B,WAAY,GAAIiR,aAAc,GAC9BpO,UAAW,GAAI2I,YAAa,GAAI1I,KAAM,IAF1C,mBAAOoO,EAAP,KAAaC,EAAb,KAKA,EAA8B9S,mBAAS,IAAvC,mBAAOuO,EAAP,KAAgBwE,EAAhB,KACA,EAAoC/S,mBAAS,IAA7C,mBAAOgT,EAAP,KAAmBC,EAAnB,KAEMC,EAAYC,iBAAO,MACzB,EAAgCnT,mBAASsS,IAAzC,mBAAO9M,EAAP,KAAiB4N,EAAjB,KACA,EAA8BpT,mBAAS,IAAvC,mBAAO6E,EAAP,KAAgBwO,EAAhB,KAEA,EAA0CrT,mBAAS,MAAnD,oBAAOsT,GAAP,MAAsBC,GAAtB,MACA,GAAsCvT,mBAAS,CAAEoQ,KAAM,EAAGC,QAAS,IAAnE,qBAAOC,GAAP,MAAoBC,GAApB,MAGA,GAA4CvQ,mBAAS,MAArD,qBAAO0Q,GAAP,MAAuBC,GAAvB,MACA,GAA4D3Q,oBAAS,GAArE,qBAAOwQ,GAAP,MAA+BC,GAA/B,MAGA,GAAsEzQ,oBAAS,GAA/E,qBAAOiV,GAAP,MAAoCC,GAApC,MACA,GAAsDlV,mBAAS,MAA/D,qBAAOmV,GAAP,MAA4BC,GAA5B,MACA,GAA8EpV,oBAAS,GAAvF,qBAAO4T,GAAP,MAAwCC,GAAxC,MACA,GAA8D7T,mBAAS,MAAvE,qBAAO8T,GAAP,MAAgCC,GAAhC,MACA1T,qBAAU,WACN,IAAQ2E,EAAegB,EAAM0C,OAArB1D,WACRnB,EAAayB,sBAAsBN,GAAYvM,MAAK,SAAAmV,GAChDkF,EAAQ,CACJF,aAAchF,EAAOpI,SAASoN,aAC9BzF,YAAaS,EAAOpI,SAAS2H,YAC7B1I,KAAMmJ,EAAOpI,SAASf,KACtB9C,WAAYiM,EAAOpI,SAAS7D,WAC5B6C,UAAWoJ,EAAOpI,SAAShB,YAE/BkO,EAAU9E,EAAO6E,QACb7E,EAAO6E,OAAO1H,OAAS,GACvBgI,EAAWnF,EAAOpI,SAAS+I,SAE/B0E,EAAcrF,EAAOpI,SAASwN,YAC9BI,EAAY,CACR7c,GAAIqX,EAAOpI,SAASjP,GACpBiP,SAAUoI,EAAOpI,SAASA,SAC1B+M,eAAgB3E,EAAOpI,SAAS+M,eAChCpB,MAAOvD,EAAOpI,SAAS2L,MACvBI,aAAc,GAAGrI,OAAO0E,EAAOpI,SAAS+L,cACxCC,UAAW,GAAGtI,OAAO0E,EAAOpI,SAASgM,aAEzC6B,EAAW,GAAGnK,OAAO0E,EAAOpI,SAASX,UACrC3K,QAAQC,IAAIyT,EAAOpI,SAASX,YAC7B,SAAA3L,GAAC,OAAIwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,aAC/E,IAEH6I,qBAAU,WACFkO,GACAF,GAAaC,aAAaC,GAAS9V,MAAK,SAAAub,GACpCrB,EAAaqB,GACbf,EAAce,EAAa,GAAGzd,OAC/B,SAAA2C,GAAC,OAAIwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,aAEnF,CAAC+W,IAEJ,IAAM0F,GAAmB,SAAChR,EAAOgB,GAAUmP,EAAY,2BAAK5N,GAAN,kBAAiBvB,EAAMhB,MACvEiR,GAAgB,SAAA1I,GAEd+H,GADA/H,EAAQ,EACS,WACK,UAAD,OAAWA,IACpC0H,EAAUiB,QAAQC,SAEhBC,GAAa,yCAAG,WAAMnb,GAAN,sBAAAob,EAAA,2DACApb,EAAE4F,OAAZyV,MACExJ,OAAS,GAFD,wBAGRpV,EAAOuD,EAAE4F,OAAOyV,MAAM,GAHd,SAIS9F,GAAUC,WAAW/Y,GAJ9B,UAIR6e,EAJQ,OAKTlB,GALS,iDAQVA,GAAcjb,SAAS,WACjBmT,EAAQf,SAAS6I,GAActK,MAAM,KAAK,KAC1CyL,EAAazK,KAAKC,MAAMD,KAAK1F,UAAUO,KAClC2G,GAAO2F,MAAQqD,EAC1BnB,EAAWoB,IAEXR,GAAiBO,EAAU,SAE/Btb,EAAE4F,OAAOmE,MAAQ,GAhBH,4CAAH,sDAmBbyR,GAA8B,SAACzR,EAAOgB,GAAUsM,GAAe,2BAAKD,IAAN,kBAAoBrM,EAAMhB,MA4I9F,OAAQ,eAACd,EAAA,EAAD,CAAWzC,UAAU,OAArB,UACJ,cAACgB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACmC,EAAA,EAAD,CAAQnD,QAAQ,OAAOE,QAAS,kBAAMnD,EAAQ8N,UAA9C,SACI,sBAAM9K,UAAU,KAAhB,wBAIZ,cAACgB,EAAA,EAAD,CAAKhB,UAAU,OAAf,SACI,cAACiB,EAAA,EAAD,UACI,oBAAIjB,UAAU,2BAAd,iCAGR,eAACyD,EAAA,EAAD,WACI,eAACzC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,eAACY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,iDACZ,cAACF,EAAA,EAAKG,QAAN,CAAcyI,UAAQ,EAACpP,KAAK,OAAOqQ,YAAY,YAAY/J,MAAO4P,EAAKD,oBAG/E,cAACjS,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,eAACY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,+CACZ,cAACF,EAAA,EAAKG,QAAN,CAAcyI,UAAQ,EAACpP,KAAK,OAAOqQ,YAAY,UAAU/J,MAAO4P,EAAK1F,mBAG7E,cAACxM,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,eAACY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,4CACZ,cAACF,EAAA,EAAKG,QAAN,CAAcyI,UAAQ,EAACpP,KAAK,OAAOqQ,YAAY,OAAO/J,MAAO4P,EAAKpO,eAI9E,eAAC/D,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAK4B,GAAI,EAAT,SAAY,cAAC,EAAD,CAAcvD,MAAM,QAAQlH,OAAQ2a,EAAQxP,MAAOsL,EAASrL,SAAU,SAAAhK,GAAC,OAAI6Z,EAAW7Z,EAAE4F,OAAOmE,YAC3G,cAACtC,EAAA,EAAD,CAAK4B,GAAI,EAAT,SAAY,cAAC,EAAD,CAAcvD,MAAM,YAAYlH,OAAQ0W,EAAWvL,MAAO+P,EAAY9P,SAAU,SAAAhK,GAAC,OAAI+Z,EAAc/Z,EAAE4F,OAAOmE,kBAGhI,cAACvC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAK4B,GAAI,EAAGC,GAAI,EAAG9C,UAAU,UAA7B,SACI,eAACyD,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,uDACZ,cAACF,EAAA,EAAKG,QAAN,CAAc3G,KAAK,OAAOqQ,YAAY,wBAAwB/J,MAAOuC,EAAS+M,eAC1ErP,SAAU,SAAAhK,GAAC,OAAI+a,GAAiBxJ,SAASvR,EAAE4F,OAAOmE,OAAQ,4BAI1E,eAACvC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAK2B,GAAI,GAAI5C,UAAU,SAAvB,UACI,eAACyD,EAAA,EAAKC,MAAN,CAAY1D,UAAU,YAAtB,UACI,cAACyD,EAAA,EAAKE,MAAN,UAAY,gDACZ,cAACF,EAAA,EAAKG,QAAN,CAAc3G,KAAK,OAAO6C,GAAG,WAAW4Q,KAAM,EAAGpD,YAAY,iBAAiB/J,MAAOuC,EAASA,SAC1FtC,SAAU,SAAAhK,GAAC,OAAI+a,GAAiB/a,EAAE4F,OAAOmE,MAAO,kBAExD,sBAAKvD,UAAU,8CAAf,UACI,cAACyD,EAAA,EAAKC,MAAN,CAAY1D,UAAU,OAAtB,SACI,cAAC,IAAD,CAAiBA,UAAU,8BAA8BE,KAAK,KAAKiL,KAAM+G,IAAS/R,QAAS,kBAAMqU,IAAe,QAEpH,cAAC/Q,EAAA,EAAKC,MAAN,CAAY1D,UAAU,OAAtB,SACI,cAAC,IAAD,CAAiBA,UAAU,2BAA2BE,KAAK,KAAKiL,KAAMgH,IAAShS,QAAS,SAAC3G,GAAD,OAhH9E,SAACyQ,GAC3B,IAAMmI,EAAatM,EAAS+L,aAAaxG,OACnCgH,EAAUvM,EAASgM,UAAUzG,OAAS,EAC5CwF,GAAe,CAAEF,QAASyB,EAAY1B,KAAM2B,EAAU,EAAIA,EAAU,IACpEpB,GAAkBhH,EAAM7K,QACxB2R,IAA0B,GA2GqFwB,CAAsB/Y,cAK/HsM,EAAS2L,MAAe,eAACxQ,EAAA,EAAD,CAAK2B,GAAI,GAAT,UACtB,cAACoI,EAAA,EAAD,CAAOhI,IAAK8C,EAAS2L,MAAOvG,SAAO,EAACzJ,MAAO,CAAEwJ,OAAQ,IAAKgD,SAAU,QAAUjO,UAAU,wCACxF,cAAC,IAAD,CAAiBA,UAAU,6BAA6BE,KAAK,KAAKiL,KAAMuG,IACpEjQ,MAAO,CAAEkQ,YAAa,GAAIC,aAAc,IAAMzR,QAAS,kBAAMuT,EAAY,2BAAK5N,GAAN,IAAgB2L,MAAO,YAHpF,KAKnB,cAACxQ,EAAA,EAAD,CAAK2B,GAAI,GAAT,SACI,cAAC,GAAD,CAAexE,QAAS0H,EAAS+L,aAAcrT,KAAMsH,EAASgM,UAAWtO,SAlNvD,SAAC,GAAuB,IAArBuM,EAAoB,EAApBA,QAC7B,OADiD,EAAX9S,MAElC,IAAK,SACDyW,EAAY,2BAAK5N,GAAN,IAAgB+L,aAAc9B,KACzC,MACJ,IAAK,OACD2D,EAAY,2BAAK5N,GAAN,IAAgBgM,UAAW/B,cA+M9C,eAAC/O,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAK2B,GAAI,GAAI5C,UAAU,OAAvB,SACI,eAACyD,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,+CACZ,cAAC,IAAD,CAAiB3D,UAAU,mCAAmCmL,KAAMC,IAAQjL,QAzH1E,WACdwT,EAAWxO,EAAQqE,OAAO,CAAC,CACvB+H,SAAS,EACTC,OAAQ,GACRC,MAAO,GACPI,aAAc,GACdC,UAAW,eAuHX,cAAC,GAAD,CAAa1T,QAASuU,GAAoBnU,KAAM2G,EAAS3B,SApHrC,SAACD,EAAOuI,EAAO7O,GACvC,IAAM8X,EAAazK,KAAKC,MAAMD,KAAK1F,UAAUO,IAC7C,OAAQlI,GACJ,IAAK,UACD8X,EAAWjJ,GAAOyF,QAAUhO,EAC5BoQ,EAAWoB,GACX,MACJ,IAAK,SACDA,EAAWjJ,GAAO0F,OAASjO,EAC3BoQ,EAAWoB,GACX,MACJ,IAAK,eACDA,EAAWjJ,GAAO2F,MAAQ,GAC1BkC,EAAWoB,GACX,MACJ,IAAK,eACDP,GAAc1I,GACd,MACJ,IAAK,QACD,cAAkB3T,OAAO0B,KAAK0J,GAA9B,eAAsC,CAAjC,IAAMgB,EAAG,KACJ2Q,EAAa3R,EAAMgB,GACzBwQ,EAAWjJ,GAAOvH,GAAO2Q,EAE7BvB,EAAWoB,GACX,MACJ,IAAK,SACDA,EAAWI,OAAOrJ,EAAO,GACzB6H,EAAWoB,UA2FnB,eAAC/T,EAAA,EAAD,CAAKhB,UAAU,0BAAf,UACI,cAACoD,EAAA,EAAD,CAAQnD,QAAQ,UAAUE,QArKF,SAAC8J,GAC7BoK,GAA2BpK,EAAM7K,QACjC+U,IAAmC,IAmK/B,yBACA,cAAC/Q,EAAA,EAAD,CAAQiJ,SAAUvG,EAASJ,SAAW5B,EAAeG,UAAW9D,QAjK5C,SAAC8J,GACzByL,GAAuBzL,EAAM7K,QAC7BoW,IAA+B,IA+J3B,qCAEJ,cAAC/R,EAAA,EAAK2R,KAAN,CAAWC,IAAK7B,EAAWlU,MAAM,GAAGU,UAAU,SAASwD,SAAUmR,KAEjE,cAAC5G,EAAA,EAAD,CAAStO,KAAMqR,GAAwB1R,OAAQ4R,GAAgBxR,UAAU,OAAOE,OAAQ,kBAAMqR,IAA0B,IAAQpR,iBAAkB,GAAIC,WAAS,EAA/J,SACI,eAACoO,EAAA,EAAD,CAASvM,MAAO,CAAEwM,SAAU,KAA5B,UACI,cAACD,EAAA,EAAQnO,MAAT,CAAeC,GAAG,KAAKE,UAAU,MAAjC,4BACA,eAACgO,EAAA,EAAQjO,QAAT,WACI,eAACmN,EAAA,EAAD,CAAYhN,KAAK,KAAKF,UAAU,OAAhC,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,yBAApB,uBAEJ,cAACwW,EAAA,EAAD,CAAaE,aAAW,QAAQC,mBAAiB,yBAAyBjK,MAAOqN,GAAYD,QACzFnN,SAAU,SAAAhK,GAAC,OAAIwb,GAA4Bxb,EAAE4F,OAAOmE,MAAO,iBAEnE,eAAC2J,EAAA,EAAD,CAAYhN,KAAK,KAAKF,UAAU,OAAhC,UACI,cAACkN,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBvW,GAAG,sBAApB,oBAEJ,cAACwW,EAAA,EAAD,CAAaE,aAAW,QAAQC,mBAAiB,sBAAsBjK,MAAOqN,GAAYF,KACtFlN,SAAU,SAAAhK,GAAC,OAAIwb,GAA4Bxb,EAAE4F,OAAOmE,MAAO,cAEnE,qBAAKvD,UAAU,6BAAf,SACI,cAACoD,EAAA,EAAD,CAAQlD,KAAK,KAAKC,QA5OR,WAG1B,GAFA4Q,IAA0B,GAEtBH,GAAYD,QAAU,GAAKC,GAAYF,KAAO,EAC9CgD,EAAY,2BACL5N,GADI,IAEP+L,aAAc,GACdC,UAAW,UAJnB,CASA,IAAMW,EAAkBnI,KAAKC,MAAMD,KAAK1F,UAAUkB,EAAS+L,cAAgB,KACrEa,EAAepI,KAAKC,MAAMD,KAAK1F,UAAUkB,EAASgM,WAAa,KACrE,GAAIW,EAAgBpH,OAASuF,GAAYD,QACrC8B,EAAgBpH,OAASuF,GAAYD,aAErC,KAAO8B,EAAgBpH,OAASuF,GAAYD,SACxC8B,EAAgBpP,KAAK,IAI7B,GAAIqP,EAAarH,OAASuF,GAAYF,KAAO,EACzCgC,EAAarH,OAASuF,GAAYF,KAAO,OAEzC,KAAOgC,EAAarH,OAASuF,GAAYF,KAAO,GAC5CgC,EAAarP,KAAK,IAI1B,IAAK,IAAI+F,EAAI,EAAGA,EAAIsJ,EAAarH,OAAQjC,IAAK,CAC1C,IAAM8G,EAAMwC,EAAatJ,GACzB,GAAI8G,EAAI7E,OAASuF,GAAYD,QAAU,EACnCT,EAAI7E,OAASuF,GAAYD,aAG7B,KAAOT,EAAI7E,OAASuF,GAAYD,SAC5BT,EAAI7M,KAAK,IAIjBqQ,EAAY,2BACL5N,GADI,IAEP+L,aAAcY,EACdX,UAAWY,OAgMC,sCAMhB,cAAC,KAAD,CAAgBvT,QAASoW,GAA6BnW,OAAQqW,GAAqBjW,UAAU,OAAOH,cAAemW,GAC/GlW,MAAM,wCAAwCC,UA3L/B,WACnBiW,IAA+B,GAC1B1P,EAASA,SAGHX,EAAQkG,OAAS,EACxBrP,EAAe,UAAW,wCAAyCnE,KAAYE,SAInFoM,EAAa0B,eAAb,2BACOC,GADP,IACiB7D,WAAYkR,EAAKlR,WAAY6C,UAAWqO,EAAKrO,UAAW+J,UAASyE,aAAYvO,KAAMoO,EAAKpO,OACtGI,GAASpM,MAAK,SAAAwF,GACbvC,EAAe,UAAW,wCAAyCnE,KAAYG,YAEhF,SAAAwB,GACCwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,WAbtEkE,EAAe,UAAW,wBAAyBnE,KAAYE,YA0LnE,cAAC,KAAD,CAAgBoH,QAAS+U,GAAiC9U,OAAQgV,GAAyB5U,UAAU,QAAQH,cAAe8U,GACxH7U,MAAM,+BAA+BC,UAnMlB,WAAQoU,EAAW,IAAKD,EAAYd,IAAeuB,IAAmC,SAyMrHmB,GAAmBlV,aAAe,GAEnBgB,mBAAWhF,aAAckZ,K,uFCxXxC,SAASK,GAAT,GAA2E,IAApDpE,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,MAAOI,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,UACzD,OAAQ,eAACrO,EAAA,EAAD,CAAMzD,UAAU,OAAhB,UACJ,cAACyD,EAAA,EAAK4N,MAAN,CAAYrR,UAAU,4BAA4B/C,KAAK,WAAWqU,QAASC,EAAS/N,SAAU,aAAUlE,MAAO,cAAC,GAAD,CAAciE,MAAOiO,EAAQnC,UAAQ,MAEjJoC,EAAQ,cAAChO,EAAA,EAAKzC,IAAN,CAAUhB,UAAU,OAApB,SAA2B,cAACgL,EAAA,EAAD,CAAOhI,IAAKyO,EAAOvG,SAAO,EAACzJ,MAAO,CAAEwJ,OAAQ,IAAKgD,SAAU,YAA0B,KAEvH4D,GAAkBA,EAAaxG,OAAU,cAAC,GAAD,CAAajN,QAASyT,EAAcrT,KAAMsT,IAAe,QAW9G6D,GAAYvV,aAAe,CACvBmR,SAAS,EACTC,OAAQ,GACRC,MAAO,GACPI,aAAc,GACdC,UAAW,IAGA6D,UChBf,SAASC,GAAT,GAII,IAHA5Y,EAGD,EAHCA,QAAS6Y,EAGV,EAHUA,SAAUC,EAGpB,EAHoBA,UAAWC,EAG/B,EAH+BA,aAC9Blf,EAED,EAFCA,GAAIiP,EAEL,EAFKA,SAAU+M,EAEf,EAFeA,eAAgBnN,EAE/B,EAF+BA,OAC9B+L,EACD,EADCA,MAAOI,EACR,EADQA,aAAcC,EACtB,EADsBA,UAAW3M,EACjC,EADiCA,QAAShK,EAC1C,EAD0CA,KAEzC,EAA4CmF,oBAAS,GAArD,mBAAO0V,EAAP,KAAuBC,EAAvB,KAEA,EAAoD3V,mBAAS,MAA7D,mBAAO4V,EAAP,KAA2BC,EAA3B,KACA,EAA0D7V,oBAAS,GAAnE,mBAAO8V,EAAP,KAA8BC,EAA9B,KACA,EAA4B/V,mBAAS,MAArC,mBAAOlB,EAAP,KAAekX,EAAf,KASA,OACI,sBAAKtW,UAAU,6CAAf,UACI,cAACuW,GAAA,EAAD,UACI,eAACrV,EAAA,EAAD,WACI,eAACA,EAAA,EAAK8L,OAAN,CAAahN,UAAU,4BAAvB,UACI,sBAAKA,UAAU,gCAAf,UAA+C,yBAAQA,UAAU,OAAlB,cAA2B6S,EAA3B,OAA/C,IAAoG,cAAC,GAAD,CAActP,MAAOuC,EAAUuJ,UAAQ,OAE3I,cAACkH,GAAA,EAAUC,OAAX,CAAkB1W,GAAI2W,IAAiBtL,KAAMuL,IAAaxW,KAAK,KAAKyW,SAAS,IACzE3W,UAAW4W,KAAW,CAAC,iBAAkB,eAAgB,WAAY,CACjE,oBAAqBZ,IACrB7V,QAAS,kBAAM8V,GAAmBD,IAH1C,0BAOJ,cAACO,GAAA,EAAUM,SAAX,CAAoBF,SAAS,IAA7B,SACI,eAACzV,EAAA,EAAKgC,KAAN,WACI,eAAC4T,GAAA,EAAD,CAAgB7W,QAAQ,YAAYC,KAAK,KAAKlK,MAAM,UAAUgK,UAAU,qBAAxE,UACI,cAAC+W,GAAA,EAASxK,KAAV,CAAeF,SAAUlR,EAAKW,OAASS,KAASE,OAASiJ,IAAW5B,EAAeG,UAC/E9D,QAAS,kBAAMnD,EAAQqG,KAAR,gCAAsCxM,KADzD,wBAEA,cAACkgB,GAAA,EAASxK,KAAV,CAAeF,SAAUlR,EAAKW,OAASS,KAASE,OAASiJ,IAAW5B,EAAeG,UAC/E9D,QAAS,SAAC3G,GAAD,OA3BA,SAACyQ,EAAO3E,GAC7C,IAAM0R,EAAiB/M,EAAM7K,OAAO6X,WAAWA,WAAWC,WAC1DZ,EAAUU,GACVX,GAA0BD,GAC1BD,EAAsB7Q,GAuBsB6R,CAAiC3d,EAAG3C,IADxD,gCAGJ,8BAAG,4CAAH,IAA4Bif,KAC5B,8BAAG,gDAAH,IAAgCC,KAChC,qBAAK/V,UAAU,gCAAf,SAA+C,cAAC,GAAD,CAAcuD,MAAOuC,EAAUuJ,UAAQ,MAGnFoC,EAAQ,cAAChO,EAAA,EAAKzC,IAAN,CAAUhB,UAAU,OAApB,SAA2B,cAACgL,EAAA,EAAD,CAAOhI,IAAKyO,EAAOvG,SAAO,EAACzJ,MAAO,CAAEwJ,OAAQ,IAAKgD,SAAU,YAA0B,KAE3H,cAAC,GAAD,CAAa7P,QAASyT,EAAcrT,KAAMsT,IAEzC3M,EAAQlM,KAAI,SAACuY,EAAQ4F,GAAT,OAAgB,cAAC,GAAD,eAA0B5F,GAAR4F,gBAM/D,cAAC,KAAD,CAAgBjY,QAASiX,EAAuBhX,OAAQA,EAAQC,cAAegX,EAC3E/W,MAAM,wCAAwCC,UAAW,WAAQ8W,GAAyB,GAAQR,EAASK,SAiC3HN,GAAcxV,aAAe,CACzBvJ,GAAI,GACJoL,WAAY,GACZiR,aAAc,GACdmE,gBAAiB,GACjBvS,UAAW,GACX2I,YAAa,GACboB,QAAS,GACTiH,UAAW,GACXxC,WAAY,GACZyC,aAAc,GACdhR,KAAM,KACNe,SAAU,GACV+M,eAAgB,EAChBpB,MAAO,GACP/L,OAAQ5B,EAAeC,MACvB8N,aAAc,GACdC,UAAW,GACX3M,QAAS,GACT0Q,SAAUyB,KAAUC,MAGTnW,mBAAWpG,aAAY4a,KC/GtC,SAAS4B,GAAT,GAAuE,IAAzClR,EAAwC,EAAxCA,MAAOtJ,EAAiC,EAAjCA,QAAShB,EAAwB,EAAxBA,eAAgBb,EAAQ,EAARA,KAC1D,EAAwBmF,mBAAS,CAC7B2B,WAAY,GAAIiR,aAAc,GAC9BpO,UAAW,GAAI2I,YAAa,GAAI1I,KAAM,IAF1C,mBAAOoO,EAAP,KAAaC,EAAb,KAIA,EAA4B9S,mBAAS,CAAC,CAAEzJ,GAAI,GAAIsM,KAAM,oBAAtD,mBAAO4P,EAAP,KAAeC,EAAf,KACA,EAAkC1S,mBAAS,CAAC,CAAEzJ,GAAI,GAAIsM,KAAM,wBAA5D,mBAAO2L,EAAP,KAAkBmE,EAAlB,KACA,EAA8B3S,mBAAS,IAAvC,mBAAOuO,EAAP,KAAgBwE,EAAhB,KACA,EAAoC/S,mBAAS,IAA7C,mBAAOgT,EAAP,KAAmBC,EAAnB,KAEA,EAAkCjT,mBAAS,IAA3C,mBAAOmX,EAAP,KAAkBC,EAAlB,KACA,EAAkCpX,oBAAS,GAA3C,mBAAO+B,EAAP,KAAkBC,EAAlB,KAGA,EAAwEhC,oBAAS,GAAjF,mBAAOkI,EAAP,KAAqCC,EAArC,KACA,EAAwDnI,mBAAS,MAAjE,mBAAOoI,EAAP,KAA6BC,EAA7B,KACA,GAA0FrI,oBAAS,GAAnG,qBAAOsI,GAAP,MAA8CC,GAA9C,MACA,GAA0EvI,mBAAS,MAAnF,qBAAOwI,GAAP,MAAsCC,GAAtC,MAEApI,qBAAU,WACN,MAAwC2F,EAAM0C,OAAtC/G,EAAR,EAAQA,WAAY6C,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,KAC/BzC,GAAa,GACb6B,EAAaa,0BAA0B/C,EAAY6C,GAAW/L,MAAK,SAAAmV,GAC/D,IAAQgF,EAA8BhF,EAA9BgF,aAAczF,EAAgBS,EAAhBT,YACtB2F,EAAQ,CAAEF,eAAczF,cAAa1I,KAAMgG,SAAShG,GAAO9C,aAAY6C,cACvEkO,EAAU,CAAC,CAAEnc,GAAI,GAAIsM,KAAM,mBAAoBqG,OAAO0E,EAAO6E,YAC9D,SAAAvZ,GACCwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,QACtEwK,GAAa,QAElB,IAEH3B,qBAAU,WACNgX,OACD,CAACxE,IAEJxS,qBAAU,WACFkO,EACAF,GAAaC,aAAaC,GAAS9V,MAAK,SAAAub,GACpCrB,EAAa,CAAC,CAAEpc,GAAI,GAAIsM,KAAM,uBAAwBqG,OAAO8K,IACxDhB,EAEIC,EAAc,IADnBoE,QAEL,SAAAne,GAAC,OAAIwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,YAE9Emb,EAAa,CAAC,CAAEpc,GAAI,GAAIsM,KAAM,wBACzBmQ,EAEIC,EAAc,IADnBoE,QAGT,CAAC9I,IAEJlO,qBAAU,WACNgX,OACD,CAACrE,IAEJ,IAAMqE,GAAyB,WACtBxE,EAAKlR,YAAekR,EAAKrO,WAAcqO,EAAKpO,OAEjDzC,GAAa,GACb6B,EAAaoB,oBACT4N,EAAKlR,WACLkR,EAAKrO,UACLqO,EAAKpO,KACL,CAAE8J,UAASyE,aAAYsE,QAAS,KAClC7e,MAAK,SAAA8e,GACHH,EAAaG,GACbvV,GAAa,MACd,SAAA9I,GACCwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,QACtEwK,GAAa,QAIfwV,GAAgC,SAAC7N,GACnClB,GAAiCkB,EAAM7K,QACvCyJ,IAAyC,IAYvCkP,GAAgC,SAAC9N,GACnCtB,EAAwBsB,EAAM7K,QAC9BqJ,GAAgC,IAY9BuP,GAAwB,SAACtS,GAC3B,IADsC,EAChCuS,EAAe3N,KAAKC,MAAMD,KAAK1F,UAAU6S,IADT,eAEfQ,GAFe,IAEtC,2BAAqC,SACxBvS,OAASA,GAHgB,8BAKtCgS,EAAaO,IAGXC,GAAmB,SAACrhB,GACtBsN,EAAa4B,eAAelP,GAAIkC,MAAK,SAAAmW,GACjC,IAAM+I,EAAe3N,KAAKC,MAAMD,KAAK1F,UAAU6S,IACzC3L,EAAQmM,EAAazJ,WAAU,SAAA2J,GAAC,OAAIA,EAAEthB,KAAOA,KACnDohB,EAAa9C,OAAOrJ,EAAO,GAC3B4L,EAAaO,MACd,SAAAze,GAAC,OAAIwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,YA6BlF,OAAQ,eAAC2K,EAAA,EAAD,CAAWzC,UAAU,OAArB,UACJ,cAACgB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACmC,EAAA,EAAD,CAAQnD,QAAQ,OAAOE,QAAS,kBAAMnD,EAAQ8N,UAA9C,SACI,sBAAM9K,UAAU,KAAhB,wBAIZ,cAACgB,EAAA,EAAD,CAAKhB,UAAU,OAAf,SACI,cAACiB,EAAA,EAAD,UACI,oBAAIjB,UAAU,2BAAd,gCAGR,eAACyD,EAAA,EAAD,WACI,eAACzC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,eAACY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,iDACZ,cAACF,EAAA,EAAKG,QAAN,CAAcyI,UAAQ,EAACpP,KAAK,OAAOqQ,YAAY,YAAY/J,MAAO4P,EAAKD,oBAG/E,cAACjS,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,eAACY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,+CACZ,cAACF,EAAA,EAAKG,QAAN,CAAcyI,UAAQ,EAACpP,KAAK,OAAOqQ,YAAY,UAAU/J,MAAO4P,EAAK1F,mBAG7E,cAACxM,EAAA,EAAD,CAAK4B,GAAI,EAAT,SACI,eAACY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAY,4CACZ,cAACF,EAAA,EAAKG,QAAN,CAAcyI,UAAQ,EAACpP,KAAK,OAAOqQ,YAAY,OAAO/J,MAAO4P,EAAKpO,eAI9E,eAAC/D,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAK4B,GAAI,EAAT,SAAY,cAAC,EAAD,CAAcvD,MAAM,QAAQlH,OAAQ2a,EAAQxP,MAAOsL,EAASrL,SAAU,SAAAhK,GAAC,OAAI6Z,EAAW7Z,EAAE4F,OAAOmE,YAC3G,cAACtC,EAAA,EAAD,CAAK4B,GAAI,EAAT,SAAY,cAAC,EAAD,CAAcvD,MAAM,YAAYlH,OAAQ0W,EAAWvL,MAAO+P,EAAY9P,SAAU,SAAAhK,GAAC,OAAI+Z,EAAc/Z,EAAE4F,OAAOmE,kBAGhI,cAACvC,EAAA,EAAD,CAAKhB,UAAU,YAAf,SACI,eAACiB,EAAA,EAAD,WAjEAwW,EAAUpM,OAAS,EACZ,KAEPoM,EAAU,GAAG/R,SAAW5B,EAAeC,MAChC,cAACqU,GAAA,EAAD,CAAOnY,QAAQ,OAAf,sCACAwX,EAAU,GAAG/R,SAAW5B,EAAeE,YACvC,cAACoU,GAAA,EAAD,CAAOnY,QAAQ,OAAf,0CAEA,cAACmY,GAAA,EAAD,CAAOnY,QAAQ,UAAf,+CAKPwX,EAAUpM,OAAS,EACZ,KAEPoM,EAAU,GAAG/R,SAAW5B,EAAeC,MAChC,cAACX,EAAA,EAAD,CAAQnD,QAAQ,OAAOoM,SAAUhK,EAAWrC,UAAU,cAAcG,QAAS2X,GAA7E,gCACAL,EAAU,GAAG/R,SAAW5B,EAAeE,aAAe7I,EAAKW,OAASS,KAASC,WAC7E,cAAC4G,EAAA,EAAD,CAAQnD,QAAQ,UAAUoM,SAAUhK,EAAWrC,UAAU,cAAcG,QAAS4X,GAAhF,yBAEA,UAiDX,cAAC/W,EAAA,EAAD,CAAKhB,UAAU,yBAAf,SACKqC,EACG,cAAC,EAAD,IACAoV,EAAUxe,KAAI,SAAC6M,EAAUuS,GAAX,OAAkB,cAACpX,EAAA,EAAD,CAAK2B,GAAI,GAAT,SAAsB,cAAC,GAAD,2BAAmBkD,GAAnB,IAA6B+P,SAAUqC,OAA3CG,QAI1D,cAAC,KAAD,CAAgBlZ,QAASqJ,EAA8BpJ,OAAQsJ,EAAsBrJ,cAAeoJ,EAChGnJ,MAAM,qCAAqCC,UAzGxB,WACvBkJ,GAAgC,GAChC,MAAwCnC,EAAM0C,OAAtC/G,EAAR,EAAQA,WAAY6C,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,KAC/BZ,EAAawB,iBAAiB1D,EAAY6C,EAAWiG,SAAShG,IAAOhM,MAAK,SAAAmV,GACtElS,EAAe,UAAW,2CAA4CnE,KAAYG,SAClFggB,GAAsBlU,EAAeG,cACtC,SAAAzK,GAAC,OAAIwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,cAqG9E,cAAC,KAAD,CAAgBqH,QAASyJ,GAAuCxJ,OAAQ0J,GACpEzJ,cAAewJ,GAA0CvJ,MAAM,sDAAsDC,UA1HlG,WACvBsJ,IAAyC,GACzC,MAAwCvC,EAAM0C,OAAtC/G,EAAR,EAAQA,WAAY6C,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,KAC/BZ,EAAasB,iBAAiBxD,EAAY6C,EAAWiG,SAAShG,IAAOhM,MAAK,SAAAmV,GACtElS,EAAe,UAAW,2CAA4CnE,KAAYG,SAClFggB,GAAsBlU,EAAeE,gBACtC,SAAAxK,GAAC,OAAIwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,iBAyHtF0f,GAAmBpX,aAAe,GAEnBgB,mBAAWhF,aAAcpB,aAAYwc,MC5NvCc,GAAe,SAAC,GAAwD,IAAtDpY,EAAqD,EAArDA,KAAMZ,EAA+C,EAA/CA,MAAOiZ,EAAwC,EAAxCA,MAAOhV,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,SAAUxD,EAAgB,EAAhBA,UAChE,EAAoBM,mBAAS,IAA7B,mBAAOzJ,EAAP,KAAW2hB,EAAX,KAKA,OAJA7X,qBAAU,WACN6X,EAAMnlB,OAAOS,KAAK2kB,OAAOjlB,iBAC1B,IAGC,sBAAKwM,UAAW4W,KAAW,+BAAgC5W,EAAW,CAClE,mBAA6B,OAATE,EACpB,mBAA6B,OAATA,EACpB,mBAA6B,OAATA,EACpB,mBAA6B,OAATA,IAJxB,UAMI,uBAAOjD,KAAK,WAAW+C,UAAU,uBAAuBnJ,GAAE,iBAAYA,GAAMya,QAAS/N,EAAOC,SAAUA,IACtG,uBAAOxD,UAAW4W,KAAW,uBAAD,+BAAiD2B,IAAUG,QAAO,iBAAY7hB,KAC1G,gCAAQyI,QAapBgZ,GAAalY,aAAe,CACxBF,KAAM,KACNqY,MAAO,UACPjZ,MAAO,GACPiE,OAAO,EACPC,SAAU,aACVxD,UAAW,I,aCnCF2Y,GAAkB,WAAgD,IAA/CC,EAA8C,wDAAzBtb,IAAyB,yDACtEsb,EACArgB,aAAaM,QAAQJ,IAAcJ,QAASA,KAAQwgB,MAC5CD,GACRrgB,aAAaM,QAAQJ,IAAcJ,QAASA,KAAQ2B,OAEpDsD,GACAwb,OAAOC,SAASC,UAIXJ,GAAc,WACvB,OAAOrgB,aAAaC,QAAQC,IAAcJ,WAAaA,KAAQwgB,MCa7DI,GAAYC,gBAAK,kBAAM,kCACvBC,GAAYD,gBAAK,kBAAM,wDACvBE,GAAYF,gBAAK,kBAAM,wDAEvBG,GAAWH,gBAAK,kBAAM,kCACtBI,GAAWJ,gBAAK,kBAAM,kCACtBK,GAAWL,gBAAK,kBAAM,iCAEtBM,GAAaN,gBAAK,kBAAM,iCACxBO,GAAaP,gBAAK,kBAAM,iCA4Ef9X,mBAAWpG,cAxE1B,YAAkE,IAA3CsL,EAA0C,EAA1CA,MAAOtJ,EAAmC,EAAnCA,QAAelC,GAAoB,EAA1BK,KAA0B,EAApBL,kBACzC,EAAoBwF,mBAASsY,MAAtBc,EAAP,oBAEA,OAAQ,sBAAK1Z,UAAU,gBAAf,UACJ,eAAC2Z,EAAA,EAAD,CAAQ3Z,UAAU,qBAAqB4Z,OAAO,KAA9C,UACI,cAACD,EAAA,EAAOE,MAAR,UACI,sBAAM7Z,UAAU,iBAAiBG,QAAS,kBAAMnD,EAAQqG,KAAK,MAA7D,8BAEJ,cAACsW,EAAA,EAAOnD,OAAR,IACA,eAACmD,EAAA,EAAO9C,SAAR,CAAiB7W,UAAU,sBAA3B,UACI,eAAC8Z,EAAA,EAAD,CAAK9Z,UAAU,UAAf,UACI,cAAC,IAAD,CAAMA,UAAU,WAAWmB,GAAG,eAA9B,mBACA,cAAC,IAAD,CAAMnB,UAAU,WAAWmB,GAAG,gBAA9B,oBACA,cAAC,IAAD,CAAMnB,UAAU,WAAWmB,GAAG,iBAA9B,wBASJ,eAAC2Y,EAAA,EAAD,CAAK9Z,UAAU,eAAf,UACI,sBAAKA,UAAU,SAAf,UACI,cAAC,GAAD,CAAcA,UAAU,eAAeuD,MAAOmW,EAAWlW,SAAU,SAAAhK,GAAC,OAAImf,GAAgBnf,EAAE4F,OAAOkS,YACjG,cAACwI,EAAA,EAAIC,KAAL,CAAU1N,UAAQ,EAACrM,UAAU,OAA7B,2BAEJ,cAACga,EAAA,EAAD,CAAaC,YAAU,EAACjkB,MAAO,cAAC,IAAD,CAAiBgK,UAAU,eAAemL,KAAM+O,IAAQha,KAAK,OAA5F,SAOI,cAAC8Z,EAAA,EAAYzN,KAAb,CAAkBpM,QAASrF,EAA3B,+BAKhB,qBAAKkF,UAAU,OAAf,SACI,sBAAMA,UAAU,qDAAhB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOma,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,cAA4BikB,UAAWha,IACxD,cAAC,IAAD,CAAO8Z,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,+BAA6CikB,UAAWnY,IACzE,cAAC,IAAD,CAAOiY,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,uCAAqDikB,UAAWhU,KACjF,cAAC,IAAD,CAAO8T,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,+CAA6DikB,UAAWvH,KACzF,cAAC,IAAD,CAAOqH,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,gDAA8DikB,UAAW7C,KAC1F,cAAC,IAAD,CAAO2C,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,+BAA6CikB,UAAW/E,KAEzE,cAAC,IAAD,CAAO6E,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,WAAyBikB,UAAWpB,KACrD,cAAC,IAAD,CAAOkB,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,oBAAkCikB,UAAWlB,KAC9D,cAAC,IAAD,CAAOgB,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,eAA6BikB,UAAWjB,KACzD,cAAC,IAAD,CAAOe,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,sBAAoCikB,UAAWjB,KAEhE,cAAC,IAAD,CAAOe,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,UAAwBikB,UAAWhB,KACpD,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,cAA4BikB,UAAWf,KACxD,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,qBAAmCikB,UAAWf,KAC/D,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,mBAAiCikB,UAAWd,KAE7D,cAAC,IAAD,CAAOY,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,YAA0BikB,UAAWb,KACtD,cAAC,IAAD,CAAOW,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,2BAAyCikB,UAAWZ,KAErE,cAAC,IAAD,CAAOW,KAAK,IAAZ,SACI,cAAC,IAAD,CAAUjZ,GAAE,UAAKmF,EAAMlQ,IAAX,gCCrGpC,SAASkkB,KAEL,OACI,qBAAKta,UAAU,gCAAf,SACI,sBAAMA,UAAU,YAAhB,kCAMZsa,GAAkBla,aAAe,GAElBgB,mBAAWkZ,ICIpBrB,GAAYC,gBAAK,kBAAM,kCACvBC,GAAYD,gBAAK,kBAAM,+DAEvBK,GAAWL,gBAAK,kBAAM,iCACtBO,GAAaP,gBAAK,kBAAM,iCAqDf9X,mBAAWpG,cAnD1B,YAAqE,IAA3CsL,EAA0C,EAA1CA,MAAOtJ,EAAmC,EAAnCA,QAASlC,EAA0B,EAA1BA,iBAAkBK,EAAQ,EAARA,KACxD,EAAoBmF,mBAASsY,MAAtBc,EAAP,oBAEA,OAAQ,sBAAK1Z,UAAU,gBAAf,UACJ,eAAC2Z,EAAA,EAAD,CAAQY,GAAG,OAAOta,QAAQ,OAAO2Z,OAAO,KAAxC,UACI,cAACD,EAAA,EAAOE,MAAR,UACI,sBAAM7Z,UAAU,iBAAiBG,QAAS,kBAAMnD,EAAQqG,KAAK,MAA7D,8BAEJ,cAACsW,EAAA,EAAOnD,OAAR,IACA,eAACmD,EAAA,EAAO9C,SAAR,CAAiB7W,UAAU,sBAA3B,UACI,eAAC8Z,EAAA,EAAD,CAAK9Z,UAAU,UAAf,UACI,cAAC,IAAD,CAAMA,UAAU,WAAWmB,GAAE,UAAKmF,EAAMlQ,IAAX,WAA7B,oBACA,cAAC,IAAD,CAAM4J,UAAU,WAAWmB,GAAE,UAAKmF,EAAMlQ,IAAX,kBAAwB+E,EAAKtE,GAA7B,YAA7B,uBAGJ,eAACijB,EAAA,EAAD,CAAK9Z,UAAU,eAAf,UACI,sBAAKA,UAAU,SAAf,UACI,cAAC,GAAD,CAAcA,UAAU,eAAeuD,MAAOmW,EAAWlW,SAAU,SAAAhK,GAAC,OAAImf,GAAgBnf,EAAE4F,OAAOkS,YACjG,cAACwI,EAAA,EAAIC,KAAL,CAAU1N,UAAQ,EAACrM,UAAU,OAA7B,2BAEJ,cAACga,EAAA,EAAD,CAAaC,YAAU,EAACjkB,MAAO,cAAC,IAAD,CAAiBgK,UAAU,eAAemL,KAAM+O,IAAQha,KAAK,OAA5F,SAKI,cAAC8Z,EAAA,EAAYzN,KAAb,CAAkBpM,QAASrF,EAA3B,+BAMhB,sBAAMkF,UAAU,gDAAhB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOma,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,cAA4BikB,UAAWC,KACxD,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,UAAjB,SACI,oDAEJ,cAAC,IAAD,CAAO+jB,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,sBAAoCikB,UAAWd,KAChE,cAAC,IAAD,CAAOY,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,gCAA8CikB,UAAWZ,KAE1E,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,WAAyBikB,UAAWpB,KACrD,cAAC,IAAD,CAAOkB,OAAK,EAACC,KAAI,UAAK9T,EAAMlQ,IAAX,oBAAkCikB,UAAWlB,KAE9D,cAAC,IAAD,CAAOiB,KAAK,IAAZ,SACI,cAAC,IAAD,CAAUjZ,GAAE,UAAKmF,EAAMlQ,IAAX,2BCnEhC,SAASokB,KACL,OACI,qBAAKxa,UAAU,gCAAf,SACI,sBAAMA,UAAU,YAAhB,uBAMZwa,GAAYpa,aAAe,GAEZoa,U,SC2DApZ,mBAAWpG,cA7D1B,YAAmE,IAA9CG,EAA6C,EAA7CA,KAAMP,EAAuC,EAAvCA,gBAAiBoC,EAAsB,EAAtBA,QAAS5B,EAAa,EAAbA,UACjD,EAA0BkF,mBAAS,IAAnC,mBAAO5M,EAAP,KAAc+mB,EAAd,KACA,EAAgCna,mBAAS,IAAzC,mBAAO9I,EAAP,KAAiBkjB,EAAjB,KACA,EAAgCpa,oBAAS,GAAzC,mBAAOqa,EAAP,KAAiBC,EAAjB,KAMA,OAJAja,qBAAU,WACNxF,GAAQ6B,EAAQ6d,QAAQjc,kBACzB,CAACzD,IAGA,qBAAK6E,UAAU,SAAf,SACI,eAACkB,EAAA,EAAD,CAAMlB,UAAU,oBAAoByB,MAAO,CAAEmK,MAAO,eAApD,UACI,cAAC1K,EAAA,EAAK8L,OAAN,CAAalN,GAAG,KAAhB,mBACA,cAACoB,EAAA,EAAKgC,KAAN,UACI,eAACO,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,MAAN,CAAYoX,UAAU,iBAAtB,UACI,cAACrX,EAAA,EAAKE,MAAN,4BACA,cAACF,EAAA,EAAKG,QAAN,CAAc3G,KAAK,QAAQqQ,YAAY,cAAc/J,MAAO7P,EAAO8P,SAAU,SAAAhK,GAAC,OAAIihB,EAASjhB,EAAE4F,OAAOmE,UACpG,cAACE,EAAA,EAAK2J,KAAN,CAAWpN,UAAU,aAArB,+DAKJ,eAACyD,EAAA,EAAKC,MAAN,CAAYoX,UAAU,oBAAtB,UACI,cAACrX,EAAA,EAAKE,MAAN,uBACA,cAACF,EAAA,EAAKG,QAAN,CAAc3G,KAAK,WAAWqQ,YAAY,WAAW/J,MAAO/L,EAAUgM,SAAU,SAAAhK,GAAC,OAAIkhB,EAAYlhB,EAAE4F,OAAOmE,QACtGwX,WAAY,SAAA9Q,GAAK,MAAmB,UAAdA,EAAM1F,KAAoB3J,EAAgB,CAAElH,QAAO8D,YAAYwF,SAO7F,cAACyG,EAAA,EAAKC,MAAN,UACI,cAACD,EAAA,EAAK2J,KAAN,CAAWpN,UAAU,0BAArB,SACK2a,GAAYtnB,OAAO+H,OAI5B,cAACqI,EAAA,EAAKzC,IAAN,CAAUhB,UAAU,sBAApB,SACI,cAACoD,EAAA,EAAD,CAAQpD,UAAU,cAAcC,QAAQ,UAAUE,QAAS,WACvDya,GAAY,GACZhgB,EAAgB,CAAElH,QAAO8D,YAAYwF,IAFzC,qBAQJ,eAACyG,EAAA,EAAKzC,IAAN,CAAUhB,UAAU,wBAApB,UACI,oBAAIA,UAAU,UACd,cAACyD,EAAA,EAAK2J,KAAN,CAAWpN,UAAU,qBAArB,SACI,sBAAMA,UAAU,iCAAiCG,QAAS,kBAAMnD,EAAQqG,KAAK,mBAA7E,6CCvBjBjC,oBA/Bf,YAA0C,IAAZpE,EAAW,EAAXA,QAC1B,OACI,qBAAKgD,UAAU,SAAf,SACI,eAACkB,EAAA,EAAD,CAAMlB,UAAU,oBAAoByB,MAAO,CAAEmK,MAAO,eAApD,UACI,cAAC1K,EAAA,EAAK8L,OAAN,CAAalN,GAAG,KAAhB,8BACA,cAACoB,EAAA,EAAKgC,KAAN,UACI,eAACO,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,MAAN,CAAYoX,UAAU,iBAAtB,UACI,cAACrX,EAAA,EAAKE,MAAN,4BACA,cAACF,EAAA,EAAKG,QAAN,CAAc3G,KAAK,QAAQqQ,YAAY,gBACvC,cAAC7J,EAAA,EAAK2J,KAAN,CAAWpN,UAAU,aAArB,+CAKJ,eAACyD,EAAA,EAAKzC,IAAN,CAAUhB,UAAU,0BAApB,UACI,cAACoD,EAAA,EAAD,CAAQnD,QAAQ,YAAYE,QAAS,kBAAMnD,EAAQ8N,UAAnD,8BAIA,cAAC1H,EAAA,EAAD,CAAQpD,UAAU,OAAOC,QAAQ,UAAjC,oCCebmB,oBAnCf,YAAyC,IAAZpE,EAAW,EAAXA,QACzB,OACI,qBAAKgD,UAAU,SAAf,SACI,eAACkB,EAAA,EAAD,CAAMlB,UAAU,oBAAoByB,MAAO,CAAEmK,MAAO,eAApD,UACI,cAAC1K,EAAA,EAAK8L,OAAN,CAAalN,GAAG,KAAhB,4BACA,cAACoB,EAAA,EAAKgC,KAAN,UACI,eAACO,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,MAAN,CAAYoX,UAAU,4BAAtB,UACI,cAACrX,EAAA,EAAKE,MAAN,uBACA,cAACF,EAAA,EAAKG,QAAN,CAAc3G,KAAK,WAAWqQ,YAAY,aAC1C,cAAC7J,EAAA,EAAK2J,KAAN,CAAWpN,UAAU,aAArB,qEAKJ,eAACyD,EAAA,EAAKC,MAAN,CAAYoX,UAAU,mCAAtB,UACI,cAACrX,EAAA,EAAKE,MAAN,+BACA,cAACF,EAAA,EAAKG,QAAN,CAAc3G,KAAK,WAAWqQ,YAAY,qBAC1C,cAAC7J,EAAA,EAAK2J,KAAN,CAAWpN,UAAU,aAArB,uCAKJ,cAACyD,EAAA,EAAKzC,IAAN,CAAUhB,UAAU,sBAApB,SACI,cAACoD,EAAA,EAAD,CAAQnD,QAAQ,UAAUE,QAAS,kBAAMnD,EAAQqG,KAAK,gBAAtD,2C,UCvBtB2X,GAAW,UAAMnlB,IAAN,SA2BFolB,GA1BE,CACbC,2BAA4B,SAACxnB,EAAO8D,GAChC,IAAMpB,EAAG,UAAM4kB,GAAN,UACT,OAAO1kB,IAAMC,KAAKH,EAAK,CAAE1C,QAAO8D,aAAYuB,MAAK,SAAAmW,GAC7CzQ,aAAkByQ,EAAIiM,WAG9B3f,kBAAmB,WACf,GAAK2C,eAAL,CAGA,IAAM/H,EAAG,UAAM4kB,GAAN,YACT,OAAO1kB,IAAMK,IAAIP,GAAK2C,MAAK,SAAAoC,GAAI,MAAK,CAAEA,WAAS,SAAA3B,GAAC,OAAIA,OAExD4hB,kBAAmB,SAACC,GAChB,IAAMjlB,EAAG,UAAM4kB,GAAN,aACT,OAAO1kB,IAAMC,KAAKH,EAAX,2BAAqBilB,GAArB,IAAsCvf,KAAMS,KAASE,UAEhE6e,QAAS,WACL5c,gBAEJ6c,uBAAwB,SAAC7nB,MC+Id0N,mBAAWhF,cA7J1B,YAAoD,IAA5BY,EAA2B,EAA3BA,QAAShB,EAAkB,EAAlBA,eAC7B,EAA4BsE,mBAAS,CACjChJ,OAAQ,GAAIC,SAAU,GACtBC,SAAU,GAAIgkB,gBAAiB,GAAI9nB,MAAO,KAF9C,mBAAO+nB,EAAP,KAAeC,EAAf,KAIA,EAAgDpb,mBAAS,CACrDhJ,OAAQ,GAAIC,SAAU,GACtBC,SAAU,GAAIgkB,gBAAiB,GAAI9nB,MAAO,GAAIioB,WAAW,IAF7D,mBAAOC,EAAP,KAAyBC,EAAzB,KAIA,EAA8Bvb,mBAAS,IAAvC,mBAAOwb,EAAP,KAAgBC,EAAhB,KAEApb,qBAAU,WACN,IAAMqb,EAAa,GACnB,IAAK,IAAMzX,KAAO5H,KACd,GAAIxE,OAAOqM,eAAeC,KAAK9H,KAAY4H,GAAM,CAC7C,IAAMhB,EAAQ5G,KAAW4H,GACzByX,EAAW3Y,KAAK,CACZxM,GAAI0M,EACJJ,KAAMhQ,aAAeoQ,KAIjCwY,EAAWC,GACXN,EAAU,2BAAKD,GAAN,IAAcnkB,OAAQ0kB,EAAW,GAAGnlB,QAC9C,IAEH,IAAMolB,EAAiB,SAAC1Y,EAAOgB,GAC3BmX,EAAU,2BAAKD,GAAN,kBAAelX,EAAMhB,MAG5B2Y,EAAa,SAACjS,GAChBA,EAAMkS,iBACNlS,EAAMmS,kBAEN,MAAyCC,IAAjCC,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,QAC7BV,EAAoB,2BACbS,GADY,IACSX,WAAW,KAElCY,GACDtB,GAAQG,kBAAkB,CACtB1nB,MAAO+nB,EAAO/nB,MACd6D,SAAUkkB,EAAOlkB,SACjBD,OAAQmkB,EAAOnkB,OACfE,SAAUikB,EAAOjkB,WAClBuB,MAAK,SAAAmV,GACJlS,EAAe,mBAAoB,kDAAmDnE,KAAYG,SAClGgF,EAAQqG,KAAK,kBACd,SAAA7J,GAAC,OAAIwC,EAAe,IAAD,OAAKxC,EAAEiV,WAAP,aAAsBjV,EAAE6B,OAAS7B,EAAE6D,QAASxF,KAAYC,YAIhFukB,EAAuB,WAEzB,IAAMC,EAAsB,CACxB5oB,MAAO,GAAI6D,SAAU,GAAID,OAAQ,GACjCE,SAAU,GAAIgkB,gBAAiB,IAE/BgB,GAAQ,EA2BZ,OA1BKf,EAAO/nB,MAGAD,aAAcgoB,EAAO/nB,SAC7B4oB,EAAoB5oB,MAAQ,2BAC5B8oB,GAAQ,IAJRF,EAAoB5oB,MAAQ,wBAC5B8oB,GAAQ,GAKPf,EAAOlkB,WACR+kB,EAAoB/kB,SAAW,yBAC/BilB,GAAQ,GAEPf,EAAOnkB,SACRglB,EAAoBhlB,OAAS,4BAC7BklB,GAAQ,GAEPf,EAAOjkB,WACR8kB,EAAoB9kB,SAAW,wBAC/BglB,GAAQ,GAEPf,EAAOD,gBAGDC,EAAOD,kBAAoBC,EAAOjkB,WACzC8kB,EAAoBd,gBAAkB,8BACtCgB,GAAQ,IAJRF,EAAoBd,gBAAkB,wBACtCgB,GAAQ,GAKL,CAAEF,sBAAqBC,SAAUC,IAG5C,OACI,qBAAKxc,UAAU,SAAf,SACI,eAACkB,EAAA,EAAD,CAAMlB,UAAU,oBAAoByB,MAAO,CAACmK,MAAO,cAAe6Q,SAAU,SAA5E,UACI,cAACvb,EAAA,EAAK8L,OAAN,CAAalN,GAAG,KAAhB,sBACA,cAACoB,EAAA,EAAKgC,KAAN,UACI,eAACO,EAAA,EAAD,CAAMkY,UAAWC,EAAiBD,UAAWe,SAAUR,EAAvD,UACI,eAACzY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,4BACA,cAACF,EAAA,EAAKG,QAAN,CAAc+Y,UAAQ,EAAC1f,KAAK,QAAQqQ,YAAY,cAAc/J,MAAOkY,EAAO/nB,MAAOkpB,YAAahB,EAAiBloB,MAC7G8P,SAAU,SAAAhK,GAAC,OAAIyiB,EAAeziB,EAAE4F,OAAOmE,MAAO,YAClD,cAACE,EAAA,EAAKG,QAAQiZ,SAAd,CAAuB5f,KAAQ2e,EAAiBloB,MAAQ,UAAY,QAApE,SAA8EkoB,EAAiBloB,WAGnG,cAAC+P,EAAA,EAAKzC,IAAN,UACI,cAACC,EAAA,EAAD,CAAK4B,GAAI,GAAT,SACI,eAACY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,wBACA,cAACF,EAAA,EAAKG,QAAN,CAAc+Y,UAAQ,EAAC1f,KAAK,OAAOqQ,YAAY,kBAAkB/J,MAAOkY,EAAOlkB,SAAUqlB,YAAahB,EAAiBrkB,SACnHiM,SAAU,SAAAhK,GAAC,OAAIyiB,EAAeziB,EAAE4F,OAAOmE,MAAO,eAClD,cAACE,EAAA,EAAKG,QAAQiZ,SAAd,CAAuB5f,KAAQ2e,EAAiBrkB,SAAW,UAAY,QAAvE,SAAiFqkB,EAAiBrkB,kBAK9G,cAACkM,EAAA,EAAKzC,IAAN,UACI,cAACC,EAAA,EAAD,CAAK6b,GAAI,GAAIja,GAAI,GAAjB,SACI,eAACY,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,qBACA,cAACF,EAAA,EAAKG,QAAN,CAAc+Y,UAAQ,EAAC7c,GAAG,SAASyD,MAAOkY,EAAOnkB,OAAQslB,YAAahB,EAAiBtkB,OACnFkM,SAAU,SAAAhK,GAAC,OAAIyiB,EAAeziB,EAAE4F,OAAOmE,MAAO,WADlD,SAEKuY,EAAQ7iB,KAAI,SAAA3B,GAAM,OAAI,wBAAwBiM,MAAOjM,EAAOT,GAAtC,SAA2CS,EAAO6L,MAArC7L,EAAOT,SAE/C,cAAC4M,EAAA,EAAKG,QAAQiZ,SAAd,CAAuB5f,KAAQ2e,EAAiBtkB,OAAS,UAAY,QAArE,SAA+EskB,EAAiBtkB,gBAK5G,eAACmM,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,uBACA,cAACF,EAAA,EAAKG,QAAN,CAAc+Y,UAAQ,EAAC1f,KAAK,WAAWqQ,YAAY,WAAW/J,MAAOkY,EAAOjkB,SAAUolB,YAAahB,EAAiBpkB,SAChHgM,SAAU,SAAAhK,GAAC,OAAIyiB,EAAeziB,EAAE4F,OAAOmE,MAAO,eAClD,cAACE,EAAA,EAAKG,QAAQiZ,SAAd,CAAuB5f,KAAQ2e,EAAiBpkB,SAAW,UAAY,QAAvE,SAAiFokB,EAAiBpkB,cAGtG,eAACiM,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,+BACA,cAACF,EAAA,EAAKG,QAAN,CAAc+Y,UAAQ,EAAC1f,KAAK,WAAWqQ,YAAY,mBAAmB/J,MAAOkY,EAAOD,gBAAiBoB,YAAahB,EAAiBJ,gBAC/HhY,SAAU,SAAAhK,GAAC,OAAIyiB,EAAeziB,EAAE4F,OAAOmE,MAAO,sBAClD,cAACE,EAAA,EAAKG,QAAQiZ,SAAd,CAAuB5f,KAAQ2e,EAAiBJ,gBAAkB,UAAY,QAA9E,SAAwFI,EAAiBJ,qBAG7G,cAAC/X,EAAA,EAAKzC,IAAN,CAAUhB,UAAU,sBAApB,SACI,cAACoD,EAAA,EAAD,CAAQpD,UAAU,OAAOC,QAAQ,UAAUE,QAAS+b,EAApD,wBAKJ,eAACzY,EAAA,EAAKzC,IAAN,CAAUhB,UAAU,wBAApB,UACI,oBAAIA,UAAU,UACd,cAACyD,EAAA,EAAK2J,KAAN,CAAWpN,UAAU,qBAArB,SACI,sBAAMA,UAAU,iCAAiCG,QAAS,kBAAMnD,EAAQqG,KAAK,gBAA7E,oDCrGjBjC,mBAAWpG,cA5C1B,YAA+D,IAApCG,EAAmC,EAAnCA,KAAM6B,EAA6B,EAA7BA,QAASlC,EAAoB,EAApBA,iBACtC,EAAoBwF,mBAASsY,MAAtBc,EAAP,oBAEA,OAAQ,sBAAK1Z,UAAU,gBAAf,UACJ,eAAC2Z,EAAA,EAAD,CAAQY,GAAG,OAAOta,QAAQ,OAAO2Z,OAAO,KAAxC,UACI,cAACD,EAAA,EAAOE,MAAR,UACI,sBAAM7Z,UAAU,iBAAiBG,QAAS,kBAAMnD,EAAQqG,KAAK,MAA7D,8BAEJ,cAACsW,EAAA,EAAOnD,OAAR,IACA,cAACmD,EAAA,EAAO9C,SAAR,CAAiB7W,UAAU,sBAA3B,SACI,eAAC8Z,EAAA,EAAD,CAAK9Z,UAAU,eAAf,UACO7E,EAAO,cAAC2e,EAAA,EAAIC,KAAL,CAAU/Z,UAAU,OAAOG,QAAS,kBAAMnD,EAAQqG,KAAKzE,iBAAvD,6BAA+G,KACzH,sBAAKoB,UAAU,SAAf,UACI,cAAC,GAAD,CAAcA,UAAU,eAAeuD,MAAOmW,EAAWlW,SAAU,SAAAhK,GAAC,OAAImf,GAAgBnf,EAAE4F,OAAOkS,YACjG,cAACwI,EAAA,EAAIC,KAAL,CAAU1N,UAAQ,EAACrM,UAAU,OAA7B,2BAEF7E,EAEE,cAAC2e,EAAA,EAAIC,KAAL,CAAU/Z,UAAU,OAAOG,QAASrF,EAApC,qBADA,cAACgf,EAAA,EAAIC,KAAL,CAAU/Z,UAAU,OAAOG,QAAS,kBAAMnD,EAAQqG,KAAK,gBAAvD,4BAOhB,sBAAMrD,UAAU,YAAhB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOma,OAAK,EAACC,KAAK,IAAIC,UAAWG,KACjC,cAAC,IAAD,CAAOJ,KAAK,QAAZ,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,cAAcC,UAAW0C,KAC3C,cAAC,IAAD,CAAO5C,OAAK,EAACC,KAAK,wBAAwBC,UAAW2C,KACrD,cAAC,IAAD,CAAO5C,KAAK,uBAAuBC,UAAW4C,KAC9C,cAAC,IAAD,CAAO9C,OAAK,EAACC,KAAK,iBAAiBC,UAAW6C,UAGtD,cAAC,IAAD,CAAO9C,KAAK,IAAZ,SACI,cAAC,IAAD,CAAUjZ,GAAG,oB,UC3BlB/E,iBArBG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,OAAQH,EAAwB,EAAxBA,kBACzB,OAAQ,qBAAKuF,MAAO,CAAEmK,MAAO,IAAKlK,SAAU,QAASyb,MAAO,EAAGvb,IAAK,GAAIwb,OAAQ,MAC5Epd,UAAU,qCADN,SAEH3D,EAAOpD,KAAI,SAACokB,EAAOC,GAAR,OACZ,eAACC,GAAA,EAAD,CAAgBvd,UAAU,QAAQyB,MAAO,CAAE+b,UAAW,SAAWhc,WAAS,EAACic,QAAS,kBAAMvhB,EAAkBmhB,EAAMxmB,KAAlH,UACI,cAAC0mB,GAAA,EAAMvQ,OAAP,CAAchN,UAAW4W,KAAW,CAChC,aAAcyG,EAAM3X,SAAW7N,KAAYG,QAC3C,YAAaqlB,EAAM3X,SAAW7N,KAAYC,OAC1C,aAAculB,EAAM3X,SAAW7N,KAAYE,QAC3C,UAAWslB,EAAM3X,SAAW7N,KAAYI,OAJ5C,SAMI,wBAAQ+H,UAAU,qBAAlB,SAAwCqd,EAAMrnB,UAElD,cAACunB,GAAA,EAAMra,KAAP,UACKma,EAAMK,gBAVHJ,WCuCLlc,mBAAW3F,cA7B1B,YAA4F,IAA7EuB,EAA4E,EAA5EA,QAAStB,EAAmE,EAAnEA,cAAeE,EAAoD,EAApDA,cAAeC,EAAqC,EAArCA,SAAUN,EAA2B,EAA3BA,wBAqB9D,OApBAoF,qBAAU,WACRpF,EAAwByB,GAAS,MAoBjC,cAAC,WAAD,UACKtB,EAlBkB,eAAC,WAAD,WACvB,cAAC,GAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0e,KAAK,SAAZ,SACGxe,GAAiBoD,aAAQnD,GAAY,cAAC,GAAD,IAAkB,cAAC,IAAD,CAAUsF,GAAG,QAEvE,cAAC,IAAD,CAAOiZ,KAAK,YAAZ,SACGxe,IAAkBoD,aAAQnD,GAAY,cAAC,GAAD,IAAqB,cAAC,IAAD,CAAUsF,GAAG,QAE3E,cAAC,IAAD,CAAOiZ,KAAK,IAAZ,SACE,cAAC,GAAD,YAQiB,cAAC,EAAD,U,4BCzBnBuD,GAAa,CACfxiB,UAAMQ,EACNiiB,oBAAqB,GACrBC,SAAS,EACTxiB,MAAO,IA0CIH,GAvCK,WAAiC,IAAhC4iB,EAA+B,uDAAvBH,GAAYI,EAAW,uCAChD,OAAQA,EAAO9gB,MACX,KAAKxI,KACD,OAAO,2BAAKqpB,GAAZ,IAAmB3iB,KAAM,KAAM0iB,SAAS,EAAMxiB,MAAO,KACzD,KAAK3G,KACD,OAAO,2BAAKopB,GAAZ,IAAmBD,SAAS,EAAO1iB,KAAM,KAAME,MAAO,KAC1D,KAAK1G,KACD,OAAO,2BAAKmpB,GAAZ,IAAmBD,SAAS,EAAO1iB,KAAM,KAAME,MAAO0iB,EAAO7gB,QAAQG,UACzE,KAAKzI,KACD,OAAO,2BAAKkpB,GAAZ,IAAmBD,SAAS,EAAMxiB,MAAO,KAC7C,KAAKxG,KACD,OAAO,2BAAKipB,GAAZ,IAAmBD,SAAS,EAAO1iB,KAAM4iB,EAAO7gB,QAAQ/B,KAAME,MAAO,KACzE,KAAKvG,KACD,OAAO,2BAAKgpB,GAAZ,IAAmBD,SAAS,EAAO1iB,KAAM,KAAME,MAAO0iB,EAAO7gB,QAAQG,UACzE,KAAKlI,KACD,OAAO,2BAAK2oB,GAAZ,IAAmBD,SAAS,EAAMxiB,MAAO,KAC7C,KAAKjG,KACD,OAAO,2BAAK0oB,GAAZ,IAAmBD,SAAS,EAAOD,oBAAqBG,EAAO7gB,QAAQxJ,MAAO2H,MAAO,KACzF,KAAKhG,KACD,OAAO,2BAAKyoB,GAAZ,IAAmBD,SAAS,EAAOD,oBAAqB,GAAIviB,MAAO0iB,EAAO7gB,QAAQG,UACtF,KAAK/H,KACD,OAAO,2BAAKwoB,GAAZ,IAAmBD,SAAS,EAAMxiB,MAAO,KAC7C,KAAK9F,KACD,OAAO,2BAAKuoB,GAAZ,IAAmBD,SAAS,EAAOxiB,MAAO,KAC9C,KAAK7F,KACD,OAAO,2BAAKsoB,GAAZ,IAAmBD,SAAS,EAAOxiB,MAAO0iB,EAAO7gB,QAAQG,UAC7D,KAAKtI,KACD,OAAO,2BAAK+oB,GAAZ,IAAmBD,SAAS,EAAMxiB,MAAO,KAC7C,KAAKrG,KACD,OAAO,2BAAK8oB,GAAZ,IAAmBD,SAAS,EAAOxiB,MAAO,KAC9C,KAAKpG,KACD,OAAO,2BAAK6oB,GAAZ,IAAmBD,SAAS,EAAOxiB,MAAO0iB,EAAO7gB,QAAQG,UAC7D,KAAKnI,KACD,OAAO,2BAAK4oB,GAAZ,IAAmB3iB,KAAM,KAAME,MAAO,KAC1C,QACI,OAAO,eAAKyiB,KCvDlBE,GAAoB,CACtB3hB,OAAQ,IA8BGC,GA3BM,WAAwC,IAAvCwhB,EAAsC,uDAA9BE,GAAmBD,EAAW,uCACxD,OAAQA,EAAO9gB,MACX,KAAKxH,KACD,MAAO,CACH4G,OAAQyhB,EAAMzhB,OAAOmN,OAAO,CAAC,CACzB3S,GAAIknB,EAAO7gB,QAAQrG,GACnBb,MAAO+nB,EAAO7gB,QAAQlH,MACtB0P,OAAQqY,EAAO7gB,QAAQwI,OACvBgY,YAAaK,EAAO7gB,QAAQwgB,YAC5BhQ,UAAW,IAAI5Z,SAG3B,KAAK4B,KACD,IAAMuoB,EAAY3T,KAAKC,MAAMD,KAAK1F,UAAUkZ,EAAMzhB,SAC5CyP,EAAQmS,EAAUzP,WAAU,SAAA6O,GAAK,OAAIA,EAAMxmB,KAAOknB,EAAO7gB,QAAQrG,MACvE,OAAIiV,GAAS,GACTmS,EAAU9I,OAAOrJ,EAAO,GACjB,CAAEzP,OAAQ4hB,IAEdH,EACX,KAAKnoB,KACD,MAAO,CAAE0G,OAAQ,IACrB,QACI,OAAOyhB,ICvBJI,GALKC,aAAgB,CAChCjjB,eACAoB,kB,+BCuBa8hB,I,aAOPC,I,aAaOC,I,aAOPC,I,aAkBOC,I,aAUPC,I,aAeOC,I,aASPC,I,aAOOC,I,aAWPC,I,aAcOC,I,aAWPC,I,aAgBeC,IA1IlB,SAAUZ,KAAV,kEACH,OADG,SACGa,aAAUxqB,KAAY4pB,IADzB,wCAIP,IAAMa,GAA2B,yCAAG,WAAOxrB,EAAO8D,GAAd,UAAAod,EAAA,sEAC1BqG,GAAQC,2BAA2BxnB,EAAO8D,GADhB,mFAAH,wDAGjC,SAAU6mB,GAAV,mFAKQ,OAL2BnhB,EAAnC,EAAmCA,QAAnC,EACgCA,EAAQH,aAA5BrJ,EADZ,EACYA,MAAO8D,EADnB,EACmBA,SACPwF,EAAYE,EAAZF,QACRie,GAAQK,UAHZ,kBAKc7W,aAAKya,GAA6BxrB,EAAO8D,GALvD,OAMQ,OANR,SAMcT,aAAIoG,gBANlB,OAOQ,OAPR,UAOcpG,aAAIyE,aAAkBwB,IAPpC,gCASQ,OATR,oCAScjG,aAAIqG,aAAe,EAAD,KAThC,uDAaO,SAAUkhB,KAAV,kEACH,OADG,SACGW,aAAUrqB,KAAqB2pB,IADlC,wCAIP,IAAMY,GAAsB,yCAAG,uBAAAvK,EAAA,sEACrBqG,GAAQzf,oBADa,mFAAH,qDAG5B,SAAU+iB,GAAV,qFAGkC,OAHDrhB,EAAjC,EAAiCA,QACrBF,EAA2BE,EAA3BF,QAASM,EAAkBJ,EAAlBI,cADrB,kBAGwCmH,aAAK0a,IAH7C,mBAGgBhkB,EAHhB,EAGgBA,KAAMkC,EAHtB,EAGsBA,SAEVlC,EALZ,iBAMY,OANZ,UAMkBpE,aAAIwG,aAAyBpC,IAN/C,QAOgBmC,GACAN,EAAQ6d,QAAQjc,gBARhC,wBAWY,OAXZ,UAWkB7H,aAAIyG,aAAuBH,IAX7C,gCAcQ,OAdR,oCAcctG,aAAIyG,aAAuB,EAAD,KAdxC,uDAkBO,SAAUghB,KAAV,kEACH,OADG,SACGS,aAAUlqB,KAAe0pB,IAD5B,wCAIP,IAAMW,GAAiB,yCAAG,WAAO/D,GAAP,UAAAzG,EAAA,sEAChBqG,GACDoE,aAAahE,GACbtiB,MAAK,SAAAumB,GAAe,OAAIA,KACxBC,OAAM,SAAAlkB,GAAK,OAAIA,KAJE,mFAAH,sDAMvB,SAAUojB,GAAV,+EAGqC,OAHCvhB,EAAtC,EAAsCA,QAC1BF,EAAYE,EAAZF,QADZ,kBAG2CyH,aAAK2a,GAAmBliB,EAAQme,iBAH3E,WAGcmE,EAHd,QAIkCC,QAJlC,iBAKY,OALZ,SAKkB1oB,aAAI8G,gBALtB,OAMYb,EAAQqG,KAAK,eANzB,wBAQY,OARZ,UAQkBtM,aAAI+G,aAAkB0hB,EAAqBniB,UAR7D,gCAWQ,OAXR,oCAWctG,aAAI+G,aAAkB,EAAD,KAXnC,uDAeO,SAAU4gB,KAAV,kEACH,OADG,SACGO,aAAU/pB,KAAaypB,IAD1B,wCAIP,IAAMe,GAAW,yCAAG,WAAO1iB,GAAP,UAAA4X,EAAA,sDAChBqG,GAAQK,UACRte,EAAQ6d,QAAQ,KAFA,2CAAH,sDAKjB,SAAU8D,GAAV,6EAGQ,OAHWzhB,EAAnB,EAAmBA,QACPF,EAAYE,EAAZF,QADZ,kBAGcyH,aAAKib,GAAa1iB,GAHhC,2GAOO,SAAU4hB,KAAV,kEACH,OADG,SACGK,aAAU9pB,KAAiB0pB,IAD9B,wCAIP,IAAMc,GAAmB,yCAAG,WAAOjsB,GAAP,UAAAkhB,EAAA,sEACXqG,GACRM,uBAAuB7nB,GACvBqF,MAAK,SAAAumB,GAAe,OAAIA,KACxBC,OAAM,SAAAlkB,GAAK,OAAIA,KAJI,mFAAH,sDAOzB,SAAUwjB,GAAV,+EAGqC,OAHV3hB,EAA3B,EAA2BA,QACfxJ,EAAUwJ,EAAQ0iB,kBAAlBlsB,MADZ,kBAG2C+Q,aAAKkb,GAAqBjsB,GAHrE,WAGcmsB,EAHd,QAIkCJ,QAJlC,iBAKY,OALZ,SAKkB1oB,aAAI0G,aAAsB/J,IAL5C,+BAOY,OAPZ,UAOkBqD,aAAI2G,aAAoBmiB,EAAqBxiB,UAP/D,gCAUQ,OAVR,oCAUctG,aAAI2G,aAAoB,EAAD,KAVrC,uDAcO,SAAUohB,KAAV,kEACH,OADG,SACGG,aAAU3pB,KAAgBypB,IAD7B,wCAIP,IAAMe,GAAkB,yCAAG,WAAOC,EAAmBC,GAA1B,UAAApL,EAAA,sEACVqG,GACRgF,qBAAqBF,EAAmBC,GACxCjnB,MAAK,SAAAumB,GAAe,OAAIA,KACxBC,OAAM,SAAClkB,GAAD,OAAWA,KAJC,mFAAH,wDAOxB,SAAU0jB,GAAV,iFAIoC,OAJV7hB,EAA1B,EAA0BA,QACd1F,EAAa0F,EAAQgjB,iBAArB1oB,SACAwF,EAAYE,EAAZF,QAFZ,kBAI0CyH,aAAKqb,GAAoBtoB,GAJnE,WAIc2oB,EAJd,QAKiCV,QALjC,iBAMY,OANZ,UAMkB1oB,aAAI4G,gBANtB,QAOYX,EAAQqG,KAAK,eAPzB,wBASY,OATZ,UASkBtM,aAAI6G,aAAmBuiB,EAAoB9iB,UAT7D,gCAYQ,OAZR,oCAYctG,aAAI6G,aAAmB,EAAD,KAZpC,uDAgBe,SAAUohB,KAAV,kEACX,OADW,SACLoB,aAAI,CACNC,aAAKjC,IACLiC,aAAK/B,IACL+B,aAAK3B,IACL2B,aAAK7B,IACL6B,aAAKzB,IACLyB,aAAKvB,MAPE,wC,0BC/JEwB,I,aAMPC,I,aAMevB,IAZlB,SAAUsB,KAAV,kEACH,OADG,SACGrB,aAAUxpB,KAAW8qB,IADxB,wCAIP,IAAMC,GAAQ,SAAAC,GAAI,OAAI,IAAInnB,SAAQ,SAAAC,GAAO,OAAIyS,WAAWzS,EAASknB,OAEjE,SAAUF,GAAV,6EAEI,OAFwBrjB,EAA5B,EAA4BA,QAChBrG,EAAOqG,EAAPrG,GADZ,SAEU4N,aAAK+b,GAAO,KAFtB,OAGI,OAHJ,SAGUzpB,aAAIoF,aAAYtF,IAH1B,wCAMe,SAAUmoB,KAAV,kEACX,OADW,SACLoB,aAAI,CACNC,aAAKC,MAFE,wC,iBCjBUtB,IAAV,SAAUA,GAAS0B,GAAnB,kEACb,OADa,SACPN,aAAI,CACRO,KACAC,OAHW,wCCEf,IAAMC,GAAiBC,eACjBC,GAAc,CAACF,IAEfG,GAAQC,aACV/C,GACAgD,aAAQC,KAAe,WAAf,EAAmBJ,MAG/BF,GAAeO,IAAIC,IAEJL,UCJAM,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBzoB,MAAK,YAAkD,IAA/C0oB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCGdO,IAASC,OAEP,cAAC,IAAD,CAAUf,MAAOA,GAAjB,SACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUgB,SAAU,cAAC,EAAD,IAApB,SACE,cAAC,GAAD,UAKNC,SAASC,eAAe,SAM1BZ,M,gCC1BA,kCAAO,IAAMjpB,EAAU,CACnB2B,MAAO,QACP6e,KAAM,S,gCCFV,wFAOa5c,EAAW,SAACjG,EAAO0nB,GAAR,IAAqBhY,EAArB,uDAA8B7N,IAAYI,KAA1C,MAAoD,CAAEgF,KAAMxH,IAAWyH,QAAS,CACpGlH,QACA0nB,cACAhY,SACA7O,GAAG,SAAD,QAAW,IAAI/C,MAAOC,cAEfoI,EAAc,SAAAtF,GAAE,MAAK,CAAEoG,KAAMvH,IAAcwH,QAAS,CAAErG,U","file":"static/js/main.163d284f.chunk.js","sourcesContent":["import moment from 'moment';\r\n\r\nexport const capitalizeSentence = (sentence, forEachWord = false) => {\r\n    if (forEachWord) {\r\n        return sentence.split(' ').map(eachWord => capitalizeWord(eachWord)).join(' ');\r\n    } else {\r\n        return capitalizeWord(sentence);\r\n    }\r\n};\r\n\r\nexport const capitalizeWord = (word) => {\r\n    return String(word[0]).toUpperCase() + String(word.substring(1)).toLowerCase();\r\n}\r\n\r\nexport const validateEmail = (email) => {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport const timeFromNow = (timestamp) => {\r\n    timestamp = new Date(timestamp).getTime();\r\n    \r\n    return moment(timestamp).fromNow()\r\n}\r\n\r\nexport const secsToHMS = (currentSeconds) => {\r\n    return new Date(currentSeconds * 1000).toISOString().substr(11, 8)\r\n}\r\n\r\nexport const dateToLocalString = (stamp) => {\r\n    return new Date(stamp).toLocaleString()\r\n}\r\n","/* AUTHENTICATION */\r\nexport const LOGIN_USER = 'LOGIN_USER';\r\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\r\nexport const LOGIN_USER_ERROR = 'LOGIN_USER_ERROR';\r\nexport const VERIFY_ACCESS_TOKEN = 'VERIFY-ACCESS-TOKEN';\r\nexport const VERIFY_ACCESS_TOKEN_SUCCESS = 'VERIFY-ACCESS-TOKEN-SUCCESS';\r\nexport const VERIFY_ACCESS_TOKEN_ERROR = 'VERIFY-ACCESS-TOKEN-ERROR';\r\nexport const REGISTER_USER = 'REGISTER_USER';\r\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\r\nexport const REGISTER_USER_ERROR = 'REGISTER_USER_ERROR';\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\nexport const FORGOT_PASSWORD = 'FORGOT_PASSWORD';\r\nexport const FORGOT_PASSWORD_SUCCESS = 'FORGOT_PASSWORD_SUCCESS';\r\nexport const FORGOT_PASSWORD_ERROR = 'FORGOT_PASSWORD_ERROR';\r\nexport const RESET_PASSWORD = 'RESET_PASSWORD';\r\nexport const RESET_PASSWORD_SUCCESS = 'RESET_PASSWORD_SUCCESS';\r\nexport const RESET_PASSWORD_ERROR = 'RESET_PASSWORD_ERROR';\r\n\r\n// Toast\r\nexport const TOAST_ADD = 'TOAST-ADD';\r\nexport const TOAST_REMOVE = 'TOAST-REMOVE';\r\nexport const TOAST_REMOVE_ALL = 'TOAST-REMOVE-ALL';\r\n","import axios from './configuration';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst VIDEOS_BASE_URL = `${APIServerURL}/videos`;\r\nconst VideosAPI =  {\r\n    addVideo: ({title, file}) => {\r\n        let formData = new FormData();\r\n        const url = `${VIDEOS_BASE_URL}`;\r\n\r\n        formData.append('title', title);\r\n        formData.append('file', file);\r\n\r\n        return axios.post(url, formData);\r\n    },\r\n    getVideos: ({ page, perPage }) => {\r\n        const url = `${VIDEOS_BASE_URL}?page=${page}&perPage=${perPage}`;\r\n        return axios.get(url);\r\n    },\r\n    getVideo: ({id}) => {\r\n        return axios.get(`${VIDEOS_BASE_URL}/${id}`)\r\n    },\r\n    updateVideo: ({id, title, file}) => {\r\n        let formData = new FormData();\r\n        const url = `${VIDEOS_BASE_URL}/${id}/update`;\r\n\r\n        formData.append('title', title);\r\n        formData.append('file', file);\r\n        return axios.put(url, formData);\r\n    },\r\n    remove: ({id}) => {\r\n        const url = `${VIDEOS_BASE_URL}/${id}`;\r\n\r\n        return axios.delete(url);\r\n    },\r\n    removeVideo: ({id}) => {\r\n        const url = `${VIDEOS_BASE_URL}/${id}`;\r\n        return axios.delete(`${url}/video`)\r\n    }\r\n}\r\n\r\nexport default VideosAPI;\r\n","import axios from './configuration';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst BASE_URL = `${APIServerURL}/users`;\r\nconst UserAPI =  {\r\n    createOne: ({email, gender, fullName, password}) => {\r\n        return axios.post(`${BASE_URL}`, {\r\n            email, gender, fullName, password\r\n        })\r\n    },\r\n    getAll: ({ page, perPage }) => {\r\n        const url = `${BASE_URL}?page=${page}&perPage=${perPage}`;\r\n        return axios.get(url);\r\n    },\r\n    getOne: ({id}) => {\r\n        return axios.get(`${BASE_URL}/${id}`)\r\n    },\r\n    updateOne: ({id, email, fullName, gender}) => {\r\n        const url = `${BASE_URL}/${id}/update`;\r\n\r\n        return axios.put(url, {email, fullName, gender});\r\n    },\r\n    removeOne: ({id}) => {\r\n        const url = `${BASE_URL}/${id}`;\r\n\r\n        return axios.delete(url);\r\n    },\r\n}\r\n\r\nexport default UserAPI;\r\n","export const ToastStatus = {\r\n    Danger: 'DANGER',\r\n    Warning: 'WARNING',\r\n    Success: 'SUCCESS',\r\n    Info: 'INFO'\r\n};\r\n","import { defaultTheme, ConstantNames } from './common/constants/default-values';\r\nimport { UITheme } from './common/enums/theme';\r\n\r\nconst themes = Object.values(UITheme);\r\n\r\nconst previousUITheme = localStorage.getItem(ConstantNames.UITheme);\r\nconst currentUITheme = (previousUITheme && themes.includes(previousUITheme)) ? previousUITheme : defaultTheme;\r\nlocalStorage.setItem(ConstantNames.UITheme, currentUITheme);\r\n\r\nconst render = () => {\r\n  import(`./assets/scss/themes/${String(currentUITheme).toLocaleLowerCase()}.scss`).then(() => {\r\n    require('./common/api/configuration');\r\n    require('./AppRenderer');\r\n  });\r\n};\r\n\r\nrender();\r\n","var map = {\n\t\"./colors.scss\": [\n\t\t393,\n\t\t8\n\t],\n\t\"./dark.scss\": [\n\t\t394,\n\t\t9\n\t],\n\t\"./light.scss\": [\n\t\t395,\n\t\t10\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 204;\nmodule.exports = webpackAsyncContext;","import { UITheme } from '../enums/theme';\r\n\r\n// UI Theme\r\nexport const defaultTheme = UITheme.Light;\r\n\r\n// Const Names\r\nexport const ConstantNames = {\r\n    AccessToken: 'access-token',\r\n    UITheme: 'ui-theme'\r\n}\r\n\r\n// API Integration\r\nconst env = \"development\";\r\n// const env = process.env.NODE_ENV || \"development\";\r\nconst HOST = \"http://localhost\";\r\n\r\nconst config = {\r\n    development: {\r\n        APIServerURL: `${HOST}:3300/apis`,\r\n        AssetsServerURL: `${HOST}:3300`,\r\n        SocketServerURL: `${HOST}:3030`,\r\n    },\r\n    // test: {\r\n    //     APIServerURL: `http://ace4327ead28.ngrok.io/apis`,\r\n    //     AssetsServerURL: `http://ace4327ead28.ngrok.io`,\r\n    //     SocketServerURL: `http://720e10704398.ngrok.io`,\r\n    // },\r\n    // production: {\r\n    //     APIServerURL: `http://ace4327ead28.ngrok.io/apis`,\r\n    //     AssetsServerURL: `http://ace4327ead28.ngrok.io`,\r\n    //     SocketServerURL: `http://720e10704398.ngrok.io`,\r\n    // }\r\n}\r\n\r\nconsole.log(\":process.env.APIServerURL: \", process.env.APIServerURL);\r\n\r\nexport const APIServerURL       = process.env.APIServerURL || config[env].APIServerURL;\r\nexport const AssetsServerURL    = process.env.AssetsServerURL || config[env].AssetsServerURL;\r\nexport const SocketServerURL    = process.env.SocketServerURL || config[env].SocketServerURL;\r\n","import { connect } from 'react-redux';\r\n\r\nimport { loginUser, logoutUser, verifyAccessToken } from './actions/auth-actions';\r\nimport { addToast, removeToast } from './actions/toast-actions';\r\n\r\n// AUTHENTICATION\r\nconst mapUserStateToProps = ({ authReducer }) => {\r\n    return {\r\n        user: authReducer.user,\r\n        authError: authReducer.error,\r\n    }\r\n}\r\nconst mapAuthDispatchToProps = { loginUserAction: loginUser, logoutUserAction: logoutUser };\r\nexport const connectAuth = connect( mapUserStateToProps, mapAuthDispatchToProps );\r\n\r\nconst mapAuthStateToProps = ({ authReducer }) => ({\r\n    tokenVerified: !(authReducer.user === undefined),\r\n    authenticated: !!authReducer.user,\r\n    userRole: !authReducer.user ? null : authReducer.user.role });\r\nconst mapAuthCheckDispatchToProps = { verifyAccessTokenAction: verifyAccessToken };\r\nexport const connectAuthCheck = connect(mapAuthStateToProps, mapAuthCheckDispatchToProps);\r\n\r\n// TOASTS\r\nconst mapToastsToProps = ({ toastReducer }) => ({ toasts: toastReducer.toasts });\r\nconst mapToastsDispatchToProps = { addToastAction: addToast, removeToastAction: removeToast };\r\nexport const connectToasts = connect(mapToastsToProps, mapToastsDispatchToProps);\r\n","export const UserRole = {\r\n    SuperAdmin: 'SUPER-ADMIN',\r\n    Admin: 'ADMIN',\r\n    User: 'User'\r\n};\r\n\r\nexport const UserGender = {\r\n    Male: 'MALE',\r\n    Female: 'FEMALE',\r\n    Other: 'OTHER',\r\n};\r\n","import {\r\n    LOGIN_USER,\r\n    LOGIN_USER_SUCCESS,\r\n    LOGIN_USER_ERROR,\r\n    VERIFY_ACCESS_TOKEN,\r\n    VERIFY_ACCESS_TOKEN_SUCCESS,\r\n    VERIFY_ACCESS_TOKEN_ERROR,\r\n    LOGOUT_USER,\r\n    REGISTER_USER,\r\n    REGISTER_USER_SUCCESS,\r\n    REGISTER_USER_ERROR,\r\n    FORGOT_PASSWORD,\r\n    FORGOT_PASSWORD_SUCCESS,\r\n    FORGOT_PASSWORD_ERROR,\r\n    RESET_PASSWORD,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_ERROR,\r\n} from './types';\r\n\r\nexport const loginUser = (loginUserDto, history) => ({\r\n    type: LOGIN_USER,\r\n    payload: { loginUserDto, history },\r\n});\r\nexport const loginUserSuccess = () => ({\r\n    type: LOGIN_USER_SUCCESS,\r\n    payload: {},\r\n});\r\nexport const loginUserError = (message) => ({\r\n    type: LOGIN_USER_ERROR,\r\n    payload: { message },\r\n});\r\n\r\nexport const verifyAccessToken = (history, forceRedirect = true) => ({\r\n    type: VERIFY_ACCESS_TOKEN,\r\n    payload: { history, forceRedirect },\r\n});\r\nexport const verifyAccessTokenSuccess = (user) => ({\r\n    type: VERIFY_ACCESS_TOKEN_SUCCESS,\r\n    payload: { user },\r\n});\r\nexport const verifyAccessTokenError = (message) => ({\r\n    type: VERIFY_ACCESS_TOKEN_ERROR,\r\n    payload: { message },\r\n});\r\n\r\nexport const forgotPassword = (forgotPasswordDto, history) => ({\r\n    type: FORGOT_PASSWORD,\r\n    payload: { forgotPasswordDto, history },\r\n});\r\nexport const forgotPasswordSuccess = (email) => ({\r\n    type: FORGOT_PASSWORD_SUCCESS,\r\n    payload: { email },\r\n});\r\nexport const forgotPasswordError = (message) => ({\r\n    type: FORGOT_PASSWORD_ERROR,\r\n    payload: { message },\r\n});\r\n\r\nexport const resetPassword = ({ password, history }) => ({\r\n    type: RESET_PASSWORD,\r\n    payload: { resetPasswordDto: { password }, history },\r\n});\r\nexport const resetPasswordSuccess = () => ({\r\n    type: RESET_PASSWORD_SUCCESS,\r\n    payload: {},\r\n});\r\nexport const resetPasswordError = (message) => ({\r\n    type: RESET_PASSWORD_ERROR,\r\n    payload: { message },\r\n});\r\n\r\nexport const registerUser = (registerUserDto, history) => ({\r\n    type: REGISTER_USER,\r\n    payload: { registerUserDto, history },\r\n});\r\nexport const registerUserSuccess = () => ({\r\n    type: REGISTER_USER_SUCCESS,\r\n    payload: {},\r\n});\r\nexport const registerUserError = (message) => ({\r\n    type: REGISTER_USER_ERROR,\r\n    payload: { message },\r\n});\r\n\r\nexport const logoutUser = (history) => ({\r\n    type: LOGOUT_USER,\r\n    payload: { history },\r\n});\r\n","import axios from 'axios';\r\nimport { getAccessToken } from '../utils/auth';\r\n\r\n// Add a request interceptor\r\naxios.interceptors.request.use(function (config) {\r\n    const at = getAccessToken();\r\n    config.headers.Authorization = `Bearer ${at}`;\r\n    return config;\r\n}, function (error) {\r\n    return Promise.reject(error);\r\n});\r\n\r\n// Add a response interceptor\r\naxios.interceptors.response.use(function (response) {\r\n    return response.data;\r\n}, function (error) {\r\n    return Promise.reject(error.response.data);\r\n});\r\n\r\nexport default axios","import { decodeToken, isExpired } from \"react-jwt\";\r\n\r\n// Constants\r\nimport { UserRole } from '../enums/auth';\r\nimport { ConstantNames } from '../constants/default-values';\r\n\r\nexport const getAccessToken = () => {\r\n    return localStorage.getItem(ConstantNames.AccessToken);\r\n};\r\n\r\nexport const updateAccessToken = at => {\r\n    localStorage.setItem(ConstantNames.AccessToken, at)\r\n};\r\n\r\nexport const removeAccessToken = () => {\r\n    localStorage.removeItem(ConstantNames.AccessToken);\r\n};\r\n\r\nexport const getDefaultRedirectPath = () => {\r\n    const decodedToken = decodeToken(getAccessToken());\r\n\r\n    console.log(\"decodedToken\", decodedToken)\r\n\r\n    const expiration = isExpired(getAccessToken());\r\n    if (expiration) {\r\n        console.log('Need to Refresh AccesToken.')\r\n        return;\r\n    }\r\n\r\n    if (!decodedToken || !decodedToken.role) return '/';\r\n\r\n    // Go to admin dashboard for Admin / SupuerAdmin\r\n    if (isAdmin(decodedToken.role)) {\r\n        return '/admin';\r\n    } else {\r\n        return '/customer';\r\n    }\r\n}\r\n\r\nexport const isAdmin = userRole => {\r\n    switch(userRole) {\r\n        case UserRole.Admin:\r\n        case UserRole.SuperAdmin:\r\n            return true;\r\n        case UserRole.Customer:\r\n            return false;\r\n        default: return false;\r\n    }\r\n};\r\n\r\nexport const isSuperAdmin = userRole => {\r\n    return userRole === UserRole.SuperAdmin;\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Overlay, Popover } from 'react-bootstrap';\r\n\r\nexport const ConfirmPopover = ({ visible, target, setVisibility, label, onConfirm, placement }) => {\r\n    return (\r\n        <Overlay show={visible} target={target} placement={placement} onHide={() => setVisibility(false)} containerPadding={20} rootClose>\r\n            <Popover>\r\n                <Popover.Title as='h3'>Confirm</Popover.Title>\r\n                <Popover.Content>\r\n                    <p className='m-0'>{label}</p>\r\n                    {/* <Button className='my-2 ' variant='secondary' size='sm' onClick={() => setVisibility(false)}>Close</Button> */}\r\n                    <Button className='my-2 float-right' variant='primary' size='sm' onClick={()=> ([onConfirm(), setVisibility(false)])}>Confirm</Button>\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n    );\r\n};\r\n\r\nConfirmPopover.propTypes = {\r\n    visible: PropTypes.bool,\r\n    target: PropTypes.object,\r\n    setVisibility: PropTypes.func,\r\n    label: PropTypes.string,\r\n    onConfirm: PropTypes.func,\r\n    placement: PropTypes.oneOf(['right', 'left', 'top', 'bottom'])\r\n};\r\nConfirmPopover.defaultProps = {\r\n    visible: false,\r\n    target: null,\r\n    setVisibility: () => {},\r\n    label: '',\r\n    onConfirm: () => {},\r\n    placement: 'left'\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Row, Col } from 'react-bootstrap';\r\nimport UserApis from '../../common/api/users';\r\nimport VideosApis from '../../common/api/videos';\r\n\r\n\r\nfunction AdminDashboard() {\r\n    const [userCount, setUserCount] = useState(0);\r\n    const [videoCount, setVideoCount] = useState(0)\r\n\r\n    useEffect(() => {\r\n        UserApis\r\n            .getAll({perPage: 10, page: 1})\r\n            .then((data) => {\r\n                setUserCount(data.totalCount)\r\n            });\r\n\r\n        VideosApis\r\n            .getVideos({perPage: 10, page: 1})\r\n            .then((data) => {\r\n                setVideoCount(data.totalCount)\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='text-center'>\r\n                <h1>Admin Dashboard</h1>\r\n            </div>\r\n            <Row>\r\n                <Col>\r\n                    <Card className=\"text-center\">\r\n                        <Link to={`/admin/users`}>\r\n                            <div>\r\n                                <strong>Users</strong>\r\n                            </div>\r\n                            <div>\r\n                                <h1>{userCount}</h1>\r\n                            </div>\r\n                        </Link>\r\n                    </Card>\r\n                </Col>\r\n                <Col>\r\n                    <Card className=\"text-center\">\r\n                        <Link to={`/admin/videos`}>\r\n                            <div>\r\n                                <strong>Videos</strong>\r\n                            </div>\r\n                            <div>\r\n                                <h1>{videoCount}</h1>\r\n                            </div>\r\n                        </Link>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nAdminDashboard.propTypes = {};\r\nAdminDashboard.defaultProps = {};\r\n\r\nexport default withRouter(AdminDashboard);\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nexport const LoadingSpinner = (absolute) => {\r\n    return (<Fragment>\r\n        { absolute ?\r\n            <div className='d-flex'><Spinner animation='border' variant='primary' className='w-4rem h-4rem m-auto' /></div> :\r\n            <Spinner animation='border' variant='primary' className='w-4rem h-4rem' style={{ position: 'absolute', left: '50%', top: '50%' }} />\r\n        }\r\n    </Fragment>\r\n    );\r\n};\r\nLoadingSpinner.propTypes = {\r\n    absolute: PropTypes.bool\r\n};\r\nLoadingSpinner.defaultProps = {\r\n    absolute: false\r\n};\r\n\r\nexport const PageLoadingSpinner = () => {\r\n    return (\r\n        <div className='d-flex' style={{\r\n            position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: '#0000008a', zIndex: 10\r\n        }}>\r\n            <Spinner animation='border' variant='primary' className='w-4rem h-4rem m-auto' />\r\n        </div>\r\n    );\r\n};\r\nPageLoadingSpinner.propTypes = {};\r\nPageLoadingSpinner.defaultProps = {};\r\n","import axios from './configuration';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst examBodiesBaseURL = `${APIServerURL}/exam-bodies`;\r\nconst ExamBodiesAPI =  {\r\n    getAllExamBodies: () => {\r\n        const url = `${examBodiesBaseURL}`;\r\n        return axios.get(url);\r\n    },\r\n    getExamBodyById: (examBodyId) => {\r\n        const url = `${examBodiesBaseURL}/by-id/${examBodyId}`;\r\n        return axios.get(url);\r\n    }\r\n}\r\n\r\nexport default ExamBodiesAPI;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { LoadingSpinner } from '../../../components/common/spinner';\r\n\r\nimport ExamBodyAPI from '../../../common/api/exam-bodies';\r\n\r\nfunction AdminSelectExamBody({ history }) {\r\n    const [examBodies, setExamBodies] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        ExamBodyAPI.getAllExamBodies().then(arrExamBodies => {\r\n            setExamBodies(arrExamBodies);\r\n            setIsLoading(false);\r\n        }, e => {\r\n            console.log(e);\r\n            setIsLoading(false);\r\n        });\r\n    }, [])\r\n\r\n    return (<Container className='pt-4'>\r\n        <Row className='mb-3'>\r\n            <Col>\r\n                <h1 className='text-primary text-center'>\r\n                    Select Exam Body to start\r\n                    </h1>\r\n            </Col>\r\n        </Row>\r\n        {isLoading ? <LoadingSpinner /> : null}\r\n        <Row>\r\n            {examBodies.map((examBody, ebi) =>\r\n                <Col key={ebi} sm={6} md={4} lg={3} className='p-1'>\r\n                    <Card className='w-100 shadow-sm'>\r\n                        <Card.Img className='w-50 mx-auto' variant='top' src={examBody.logoUrl} />\r\n                        <Card.Body>\r\n                            <Card.Title className='text-center'>{examBody.name}</Card.Title>\r\n                            <Button className='float-right' variant='primary'\r\n                                onClick={() => history.push(`/admin/questions/by-exam-body/${examBody.id}`)}>Go</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            )}\r\n            <Col sm={6} md={4} lg={3} className='p-1'>\r\n                <Card className='w-100 shadow-sm'>\r\n                    <Card.Img className='w-50 mx-auto' variant='top' src='https://i.ibb.co/g9qh9Ty/instagram-logo-icon-voronezh-russia-january-square-soft-shadow-171161240.jpg' />\r\n                    <Card.Title className='text-center'>&nbsp;</Card.Title>\r\n                    <Card.Body>\r\n                        <Button className='float-right' variant='primary'>Add new Exam Body</Button>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    </Container>);\r\n};\r\n\r\nAdminSelectExamBody.propTypes = {};\r\nAdminSelectExamBody.defaultProps = {};\r\n\r\nexport default withRouter(AdminSelectExamBody);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nexport const CustomSelect = ({ label, value, values, onChange }) => {\r\n    return (\r\n        <Form.Group>\r\n            <Form.Label><strong>{label}</strong></Form.Label>\r\n            <Form.Control as=\"select\" onChange={onChange} value={value}>\r\n                {values.map(eachValue => \r\n                    typeof eachValue === 'object' ?\r\n                    <option key={eachValue.id} value={eachValue.id}>{eachValue.name}</option> :\r\n                    <option key={eachValue}>{eachValue}</option>\r\n                )}\r\n            </Form.Control>\r\n        </Form.Group>\r\n    );\r\n};\r\n\r\nCustomSelect.propTypes = {\r\n    label: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n    values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n        PropTypes.shape({\r\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n            name: PropTypes.string\r\n        })\r\n    ])),\r\n    onChange: PropTypes.func\r\n};\r\nCustomSelect.defaultProps = {\r\n    label: '',\r\n    values: [],\r\n    onChange: () => { }\r\n};\r\n","export const QuestionStatus = {\r\n    Draft: 'DRAFT',\r\n    UnderReview: 'UNDER-REVIEW',\r\n    Published: 'PUBLISHED',\r\n};\r\n","import axios from 'axios';\r\nimport querystring from 'query-string';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\nimport { QuestionStatus } from '../enums/questions';\r\n\r\nconst questionsBaseURL = `${APIServerURL}/questions`;\r\nconst QuestionsAPI = {\r\n    // Questions Groups Page\r\n    findQuestionGroups: (examBodyId, filterOptions = {}) => {\r\n        const copiedFilterOptions = {};\r\n        for (const key in filterOptions) {\r\n            if (Object.hasOwnProperty.call(filterOptions, key)) {\r\n                const value = filterOptions[key];\r\n                if (!!value) {\r\n                    copiedFilterOptions[key] = value;\r\n                }\r\n            }\r\n        }\r\n        const query = querystring.stringify(copiedFilterOptions);\r\n        const url = `${questionsBaseURL}/group-by/${examBodyId}?${query}`;\r\n        return axios.get(url);\r\n    },\r\n    findAdditionalDetails: (examBodyId, subjectId, year) => {\r\n        const url = `${questionsBaseURL}/group-by/additional-details/${examBodyId}/${subjectId}/${year}`;\r\n        return axios.get(url);\r\n    },\r\n    // Add Questions Page\r\n    initRegisterQuestionsPage: (examBodyId, subjectId) => {\r\n        const url = `${questionsBaseURL}/register/init/${examBodyId}/${subjectId}`;\r\n        return axios.get(url);\r\n    },\r\n    registerQuestion: (rqDto, answers) => {\r\n        const url = `${questionsBaseURL}/register`;\r\n        return axios.post(url, rqDto).then(registerResponse => {\r\n            const { id } = registerResponse;\r\n            return QuestionsAPI.attachAnswers(id, answers)\r\n        });\r\n    },\r\n    attachAnswers: (questionId, answers) => {\r\n        const url = `${questionsBaseURL}/attach-answers/${questionId}`;\r\n        return axios.post(url, { answers });\r\n    },\r\n    // Questions List Page\r\n    findQuestionsByExam: (examBodyId, subjectId, year, objQuery) => {\r\n        const query = {};\r\n        for (const key in objQuery) {\r\n            if (Object.hasOwnProperty.call(objQuery, key)) {\r\n                const value = objQuery[key];\r\n                if (!!value) { query[key] = value;}\r\n            }\r\n        }\r\n        const url = `${questionsBaseURL}/by-exam/${examBodyId}/${subjectId}/${year}?${querystring.stringify(query)}`;\r\n        return axios.get(url);\r\n\r\n    },\r\n    requestToPublish: (examBodyId, subjectId, year) => {\r\n        const url = `${questionsBaseURL}/update-exam-status`;\r\n        return axios.put(url, { examBodyId, subjectId, year, status: QuestionStatus.UnderReview });\r\n    },\r\n    publishQuestions: (examBodyId, subjectId, year) => {\r\n        const url = `${questionsBaseURL}/update-exam-status`;\r\n        return axios.put(url, { examBodyId, subjectId, year, status: QuestionStatus.Published });\r\n    },\r\n    // Edit Question Page\r\n    initEditQuestionsPage: (questionId) => {\r\n        const url = `${questionsBaseURL}/update/init/${questionId}`;\r\n        return axios.get(url);\r\n    },\r\n    updateQuestion: (question, answers) => {\r\n        const url = `${questionsBaseURL}/update/${question.id}`;\r\n        return axios.put(url, { question: { ...question, id: null }, answers });\r\n    },\r\n    deleteQuestion: (id) => {\r\n        const url = `${questionsBaseURL}/${id}`;\r\n        return axios.delete(url);\r\n    }\r\n}\r\n\r\nexport default QuestionsAPI;\r\n","import axios from 'axios';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst subjectsBaseURL = `${APIServerURL}/subjects`;\r\nconst SubjectsAPI =  {\r\n    getAllSubjects: () => {\r\n        const url = `${subjectsBaseURL}`;\r\n        return axios.get(url).then(subjects => subjects, e => e);\r\n    },\r\n}\r\n\r\nexport default SubjectsAPI;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Container, FormControl, Image, InputGroup, Modal, Overlay, Pagination, Popover, Row, Table } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars, faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { CustomSelect } from '../../../components/common/select';\r\nimport { LoadingSpinner } from '../../../components/common/spinner';\r\n\r\nimport QuestionsAPI from '../../../common/api/questions';\r\nimport ExamBodyAPI from '../../../common/api/exam-bodies';\r\nimport SubjectsAPI from '../../../common/api/subjects';\r\nimport { connectAuth, connectToasts } from '../../../common/redux/connects';\r\nimport { UserRole } from '../../../common/enums/auth';\r\nimport { QuestionStatus } from '../../../common/enums/questions';\r\nimport { ToastStatus } from '../../../common/enums/toast';\r\nimport { ConfirmPopover } from '../../../components/common/popover';\r\n\r\nconst questionGroupTableHeaders = ['Year', 'Subject', 'Question Count', 'Status', 'Actions'];\r\n\r\nfunction AdminQuestionGroups({ match, history, user, addToastAction }) {\r\n    //Current Exam Body\r\n    const [examBody, setExamBody] = useState({ id: '', name: '', logoUrl: '' });\r\n    // Necessary Arrays\r\n    const [questionGroups, setQuestionGroups] = useState([]);\r\n    const [subjects, setSubjects] = useState([]);\r\n    const [years, setYears] = useState([]);\r\n\r\n    // Create new Question Group\r\n    const [newQuestionGroupInput, setNewQuestionGroupInput] = useState({\r\n        subjectId: '',\r\n        year: new Date().getFullYear()\r\n    });\r\n\r\n    // Admin Filtering by Subject, Year, Status\r\n    const [filterCategories, setFilterCategories] = useState({\r\n        subjects: [{ id: '', name: '- All Subjects -' }],\r\n        years: [{ id: 0, name: '- All Years -' }],\r\n        statuses: [{ id: '', name: '- All Subjects -' }]\r\n    })\r\n    const [filterOptions, setFilterOptions] = useState({\r\n        subjectId: '',\r\n        year: 0,\r\n        status: ''\r\n    });\r\n\r\n    // Additional Details\r\n    const [selectedQuestionGroup, setSelectedQuestionGroup] = useState(null);\r\n    const [visibleAdditionalDetails, setVisibleAdditionalDetails] = useState(false);\r\n\r\n    // OverLay\r\n    const [actionIndex, setActionIndex] = useState(-1);\r\n    const [visibleActionPopover, setVisibleActionPopover] = useState(false);\r\n    const [actionTarget, setActionTarget] = useState(null);\r\n    const [visibleNewExamPopover, setVisibleNewExamPopover] = useState(false);\r\n    const [newExamTarget, setNewExamTarget] = useState(null);\r\n\r\n    // Pagination\r\n    const [pageIndex, setPageIndex] = useState(0);\r\n    const [total, setTotal] = useState({ pagesCount: 1, groupsCount: 0 });\r\n\r\n    // Confirm Popover\r\n    const [visiblePublishConfirmPopover, setVisiblePublishConfirmPopover] = useState(false);\r\n    const [publishConfirmTarget, setPublishConfirmTarget] = useState(null);\r\n    const [visibleRequestToPublishConfirmPopover, setVisibleRequestToPublishConfirmPopover] = useState(false);\r\n    const [requestToPublishConfirmTarget, setRequestToPublishConfirmTarget] = useState(null);\r\n\r\n    // Loading Status\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const { examBodyId } = match.params;\r\n        ExamBodyAPI.getExamBodyById(examBodyId).then(eb => setExamBody(eb), e => console.log(e));\r\n        SubjectsAPI.getAllSubjects().then(arrSubjects => {\r\n            setSubjects(arrSubjects);\r\n            const newYears = [];\r\n            for (let i = 1988; i < new Date().getFullYear(); i++) {\r\n                newYears.push(i);\r\n            }\r\n            setYears(newYears);\r\n\r\n            setNewQuestionGroupInput({ ...newQuestionGroupInput, subjectId: arrSubjects[0].id, year: newYears[0] });\r\n\r\n            const newStatuses = [{ id: '', name: '- All Statuses -' }];\r\n            for (const value of Object.values(QuestionStatus)) {\r\n                newStatuses.push({ id: value, name: String(value).split('-').join(' ') });\r\n            }\r\n\r\n            setFilterCategories({\r\n                subjects: [{ id: '', name: '- All Subjects -' }].concat(arrSubjects.map(subject => ({ id: subject.id, name: subject.name }))),\r\n                years: [{ id: 0, name: '- All Years -' }].concat(newYears.map(year => ({ id: year, name: `${year}` }))),\r\n                statuses: newStatuses\r\n            });\r\n        }, e => {\r\n            console.log(e);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!pageIndex) {\r\n            onRefreshQuestionGroups();\r\n        } else {\r\n            setPageIndex(0);\r\n        }\r\n    }, [filterOptions]);\r\n\r\n    useEffect(() => {\r\n        onRefreshQuestionGroups();\r\n    }, [pageIndex]);\r\n\r\n    const getSubjectNameWithId = (id) => {\r\n        const subject = subjects.find(s => s.id === id);\r\n        if (subject) { return subject.name; }\r\n        return '';\r\n    };\r\n\r\n    // Actions Popover\r\n    const toggleActionPopover = (event, index) => {\r\n        setActionIndex(index);\r\n        setActionTarget(event.target);\r\n        let objTimeOut = setTimeout(() => {\r\n            clearTimeout(objTimeOut);\r\n            setVisibleActionPopover(true);\r\n            setVisibleNewExamPopover(false);\r\n        }, 100);\r\n\r\n    };\r\n\r\n    const onViewAdditionalDetails = () => {\r\n        const { examBodyId } = match.params;\r\n        const qGroup = questionGroups[actionIndex];\r\n        setVisibleActionPopover(false);\r\n        if (qGroup.count < 1) {\r\n            addToastAction('Info', 'Nothing to show additional details.', ToastStatus.Info);\r\n            return;\r\n        }\r\n        const subject = subjects.find(subject => subject.id === qGroup.subjectId);\r\n        QuestionsAPI.findAdditionalDetails(examBodyId, qGroup.subjectId, qGroup.year).then(result => {\r\n            const { createdByFullName, lastModifiedByFullName } = result;\r\n            setSelectedQuestionGroup(Object.assign({\r\n                createdBy: createdByFullName,\r\n                lastModifiedBy: lastModifiedByFullName,\r\n                subjectName: subject.name\r\n            }, qGroup));\r\n            setVisibleAdditionalDetails(true);\r\n        }, e => console.log(e));\r\n    };\r\n\r\n    const onAddNewQuestion = () => {\r\n        const { examBodyId } = match.params;\r\n        const qGroup = questionGroups[actionIndex];\r\n        const { subjectId, year } = qGroup;\r\n        setVisibleActionPopover(false);\r\n        history.push(`/admin/questions/add/${examBodyId}/${subjectId}/${year}`);\r\n    };\r\n\r\n    const onViewAllQuestions = () => {\r\n        const { examBodyId } = match.params;\r\n        const qGroup = questionGroups[actionIndex];\r\n        const { subjectId, year } = qGroup;\r\n        setVisibleActionPopover(false);\r\n        if (qGroup.count < 1) {\r\n            addToastAction('Info', 'No questions to show.', ToastStatus.Info);\r\n            return;\r\n        }\r\n        history.push(`/admin/questions/view/${examBodyId}/${subjectId}/${year}`);\r\n    };\r\n\r\n    const onClickPublishQuestionGroupButton = (event) => {\r\n        setPublishConfirmTarget(event.target);\r\n        setVisiblePublishConfirmPopover(true);\r\n    }\r\n    const onPublishQuestionGroup = () => {\r\n        setVisiblePublishConfirmPopover(false);\r\n        const { examBodyId } = match.params;\r\n        const qGroup = questionGroups[actionIndex];\r\n        setVisibleActionPopover(false);\r\n        if (qGroup.count < 1) {\r\n            addToastAction('Info', 'Nothing to Publish.', ToastStatus.Info);\r\n            return;\r\n        }\r\n        QuestionsAPI.publishQuestions(examBodyId, qGroup.subjectId, qGroup.year).then(result => {\r\n            updateQuestionGroupStatus(actionIndex, QuestionStatus.Published);\r\n            addToastAction('Success', 'Questions are published successfully.', ToastStatus.Success);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    };\r\n\r\n    const onClickRequestToPublishQuestionGroupButton = (event) => {\r\n        setRequestToPublishConfirmTarget(event.target);\r\n        setVisibleRequestToPublishConfirmPopover(true);\r\n    };\r\n    const onRequestToPublishQuestionGroup = () => {\r\n        setVisibleRequestToPublishConfirmPopover(false);\r\n        const { examBodyId } = match.params;\r\n        const qGroup = questionGroups[actionIndex];\r\n        setVisibleActionPopover(false);\r\n        if (qGroup.count < 1) {\r\n            addToastAction('Info', 'Nothing to Review.', ToastStatus.Info);\r\n            return;\r\n        }\r\n        QuestionsAPI.requestToPublish(examBodyId, qGroup.subjectId, qGroup.year).then(result => {\r\n            updateQuestionGroupStatus(actionIndex, QuestionStatus.UnderReview);\r\n            addToastAction('Success', 'Questions are requested to be published.', ToastStatus.Success);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    };\r\n\r\n    const updateQuestionGroupStatus = (groupIndex, status) => {\r\n        const newGroups = JSON.parse(JSON.stringify(questionGroups));\r\n        const qGroup = newGroups[groupIndex];\r\n        qGroup.status = status;\r\n        setQuestionGroups(newGroups);\r\n    }\r\n\r\n    // Add new Question Group\r\n    const onAddNewQuestionGroup = () => {\r\n        const index = questionGroups.findIndex(qGroup => qGroup.year === newQuestionGroupInput.year && qGroup.subjectId === newQuestionGroupInput.subjectId);\r\n        setVisibleNewExamPopover(false);\r\n        if (index >= 0) {\r\n            addToastAction('Error', 'Specific Exam is already registered.', ToastStatus.Warning);\r\n            return;\r\n        }\r\n        setQuestionGroups(questionGroups.concat([{\r\n            count: 0,\r\n            subjectId: newQuestionGroupInput.subjectId,\r\n            year: newQuestionGroupInput.year,\r\n            status: QuestionStatus.Draft\r\n        }]));\r\n    };\r\n    const onChangeNewQuestionGroupInputs = (value, field) => {\r\n        setNewQuestionGroupInput({ ...newQuestionGroupInput, [field]: value });\r\n    };\r\n\r\n    // Filter Options\r\n    const onChangeFilterOptions = (value, field) => {\r\n        setFilterOptions({ ...filterOptions, [field]: value });\r\n    };\r\n    const onRefreshQuestionGroups = () => {\r\n        const { examBodyId } = match.params;\r\n        setIsLoading(true);\r\n        QuestionsAPI.findQuestionGroups(examBodyId, { ...filterOptions, pageIndex }).then(response => {\r\n            const { count, questionGroups } = response;\r\n            setTotal({\r\n                groupsCount: count,\r\n                pagesCount: Math.ceil(count / 10) // 10 is default limit per page\r\n            });\r\n            setQuestionGroups(questionGroups);\r\n            setIsLoading(false);\r\n        }, e => {\r\n            console.log(e);\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n    const onShowNewExamPopover = (event) => {\r\n        setNewExamTarget(event.target);\r\n        setVisibleNewExamPopover(true);\r\n        setVisibleActionPopover(false);\r\n    }\r\n\r\n    const renderPublishActionsDropDownItem = () => {\r\n        const qGroup = questionGroups[actionIndex];\r\n        if (!qGroup) { return null; }\r\n        if (qGroup.status === QuestionStatus.UnderReview && user.role === UserRole.SuperAdmin) {\r\n            return <Button className='my-1' variant='link' size='sm' disabled={user.role !== UserRole.SuperAdmin} onClick={onClickPublishQuestionGroupButton}>Publish Questions</Button>;\r\n        } else if (qGroup.status === QuestionStatus.Draft) {\r\n            return <Button className='my-1' variant='link' size='sm' onClick={onClickRequestToPublishQuestionGroupButton}>Request to Publish</Button>;\r\n        }\r\n        return null;\r\n    }\r\n    const renderAddNewQuestionDropDownItem = () => {\r\n        const qGroup = questionGroups[actionIndex];\r\n        if (!qGroup) { return null; }\r\n        if (qGroup.status !== QuestionStatus.Published) {\r\n            return <Button className='my-1' variant='link' size='sm' onClick={onAddNewQuestion}>\r\n                Add New Question\r\n        </Button>;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (<Container className='pt-4'>\r\n        <Row>\r\n            <Col>\r\n                <Button variant='link' onClick={() => history.goBack()}>\r\n                    <span className='h6'>Back</span>\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n        <Row className='mb-3'>\r\n            <Col>\r\n                <h1 className='text-primary text-center'>Examinations</h1>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12}>\r\n                <h4>Filter Options</h4>\r\n            </Col>\r\n            <Col md={4}>\r\n                <CustomSelect label='Year' values={filterCategories.years} value={filterOptions.year} onChange={(e) => onChangeFilterOptions(parseInt(e.target.value), 'year')} />\r\n            </Col>\r\n            <Col md={4}>\r\n                <CustomSelect label='Subject' values={filterCategories.subjects} value={filterOptions.subjectId} onChange={(e) => onChangeFilterOptions(e.target.value, 'subjectId')} />\r\n            </Col>\r\n            <Col md={4}>\r\n                <CustomSelect label='Status' values={filterCategories.statuses} value={filterOptions.status} onChange={(e) => onChangeFilterOptions(e.target.value, 'status')} />\r\n            </Col>\r\n        </Row>\r\n        <Row className='align-items-center'>\r\n            <Image src={examBody.logoUrl} style={{ height: 60 }} className='d-inline ml-3' rounded />\r\n            <h4 className='ml-2 d-inline'>{examBody.name}</h4>\r\n            {isLoading ?\r\n                <LoadingSpinner /> :\r\n                <FontAwesomeIcon className='cursor-pointer ml-auto mr-3 text-success float-right' icon={faPlus} onClick={(e) => onShowNewExamPopover(e)} size='lg' />\r\n            }\r\n        </Row>\r\n        <Row>\r\n            <Col className='text-right'>\r\n                <h5 className='ml-auto'>({total.groupsCount} Examinations)</h5>\r\n            </Col>\r\n        </Row>\r\n        {!isLoading && questionGroups.length < 1 ?\r\n            <h3 className='text-center'>No Questions found</h3> :\r\n            <Table responsive bordered>\r\n                <thead><tr>\r\n                    {questionGroupTableHeaders.map((headerName, hi) => <th key={hi}>{headerName}</th>)}\r\n                </tr></thead>\r\n                <tbody>\r\n                    {questionGroups.map((qGroup, qgi) => <tr key={qgi}>\r\n                        <td style={{ width: 100 }}>{qGroup.year}</td>\r\n                        <td>{getSubjectNameWithId(qGroup.subjectId)}</td>\r\n                        <td style={{ width: 180 }}>{qGroup.count}</td>\r\n                        <td style={{ width: 180 }}>\r\n                            <span className='text-capitalize'>{String(qGroup.status).split('-').join(' ').toLowerCase()}</span>\r\n                        </td>\r\n                        <td style={{ width: 100 }}>\r\n                            <FontAwesomeIcon className='cursor-pointer' icon={faBars} onClick={(e) => toggleActionPopover(e, qgi)} size='lg' />\r\n                        </td>\r\n                    </tr>)}\r\n                </tbody>\r\n            </Table>\r\n        }\r\n        <Row className='justify-content-end'>\r\n            <Col>\r\n                <Pagination className='float-right'>\r\n                    <Pagination.First disabled={pageIndex <= 0} onClick={() => setPageIndex(0)} />\r\n                    <Pagination.Prev disabled={pageIndex <= 0} onClick={() => setPageIndex(pageIndex - 1)} />\r\n                    <Pagination.Item active>{pageIndex + 1}</Pagination.Item>\r\n                    <Pagination.Next disabled={pageIndex >= total.pagesCount - 1} onClick={() => setPageIndex(pageIndex + 1)} />\r\n                    <Pagination.Last disabled={pageIndex >= total.pagesCount - 1} onClick={() => setPageIndex(total.pagesCount - 1)} />\r\n                </Pagination>\r\n            </Col>\r\n        </Row>\r\n\r\n        {!selectedQuestionGroup ? null :\r\n            <Modal show={visibleAdditionalDetails} onHide={() => setVisibleAdditionalDetails(false)}\r\n                backdrop=\"static\" keyboard={false} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Additional Details</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-year\">Year</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Year\" aria-label=\"Year\" aria-describedby=\"sqgroup-year\" value={selectedQuestionGroup.year} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-subject\">Subject</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Subject\" aria-label=\"Subject\" aria-describedby=\"sqgroup-subject\" value={selectedQuestionGroup.subjectName} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-status\">Status</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Status\" aria-label=\"Status\" aria-describedby=\"sqgroup-status\" value={selectedQuestionGroup.status} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-qcount\">Question Count</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Question Count\" aria-label=\"Question Count\" aria-describedby=\"sqgroup-qcount\" value={selectedQuestionGroup.count} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-created-at\">Created At</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Created At\" aria-label=\"Created At\" aria-describedby=\"sqgroup-created-at\" value={selectedQuestionGroup.createdAt} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-created-by\">Created By</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Created By\" aria-label=\"Created By\" aria-describedby=\"sqgroup-created-by\" value={selectedQuestionGroup.createdBy} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-last-modified-at\">Last Modifed At</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Last Modifed At\" aria-label=\"Last Modifed At\" aria-describedby=\"sqgroup-last-modified-at\" value={selectedQuestionGroup.lastModifiedAt} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"sqgroup-last-modified-by\">Last Modified By</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl disabled placeholder=\"Last Modified By\" aria-label=\"Last Modified By\" aria-describedby=\"sqgroup-last-modified-by\" value={selectedQuestionGroup.lastModifiedBy} />\r\n                    </InputGroup>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={() => setVisibleAdditionalDetails(false)}>Close</Button>\r\n                </Modal.Footer>\r\n            </Modal>}\r\n\r\n        <Overlay show={visibleActionPopover} target={actionTarget} placement='left' onHide={() => setVisibleActionPopover(false)} containerPadding={20} rootClose>\r\n            <Popover style={{ maxWidth: 200 }}>\r\n                <Popover.Title as='h3' className='p-3'>Actions</Popover.Title>\r\n                <Popover.Content>\r\n                    <Button className='my-1' variant='link' size='sm' onClick={onViewAdditionalDetails}>\r\n                        View Additional Details\r\n                    </Button>\r\n                    {renderAddNewQuestionDropDownItem()}\r\n                    <Button className='my-1' variant='link' size='sm' onClick={onViewAllQuestions}>\r\n                        View All Questions\r\n                    </Button>\r\n                    {renderPublishActionsDropDownItem()}\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n\r\n        <Overlay show={visibleNewExamPopover} target={newExamTarget} placement='left' onHide={() => setVisibleNewExamPopover(false)} containerPadding={20} rootClose>\r\n            <Popover style={{ maxWidth: 200 }}>\r\n                <Popover.Title as='h3' className='p-3'>New Examination</Popover.Title>\r\n                <Popover.Content>\r\n                    <CustomSelect label='Year' values={years} value={newQuestionGroupInput.year} onChange={e => onChangeNewQuestionGroupInputs(parseInt(e.target.value), 'year')} />\r\n                    <CustomSelect label='Subject' values={subjects} value={newQuestionGroupInput.subjectId} onChange={e => onChangeNewQuestionGroupInputs(e.target.value, 'subjectId')} />\r\n                    <div className='d-flex justify-content-end'>\r\n                        <Button size='sm' className='mb-2' onClick={onAddNewQuestionGroup}>Create & Close</Button>\r\n                    </div>\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n\r\n        <ConfirmPopover visible={visiblePublishConfirmPopover} target={publishConfirmTarget} setVisibility={setVisiblePublishConfirmPopover}\r\n            label='Are you sure to publish questions?' onConfirm={onPublishQuestionGroup}/>\r\n\r\n        <ConfirmPopover visible={visibleRequestToPublishConfirmPopover} target={requestToPublishConfirmTarget}\r\n            setVisibility={setVisibleRequestToPublishConfirmPopover} label='Are you sure to request this question group to publish?' onConfirm={onRequestToPublishQuestionGroup}/>\r\n\r\n    </Container>);\r\n};\r\n\r\nAdminQuestionGroups.propTypes = {};\r\nAdminQuestionGroups.defaultProps = {};\r\n\r\nexport default withRouter(connectAuth(connectToasts(AdminQuestionGroups)));\r\n","import axios from 'axios';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst subTopicsBaseURL = `${APIServerURL}/sub-topics`;\r\nconst SubTopicsAPI =  {\r\n    getSubTopics: (topicId) => {\r\n        const url = `${subTopicsBaseURL}/${topicId}`;\r\n        return axios.get(url).then(subTopics => subTopics, e => e);\r\n    },\r\n}\r\n\r\nexport default SubTopicsAPI;\r\n","import axios from 'axios';\r\n\r\n// Constants\r\nimport { APIServerURL, AssetsServerURL } from '../constants/default-values';\r\n\r\nconst UploadAPI = {\r\n    uploadFile: file => {\r\n        const url = `${APIServerURL}/uploads/shapes`;\r\n        const form = new FormData();\r\n        form.append('file', file);\r\n        return axios.post(url, form).then(res => `${AssetsServerURL}/${res.url}`);\r\n    }\r\n}\r\n\r\nexport default UploadAPI;","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form } from 'react-bootstrap';\r\nimport { MathComponent } from 'mathjax-react'\r\n\r\n// const defaultTex = `\\\\begin{array}{l}\\\\frac{1}{x}\\\\end{array}`;\r\n\r\nexport const AnyTextInput = ({ value, onChange, className, editable, equation }) => {\r\n    const onError = (error) => { console.log(error); };\r\n    const onSuccess = () => { };\r\n\r\n    const renderEditableArea = () => {\r\n        if (editable) {\r\n            return <Form.Control as='textarea' value={value} onChange={e => onChange(e.target.value)} />;\r\n        } else if (!equation) {\r\n            return <span>{value}</span>;\r\n        }\r\n    };\r\n\r\n    return (<Fragment>\r\n        {renderEditableArea()}\r\n        {equation?<MathComponent tex={value} onError={(err) => onError(err)} onSuccess={() => onSuccess()} />:null}\r\n    </Fragment>\r\n    );\r\n};\r\nAnyTextInput.propTypes = {\r\n    className: PropTypes.string,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func,\r\n    editable: PropTypes.bool,\r\n    equation: PropTypes.bool\r\n};\r\nAnyTextInput.defaultProps = {\r\n    className: '',\r\n    value: '',\r\n    onChange: () => {},\r\n    editable: false,\r\n    equation: false\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Button, Form, FormControl,\r\n    Image, InputGroup, Overlay,\r\n    Popover, Table\r\n} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTable, faImage, faTrash, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { AnyTextInput } from './text-input';\r\n\r\nexport const EditableTable = ({ headers, data, onChange }) => {\r\n    const onChangeDataCell = (value, rowIndex, colIndex) => {\r\n        const newData = JSON.parse(JSON.stringify(data));\r\n        newData[rowIndex][colIndex] = value;\r\n        onChange({ content: newData, type: 'DATA' });\r\n    };\r\n\r\n    const onChangeHeaderCell = (value, colIndex) => {\r\n        const newHeader = JSON.parse(JSON.stringify(headers));\r\n        newHeader[colIndex] = value;\r\n        onChange({ content: newHeader, type: 'HEADER' });\r\n    };\r\n\r\n    return (\r\n        <Table responsive bordered>\r\n            <thead><tr>\r\n                {headers.map((headerName, hi) => <th key={hi}>\r\n                    <Form.Control variant='dark' type=\"text\" value={headerName} onChange={e => onChangeHeaderCell(e.target.value, hi)} />\r\n                </th>)}\r\n            </tr></thead>\r\n            <tbody>\r\n                {data.map((row, ri) => <tr key={ri}>{row.map((cell, ci) => <td key={ci}>\r\n                    <Form.Control type=\"text\" value={cell} onChange={e => onChangeDataCell(e.target.value, ri, ci)} />\r\n                </td>)}</tr>)}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n};\r\n\r\nexport const CustomTable = ({ headers, data, responsive, striped, bordered, hover }) => {\r\n    return (\r\n        <Table responsive={responsive} striped={striped} bordered={bordered} hover={hover}>\r\n            <thead><tr>\r\n                {headers.map((headerName, hi) => <th key={hi}><AnyTextInput value={headerName} equation/></th>)}\r\n            </tr></thead>\r\n            <tbody>\r\n                {data.map((row, ri) => <tr key={ri}>{row.map((cell, ci) => <td key={ci}><AnyTextInput value={cell} equation/></td>)}</tr>)}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n};\r\n\r\nCustomTable.propTypes = {\r\n    headers: PropTypes.arrayOf(PropTypes.string),\r\n    data: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\r\n    responsive: PropTypes.bool,\r\n    striped: PropTypes.bool,\r\n    bordered: PropTypes.bool,\r\n    hover: PropTypes.bool\r\n};\r\nCustomTable.defaultProps = {\r\n    headers: [],\r\n    data: [],\r\n    responsive: true,\r\n    striped: false,\r\n    bordered: true,\r\n    hover: false\r\n};\r\n\r\nexport const AnswerTable = ({ headers, data, onChange }) => {\r\n    const [tableMatrix, setTableMatrix] = useState({ rows: 0, columns: 0 });\r\n\r\n    const [visibleNewTablePopover, setVisibleNewTablePopover] = useState(false);\r\n    const [newTableTarget, setNewTableTarget] = useState(null);\r\n    const [newTableIndex, setNewTableIndex] = useState(-1);\r\n\r\n    const onChangeMatrixField = (value, field) => {\r\n        setTableMatrix({ ...tableMatrix, [field]: value });\r\n    };\r\n\r\n    const onCreateTable = () => {\r\n        setVisibleNewTablePopover(false);\r\n\r\n        if (tableMatrix.columns < 1 || tableMatrix.rows < 1) {\r\n            onChange({\r\n                tableHeaders: [],\r\n                tableData: []\r\n            }, newTableIndex, 'TABLE');\r\n            return;\r\n        }\r\n\r\n        const newTableHeaders = JSON.parse(JSON.stringify(data[newTableIndex].tableHeaders || []));\r\n        const newTableData = JSON.parse(JSON.stringify(data[newTableIndex].tableData || []));\r\n        if (newTableHeaders.length > tableMatrix.columns) {\r\n            newTableHeaders.length = tableMatrix.columns;\r\n        } else {\r\n            while (newTableHeaders.length < tableMatrix.columns) {\r\n                newTableHeaders.push('');\r\n            }\r\n        }\r\n\r\n        if (newTableData.length > tableMatrix.rows - 1) {\r\n            newTableData.length = tableMatrix.rows - 1;\r\n        } else {\r\n            while (newTableData.length < tableMatrix.rows - 1) {\r\n                newTableData.push([]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < newTableData.length; i++) {\r\n            const row = newTableData[i];\r\n            if (row.length > tableMatrix.columns - 1) {\r\n                row.length = tableMatrix.columns;\r\n                continue;\r\n            }\r\n            while (row.length < tableMatrix.columns) {\r\n                row.push('');\r\n            }\r\n        }\r\n\r\n        onChange({\r\n            tableHeaders: newTableHeaders,\r\n            tableData: newTableData\r\n        }, newTableIndex, 'TABLE');\r\n    };\r\n\r\n    const onChangeAnswerTable = ({ content, type, answerIndex }) => {\r\n        switch (type) {\r\n            case 'HEADER':\r\n                onChange({ tableHeaders: content }, answerIndex, 'TABLE');\r\n                break;\r\n            case 'DATA':\r\n                onChange({ tableData: content }, answerIndex, 'TABLE');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const onShowNewTablePopover = (event, index) => {\r\n        setNewTableIndex(index);\r\n        setNewTableTarget(event.target);\r\n        const preColumns = data[index].tableHeaders.length;\r\n        const preRows = data[index].tableData.length + 1;\r\n        setTableMatrix({ columns: preColumns, rows: preRows > 1 ? preRows : 0 })\r\n        let objTimeout = setTimeout(() => {\r\n            clearTimeout(objTimeout);\r\n            setVisibleNewTablePopover(true);\r\n        }, 100);\r\n    }\r\n\r\n    return (<Table responsive bordered>\r\n        <thead><tr>\r\n            {headers.map((headerName, hi) => <th key={hi}>{headerName}</th>)}\r\n        </tr></thead>\r\n        <tbody>\r\n            {data.map((row, ri) => <tr key={ri}>\r\n                <td width={80}>\r\n                    <Form.Check className='form-check-lg d-flex justify-content-center' type=\"checkbox\"\r\n                        checked={row.correct} onChange={e => onChange(e.target.checked, ri, 'CORRECT')} />\r\n                </td>\r\n                <td>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter Answer\" value={row.answer} className='mb-2'\r\n                        onChange={e => onChange(e.target.value, ri, 'ANSWER')} />\r\n                    {!row.image ? null : <Fragment>\r\n                        <Image src={row.image} rounded style={{ height: 150, maxWidth: '100%' }} className='mb-2' />\r\n                        <FontAwesomeIcon className='cursor-pointer text-danger' size='lg' icon={faTimes}\r\n                            style={{ marginLeft: -25, marginBottom: 60 }} onClick={() => onChange(null, ri, 'IMAGE-REMOVE')} />\r\n                    </Fragment>}\r\n                    <EditableTable headers={row.tableHeaders} data={row.tableData} onChange={p => onChangeAnswerTable({ ...p, answerIndex: ri })} />\r\n                </td>\r\n                <td width={120}>\r\n                    <FontAwesomeIcon className='cursor-pointer text-warning' size='lg' icon={faImage} onClick={() => onChange(null, ri, 'IMAGE-UPLOAD')} />\r\n                    <FontAwesomeIcon className='cursor-pointer text-info ml-1' size='lg' icon={faTable} onClick={(e) => onShowNewTablePopover(e, ri)} />\r\n                    <FontAwesomeIcon className='cursor-pointer text-danger ml-4' size='lg' icon={faTrash} onClick={() => onChange(null, ri, 'REMOVE')} />\r\n                </td>\r\n            </tr>)}\r\n        </tbody>\r\n        <Overlay show={visibleNewTablePopover} target={newTableTarget} placement='left' onHide={() => setVisibleNewTablePopover(false)} containerPadding={20} rootClose>\r\n            <Popover style={{ maxWidth: 200 }}>\r\n                <Popover.Title as='h3' className='p-3'>Create a Table</Popover.Title>\r\n                <Popover.Content>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"create-table-columns\">Columns</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"create-table-columns\" value={tableMatrix.columns}\r\n                            onChange={e => onChangeMatrixField(parseInt(e.target.value), 'columns')} />\r\n                    </InputGroup>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"create-table-rows\">Rows</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"create-table-rows\" value={tableMatrix.rows}\r\n                            onChange={e => onChangeMatrixField(parseInt(e.target.value), 'rows')} />\r\n                    </InputGroup>\r\n                    <div className='d-flex justify-content-end'>\r\n                        <Button size='sm' onClick={onCreateTable}>Create & Close</Button>\r\n                    </div>\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n    </Table>);\r\n};\r\n\r\nAnswerTable.propTypes = {\r\n    headers: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    data: PropTypes.arrayOf(PropTypes.shape({\r\n        correct: PropTypes.bool,\r\n        answer: PropTypes.string,\r\n        image: PropTypes.string,\r\n        tableHeaders: PropTypes.arrayOf(\r\n            PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.number,\r\n            ])\r\n        ),\r\n        tableData: PropTypes.arrayOf(PropTypes.arrayOf(\r\n            PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.number,\r\n            ])\r\n        ))\r\n    })),\r\n    onChange: PropTypes.func\r\n}\r\nAnswerTable.defaultProps = {\r\n    headers: [],\r\n    data: [],\r\n    onChange: () => { }\r\n};","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Col, Container, Form, FormControl, Image, InputGroup, Overlay, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTable, faImage, faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport QuestionsAPI from '../../../common/api/questions';\r\nimport SubTopicsAPI from '../../../common/api/sub-topics';\r\nimport UploadAPI from '../../../common/api/upload';\r\nimport { connectToasts } from '../../../common/redux/connects';\r\nimport { AnswerTable, EditableTable } from '../../../components/common/table';\r\nimport { ToastStatus } from '../../../common/enums/toast';\r\nimport { CustomSelect } from '../../../components/common/select';\r\nimport { ConfirmPopover } from '../../../components/common/popover';\r\n\r\nconst answerTableHeaders = ['Correct', 'Option', 'Actions']\r\nconst initQuestion = {\r\n    question: '',\r\n    questionNumber: 0,\r\n    image: '',\r\n    tableHeaders: [],\r\n    tableData: []\r\n};\r\n\r\nfunction AdminQuestionsAdd({ history, match, addToastAction }) {\r\n    const [topics, setTopics] = useState([]);\r\n    const [subTopics, setSubTopics] = useState([]);\r\n    const [exam, setExam] = useState({\r\n        examBodyId: '', examBodyName: '',\r\n        subjectId: '', subjectName: '', year: 0\r\n    });\r\n\r\n    const [topicId, setTopicId] = useState('');\r\n    const [subTopicId, setSubTopicId] = useState('');\r\n\r\n    const fileInput = useRef(null);\r\n    const [question, setQuestion] = useState(initQuestion);\r\n    const [answers, setAnswers] = useState([]);\r\n\r\n    const [assetToChange, setAssetToChange] = useState(null);\r\n    const [tableMatrix, setTableMatrix] = useState({ rows: 0, columns: 0 });\r\n\r\n    // New Table Popover\r\n    const [newTableTarget, setNewTableTarget] = useState(null);\r\n    const [visibleNewTablePopover, setVisibleNewTablePopover] = useState(false);\r\n\r\n    // Confirm Popover\r\n    const [visibleRegisterConfirmPopover, setVisibleRegisterConfirmPopover] = useState(false);\r\n    const [registerConfirmTarget, setRegisterConfirmTarget] = useState(null);\r\n    const [visibleClearEntryConfirmPopover, setVisibleClearEntryConfirmPopover] = useState(false);\r\n    const [clearEntryConfirmTarget, setClearEntryConfirmTarget] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const { examBodyId, subjectId, year } = match.params;\r\n        QuestionsAPI.initRegisterQuestionsPage(examBodyId, subjectId).then(result => {\r\n            const { examBodyName, subjectName } = result;\r\n            setExam({ examBodyName, subjectName, year: parseInt(year), examBodyId, subjectId });\r\n            setTopics(result.topics);\r\n            if (result.topics.length > 0) {\r\n                setTopicId(result.topics[0].id);\r\n            }\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (topicId) {\r\n            SubTopicsAPI.getSubTopics(topicId).then(arrSubTopics => {\r\n                setSubTopics(arrSubTopics);\r\n                setSubTopicId(arrSubTopics[0].id);\r\n            }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n        }\r\n    }, [topicId]);\r\n\r\n    const onChangeQuestion = (value, key) => { setQuestion({ ...question, [key]: value }); };\r\n    const onUploadImage = index => {\r\n        if (index < 0) {\r\n            setAssetToChange('QUESTION');\r\n        } else { setAssetToChange(`ANSWER-${index}`); }\r\n        fileInput.current.click();\r\n    };\r\n    const onFileChanged = async e => {\r\n        const { files } = e.target;\r\n        if (files.length > 0) {\r\n            const file = e.target.files[0];\r\n            const fileName = await UploadAPI.uploadFile(file);\r\n            if (!assetToChange) {\r\n                return;\r\n            }\r\n            if (assetToChange.includes('ANSWER')) {\r\n                const index = parseInt(assetToChange.split('-')[1]);\r\n                const arrAnswers = JSON.parse(JSON.stringify(answers));\r\n                arrAnswers[index].image = fileName\r\n                setAnswers(arrAnswers);\r\n            } else {\r\n                onChangeQuestion(fileName, 'image');\r\n            }\r\n            e.target.value = '';\r\n        }\r\n    }\r\n    const onChangeQuestionTableMatrix = (value, key) => { setTableMatrix({ ...tableMatrix, [key]: value }); }\r\n    const onChangeQuestionTable = ({ content, type }) => {\r\n        switch (type) {\r\n            case 'HEADER':\r\n                setQuestion({ ...question, tableHeaders: content });\r\n                break;\r\n            case 'DATA':\r\n                setQuestion({ ...question, tableData: content });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    const onCreateQuestionTable = () => {\r\n        setVisibleNewTablePopover(false)\r\n\r\n        if (tableMatrix.columns < 1 || tableMatrix.rows < 1) {\r\n            setQuestion({\r\n                ...question,\r\n                tableHeaders: [],\r\n                tableData: []\r\n            })\r\n            return;\r\n        }\r\n\r\n        const newTableHeaders = JSON.parse(JSON.stringify(question.tableHeaders || []));\r\n        const newTableData = JSON.parse(JSON.stringify(question.tableData || []));\r\n        if (newTableHeaders.length > tableMatrix.columns) {\r\n            newTableHeaders.length = tableMatrix.columns;\r\n        } else {\r\n            while (newTableHeaders.length < tableMatrix.columns) {\r\n                newTableHeaders.push('');\r\n            }\r\n        }\r\n\r\n        if (newTableData.length > tableMatrix.rows - 1) {\r\n            newTableData.length = tableMatrix.rows - 1;\r\n        } else {\r\n            while (newTableData.length < tableMatrix.rows - 1) {\r\n                newTableData.push([]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < newTableData.length; i++) {\r\n            const row = newTableData[i];\r\n            if (row.length > tableMatrix.columns - 1) {\r\n                row.length = tableMatrix.columns;\r\n                continue;\r\n            }\r\n            while (row.length < tableMatrix.columns) {\r\n                row.push('');\r\n            }\r\n        }\r\n\r\n        setQuestion({\r\n            ...question,\r\n            tableHeaders: newTableHeaders,\r\n            tableData: newTableData\r\n        })\r\n    };\r\n    const onClickClearEntryButton = (event) => {\r\n        setClearEntryConfirmTarget(event.target);\r\n        setVisibleClearEntryConfirmPopover(true);\r\n    }\r\n    const clearQuestionEntry = () => { setAnswers([]); setQuestion(initQuestion); setVisibleClearEntryConfirmPopover(false); };\r\n    const onClickRegisterButton = (event) => {\r\n        setRegisterConfirmTarget(event.target);\r\n        setVisibleRegisterConfirmPopover(true);\r\n    }\r\n    const registerQuestion = () => {\r\n        setVisibleRegisterConfirmPopover(false);\r\n        if (!question.question) {\r\n            addToastAction('Warning', 'Need to set question.', ToastStatus.Warning)\r\n            return;\r\n        } else if (answers.length < 1) {\r\n            addToastAction('Warning', 'Need to set answers for the question.', ToastStatus.Warning)\r\n            return;\r\n        }\r\n\r\n        QuestionsAPI.registerQuestion({\r\n            ...question, examBodyId: exam.examBodyId, subjectId: exam.subjectId, topicId, subTopicId, year: exam.year\r\n        }, answers).then(response => {\r\n            addToastAction('Success', 'A new question is registered successfully.', ToastStatus.Success);\r\n            clearQuestionEntry();\r\n        }, e => {\r\n            addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger);\r\n        });\r\n    }\r\n    const onShowNewTablePopover = (event) => {\r\n        const preColumns = question.tableHeaders.length;\r\n        const preRows = question.tableData.length + 1;\r\n        setTableMatrix({ columns: preColumns, rows: preRows > 1 ? preRows : 0 })\r\n        setNewTableTarget(event.target);\r\n        setVisibleNewTablePopover(true);\r\n    }\r\n\r\n    // Answers\r\n    const addAnswer = () => {\r\n        setAnswers(answers.concat([{\r\n            correct: false,\r\n            answer: '',\r\n            image: '',\r\n            tableHeaders: [],\r\n            tableData: []\r\n        }]));\r\n    };\r\n    const onChangeAnswerTable = (value, index, type) => {\r\n        const arrAnswers = JSON.parse(JSON.stringify(answers));\r\n        switch (type) {\r\n            case 'CORRECT':\r\n                arrAnswers[index].correct = value;\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'ANSWER':\r\n                arrAnswers[index].answer = value;\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'IMAGE-REMOVE':\r\n                arrAnswers[index].image = '';\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'IMAGE-UPLOAD':\r\n                onUploadImage(index);\r\n                break;\r\n            case 'TABLE':\r\n                for (const key of Object.keys(value)) {\r\n                    const innerValue = value[key];\r\n                    arrAnswers[index][key] = innerValue;\r\n                }\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'REMOVE':\r\n                arrAnswers.splice(index, 1);\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (<Container className='pt-4'>\r\n        <Row>\r\n            <Col>\r\n                <Button variant='link' onClick={() => history.goBack()}>\r\n                    <span className='h6'>Back</span>\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n        <Row className='mb-5'>\r\n            <Col>\r\n                <h1 className='text-primary text-center'>Add a new Question</h1>\r\n            </Col>\r\n        </Row>\r\n        <Form>\r\n            <Row>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Exam Body</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Exam Body\" value={exam.examBodyName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Subject</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Subject\" value={exam.subjectName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Year</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Year\" value={exam.year} />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}><CustomSelect label='Topic' values={topics} value={topicId} onChange={e => setTopicId(e.target.value)} /></Col>\r\n                <Col md={7}><CustomSelect label='Sub Topic' values={subTopics} value={subTopicId} onChange={e => setSubTopicId(e.target.value)} /></Col>\r\n            </Row>\r\n        </Form>\r\n        <Row>\r\n            <Col md={6} lg={4} className='ml-auto'>\r\n                <Form.Group>\r\n                    <Form.Label><strong>Question Number</strong></Form.Label>\r\n                    <Form.Control type='text' placeholder='Enter Question Number' value={question.questionNumber}\r\n                        onChange={e => onChangeQuestion(parseInt(e.target.value), 'questionNumber')} />\r\n                </Form.Group>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12} className='d-flex'>\r\n                <Form.Group className='flex-fill'>\r\n                    <Form.Label><strong>Question</strong></Form.Label>\r\n                    <Form.Control type='text' as='textarea' rows={3} placeholder='Enter Question' value={question.question}\r\n                        onChange={e => onChangeQuestion(e.target.value, 'question')} />\r\n                </Form.Group>\r\n                <div className='ml-3 d-flex flex-column justify-content-end'>\r\n                    <Form.Group className='mb-2'>\r\n                        <FontAwesomeIcon className='cursor-pointer text-warning' size='lg' icon={faImage} onClick={() => onUploadImage(-1)} />\r\n                    </Form.Group>\r\n                    <Form.Group className='pb-3'>\r\n                        <FontAwesomeIcon className='cursor-pointer text-info' size='lg' icon={faTable} onClick={(e) => onShowNewTablePopover(e)} />\r\n                    </Form.Group>\r\n                </div>\r\n            </Col>\r\n\r\n            {!question.image ? null : <Col sm={12}>\r\n                <Image src={question.image} rounded style={{ height: 200, maxWidth: '100%' }} className='mb-3 rounded border border-gray p-1' />\r\n                <FontAwesomeIcon className='cursor-pointer text-danger' size='lg' icon={faTimes}\r\n                    style={{ marginLeft: -25, marginBottom: 87 }} onClick={() => setQuestion({ ...question, image: '' })} />\r\n            </Col>}\r\n            <Col sm={12}>\r\n                <EditableTable headers={question.tableHeaders} data={question.tableData} onChange={onChangeQuestionTable} />\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12} className='px-0'>\r\n                <Form.Group>\r\n                    <Form.Label><strong>Answers</strong></Form.Label>\r\n                    <FontAwesomeIcon className='ml-3 cursor-pointer text-success' icon={faPlus} onClick={addAnswer} />\r\n                </Form.Group>\r\n            </Col>\r\n\r\n            <AnswerTable headers={answerTableHeaders} data={answers} onChange={onChangeAnswerTable} />\r\n        </Row>\r\n        <Row className='justify-content-between'>\r\n            <Button variant='warning' onClick={onClickClearEntryButton}>Clear Entry</Button>\r\n            <Button onClick={onClickRegisterButton}>Register this Question</Button>\r\n        </Row>\r\n        <Form.File ref={fileInput} label='' className='d-none' onChange={onFileChanged} />\r\n\r\n        <Overlay show={visibleNewTablePopover} target={newTableTarget} placement='left' onHide={() => setVisibleNewTablePopover(false)} containerPadding={20} rootClose>\r\n            <Popover style={{ maxWidth: 200 }}>\r\n                <Popover.Title as='h3' className='p-3'>Create a Table</Popover.Title>\r\n                <Popover.Content>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"question-table-columns\">Columns</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"question-table-columns\" value={tableMatrix.columns}\r\n                            onChange={e => onChangeQuestionTableMatrix(e.target.value, 'columns')} />\r\n                    </InputGroup>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"question-table-rows\">Rows</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"question-table-rows\" value={tableMatrix.rows}\r\n                            onChange={e => onChangeQuestionTableMatrix(e.target.value, 'rows')} />\r\n                    </InputGroup>\r\n                    <div className='d-flex justify-content-end'>\r\n                        <Button size='sm' onClick={onCreateQuestionTable}>Create & Close</Button>\r\n                    </div>\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n\r\n        <ConfirmPopover visible={visibleRegisterConfirmPopover} target={registerConfirmTarget} placement='left' setVisibility={setVisibleRegisterConfirmPopover}\r\n            label='Are you sure to register this question?' onConfirm={registerQuestion}/>\r\n\r\n        <ConfirmPopover visible={visibleClearEntryConfirmPopover} target={clearEntryConfirmTarget} placement='right' setVisibility={setVisibleClearEntryConfirmPopover}\r\n            label='Are you sure to clear entry?' onConfirm={clearQuestionEntry}/>\r\n    </Container>\r\n    );\r\n};\r\n\r\nAdminQuestionsAdd.propTypes = {};\r\nAdminQuestionsAdd.defaultProps = {};\r\n\r\nexport default withRouter(connectToasts(AdminQuestionsAdd));\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Col, Container, Form, FormControl, Image, InputGroup, Overlay, Popover, Row } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTable, faImage, faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport QuestionsAPI from '../../../common/api/questions';\r\nimport SubTopicsAPI from '../../../common/api/sub-topics';\r\nimport UploadAPI from '../../../common/api/upload';\r\nimport { connectToasts } from '../../../common/redux/connects';\r\nimport { AnswerTable, EditableTable } from '../../../components/common/table';\r\nimport { ToastStatus } from '../../../common/enums/toast';\r\nimport { CustomSelect } from '../../../components/common/select';\r\nimport { QuestionStatus } from '../../../common/enums/questions';\r\nimport { ConfirmPopover } from '../../../components/common/popover';\r\n\r\nconst answerTableHeaders = ['Correct', 'Option', 'Actions']\r\nconst initQuestion = {\r\n    id: '',\r\n    question: '',\r\n    questionNumber: 0,\r\n    image: '',\r\n    tableHeaders: [],\r\n    tableData: []\r\n};\r\n\r\nfunction AdminQuestionsEdit({ history, match, addToastAction }) {\r\n    const [topics, setTopics] = useState([]);\r\n    const [subTopics, setSubTopics] = useState([]);\r\n    const [exam, setExam] = useState({\r\n        examBodyId: '', examBodyName: '',\r\n        subjectId: '', subjectName: '', year: 0\r\n    });\r\n\r\n    const [topicId, setTopicId] = useState('');\r\n    const [subTopicId, setSubTopicId] = useState('');\r\n\r\n    const fileInput = useRef(null);\r\n    const [question, setQuestion] = useState(initQuestion);\r\n    const [answers, setAnswers] = useState([]);\r\n\r\n    const [assetToChange, setAssetToChange] = useState(null);\r\n    const [tableMatrix, setTableMatrix] = useState({ rows: 0, columns: 0 });\r\n    \r\n    // New Table Popover\r\n    const [newTableTarget, setNewTableTarget] = useState(null);\r\n    const [visibleNewTablePopover, setVisibleNewTablePopover] = useState(false);\r\n\r\n    // Confirm Popover\r\n    const [visibleUpdateConfirmPopover, setVisibleUpdateConfirmPopover] = useState(false);\r\n    const [updateConfirmTarget, setUpdateConfirmTarget] = useState(null);\r\n    const [visibleClearEntryConfirmPopover, setVisibleClearEntryConfirmPopover] = useState(false);\r\n    const [clearEntryConfirmTarget, setClearEntryConfirmTarget] = useState(null);\r\n    useEffect(() => {\r\n        const { questionId } = match.params;\r\n        QuestionsAPI.initEditQuestionsPage(questionId).then(result => {\r\n            setExam({\r\n                examBodyName: result.question.examBodyName,\r\n                subjectName: result.question.subjectName,\r\n                year: result.question.year,\r\n                examBodyId: result.question.examBodyId,\r\n                subjectId: result.question.subjectId\r\n            });\r\n            setTopics(result.topics);\r\n            if (result.topics.length > 0) {\r\n                setTopicId(result.question.topicId);\r\n            }\r\n            setSubTopicId(result.question.subTopicId);\r\n            setQuestion({\r\n                id: result.question.id,\r\n                question: result.question.question,\r\n                questionNumber: result.question.questionNumber,\r\n                image: result.question.image,\r\n                tableHeaders: [].concat(result.question.tableHeaders),\r\n                tableData: [].concat(result.question.tableData)\r\n            });\r\n            setAnswers([].concat(result.question.answers));\r\n            console.log(result.question.answers);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (topicId) {\r\n            SubTopicsAPI.getSubTopics(topicId).then(arrSubTopics => {\r\n                setSubTopics(arrSubTopics);\r\n                setSubTopicId(arrSubTopics[0].id);\r\n            }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n        }\r\n    }, [topicId]);\r\n\r\n    const onChangeQuestion = (value, key) => { setQuestion({ ...question, [key]: value }); };\r\n    const onUploadImage = index => {\r\n        if (index < 0) {\r\n            setAssetToChange('QUESTION');\r\n        } else { setAssetToChange(`ANSWER-${index}`); }\r\n        fileInput.current.click();\r\n    };\r\n    const onFileChanged = async e => {\r\n        const { files } = e.target;\r\n        if (files.length > 0) {\r\n            const file = e.target.files[0];\r\n            const fileName = await UploadAPI.uploadFile(file);\r\n            if (!assetToChange) {\r\n                return;\r\n            }\r\n            if (assetToChange.includes('ANSWER')) {\r\n                const index = parseInt(assetToChange.split('-')[1]);\r\n                const arrAnswers = JSON.parse(JSON.stringify(answers));\r\n                arrAnswers[index].image = fileName\r\n                setAnswers(arrAnswers);\r\n            } else {\r\n                onChangeQuestion(fileName, 'image');\r\n            }\r\n            e.target.value = '';\r\n        }\r\n    }\r\n    const onChangeQuestionTableMatrix = (value, key) => { setTableMatrix({ ...tableMatrix, [key]: value }); }\r\n    const onChangeQuestionTable = ({ content, type }) => {\r\n        switch (type) {\r\n            case 'HEADER':\r\n                setQuestion({ ...question, tableHeaders: content });\r\n                break;\r\n            case 'DATA':\r\n                setQuestion({ ...question, tableData: content });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    const onCreateQuestionTable = () => {\r\n        setVisibleNewTablePopover(false)\r\n\r\n        if (tableMatrix.columns < 1 || tableMatrix.rows < 1) {\r\n            setQuestion({\r\n                ...question,\r\n                tableHeaders: [],\r\n                tableData: []\r\n            })\r\n            return;\r\n        }\r\n\r\n        const newTableHeaders = JSON.parse(JSON.stringify(question.tableHeaders || []));\r\n        const newTableData = JSON.parse(JSON.stringify(question.tableData || []));\r\n        if (newTableHeaders.length > tableMatrix.columns) {\r\n            newTableHeaders.length = tableMatrix.columns;\r\n        } else {\r\n            while (newTableHeaders.length < tableMatrix.columns) {\r\n                newTableHeaders.push('');\r\n            }\r\n        }\r\n\r\n        if (newTableData.length > tableMatrix.rows - 1) {\r\n            newTableData.length = tableMatrix.rows - 1;\r\n        } else {\r\n            while (newTableData.length < tableMatrix.rows - 1) {\r\n                newTableData.push([]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < newTableData.length; i++) {\r\n            const row = newTableData[i];\r\n            if (row.length > tableMatrix.columns - 1) {\r\n                row.length = tableMatrix.columns;\r\n                continue;\r\n            }\r\n            while (row.length < tableMatrix.columns) {\r\n                row.push('');\r\n            }\r\n        }\r\n\r\n        setQuestion({\r\n            ...question,\r\n            tableHeaders: newTableHeaders,\r\n            tableData: newTableData\r\n        })\r\n    };\r\n    const onClickClearEntryButton = (event) => {\r\n        setClearEntryConfirmTarget(event.target);\r\n        setVisibleClearEntryConfirmPopover(true);\r\n    };\r\n    const clearQuestionEntry = () => { setAnswers([]); setQuestion(initQuestion); setVisibleClearEntryConfirmPopover(false); };\r\n    const onClickUpdateButton = (event) => {\r\n        setUpdateConfirmTarget(event.target);\r\n        setVisibleUpdateConfirmPopover(true);\r\n    };\r\n    const updateQuestion = () => {\r\n        setVisibleUpdateConfirmPopover(false);\r\n        if (!question.question) {\r\n            addToastAction('Warning', 'Need to set question.', ToastStatus.Warning)\r\n            return;\r\n        } else if (answers.length < 1) {\r\n            addToastAction('Warning', 'Need to set answers for the question.', ToastStatus.Warning)\r\n            return;\r\n        }\r\n\r\n        QuestionsAPI.updateQuestion({\r\n            ...question, examBodyId: exam.examBodyId, subjectId: exam.subjectId, topicId, subTopicId, year: exam.year\r\n        }, answers).then(response => {\r\n            addToastAction('Success', 'The question is updated successfully.', ToastStatus.Success);\r\n            // clearQuestionEntry();\r\n        }, e => {\r\n            addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger);\r\n        });\r\n    };\r\n    const onShowNewTablePopover = (event) => {\r\n        const preColumns = question.tableHeaders.length;\r\n        const preRows = question.tableData.length + 1;\r\n        setTableMatrix({ columns: preColumns, rows: preRows > 1 ? preRows : 0 })\r\n        setNewTableTarget(event.target);\r\n        setVisibleNewTablePopover(true);\r\n    };\r\n\r\n    // Answers\r\n    const addAnswer = () => {\r\n        setAnswers(answers.concat([{\r\n            correct: false,\r\n            answer: '',\r\n            image: '',\r\n            tableHeaders: [],\r\n            tableData: []\r\n        }]));\r\n    };\r\n    const onChangeAnswerTable = (value, index, type) => {\r\n        const arrAnswers = JSON.parse(JSON.stringify(answers));\r\n        switch (type) {\r\n            case 'CORRECT':\r\n                arrAnswers[index].correct = value;\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'ANSWER':\r\n                arrAnswers[index].answer = value;\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'IMAGE-REMOVE':\r\n                arrAnswers[index].image = '';\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'IMAGE-UPLOAD':\r\n                onUploadImage(index);\r\n                break;\r\n            case 'TABLE':\r\n                for (const key of Object.keys(value)) {\r\n                    const innerValue = value[key];\r\n                    arrAnswers[index][key] = innerValue;\r\n                }\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            case 'REMOVE':\r\n                arrAnswers.splice(index, 1);\r\n                setAnswers(arrAnswers);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (<Container className='pt-4'>\r\n        <Row>\r\n            <Col>\r\n                <Button variant='link' onClick={() => history.goBack()}>\r\n                    <span className='h6'>Back</span>\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n        <Row className='mb-5'>\r\n            <Col>\r\n                <h1 className='text-primary text-center'>Edit a Question</h1>\r\n            </Col>\r\n        </Row>\r\n        <Form>\r\n            <Row>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Exam Body</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Exam Body\" value={exam.examBodyName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Subject</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Subject\" value={exam.subjectName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Year</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Year\" value={exam.year} />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}><CustomSelect label='Topic' values={topics} value={topicId} onChange={e => setTopicId(e.target.value)} /></Col>\r\n                <Col md={7}><CustomSelect label='Sub Topic' values={subTopics} value={subTopicId} onChange={e => setSubTopicId(e.target.value)} /></Col>\r\n            </Row>\r\n        </Form>\r\n        <Row>\r\n            <Col md={6} lg={4} className='ml-auto'>\r\n                <Form.Group>\r\n                    <Form.Label><strong>Question Number</strong></Form.Label>\r\n                    <Form.Control type='text' placeholder='Enter Question Number' value={question.questionNumber}\r\n                        onChange={e => onChangeQuestion(parseInt(e.target.value), 'questionNumber')} />\r\n                </Form.Group>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12} className='d-flex'>\r\n                <Form.Group className='flex-fill'>\r\n                    <Form.Label><strong>Question</strong></Form.Label>\r\n                    <Form.Control type='text' as='textarea' rows={3} placeholder='Enter Question' value={question.question}\r\n                        onChange={e => onChangeQuestion(e.target.value, 'question')} />\r\n                </Form.Group>\r\n                <div className='ml-3 d-flex flex-column justify-content-end'>\r\n                    <Form.Group className='mb-2'>\r\n                        <FontAwesomeIcon className='cursor-pointer text-warning' size='lg' icon={faImage} onClick={() => onUploadImage(-1)} />\r\n                    </Form.Group>\r\n                    <Form.Group className='pb-3'>\r\n                        <FontAwesomeIcon className='cursor-pointer text-info' size='lg' icon={faTable} onClick={(e) => onShowNewTablePopover(e)} />\r\n                    </Form.Group>\r\n                </div>\r\n            </Col>\r\n\r\n            {!question.image ? null : <Col sm={12}>\r\n                <Image src={question.image} rounded style={{ height: 200, maxWidth: '100%' }} className='mb-3 rounded border border-gray p-1' />\r\n                <FontAwesomeIcon className='cursor-pointer text-danger' size='lg' icon={faTimes}\r\n                    style={{ marginLeft: -25, marginBottom: 87 }} onClick={() => setQuestion({ ...question, image: '' })} />\r\n            </Col>}\r\n            <Col sm={12}>\r\n                <EditableTable headers={question.tableHeaders} data={question.tableData} onChange={onChangeQuestionTable} />\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col sm={12} className='px-0'>\r\n                <Form.Group>\r\n                    <Form.Label><strong>Answers</strong></Form.Label>\r\n                    <FontAwesomeIcon className='ml-3 cursor-pointer text-success' icon={faPlus} onClick={addAnswer} />\r\n                </Form.Group>\r\n            </Col>\r\n\r\n            <AnswerTable headers={answerTableHeaders} data={answers} onChange={onChangeAnswerTable} />\r\n        </Row>\r\n        <Row className='justify-content-between'>\r\n            <Button variant='warning' onClick={onClickClearEntryButton}>Clear Entry</Button>\r\n            <Button disabled={question.status === QuestionStatus.Published} onClick={onClickUpdateButton}>Update this Question</Button>\r\n        </Row>\r\n        <Form.File ref={fileInput} label='' className='d-none' onChange={onFileChanged} />\r\n\r\n        <Overlay show={visibleNewTablePopover} target={newTableTarget} placement='left' onHide={() => setVisibleNewTablePopover(false)} containerPadding={20} rootClose>\r\n            <Popover style={{ maxWidth: 200 }}>\r\n                <Popover.Title as='h3' className='p-3'>Create a Table</Popover.Title>\r\n                <Popover.Content>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"question-table-columns\">Columns</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"question-table-columns\" value={tableMatrix.columns}\r\n                            onChange={e => onChangeQuestionTableMatrix(e.target.value, 'columns')} />\r\n                    </InputGroup>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"question-table-rows\">Rows</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"question-table-rows\" value={tableMatrix.rows}\r\n                            onChange={e => onChangeQuestionTableMatrix(e.target.value, 'rows')} />\r\n                    </InputGroup>\r\n                    <div className='d-flex justify-content-end'>\r\n                        <Button size='sm' onClick={onCreateQuestionTable}>Create & Close</Button>\r\n                    </div>\r\n                </Popover.Content>\r\n            </Popover>\r\n        </Overlay>\r\n\r\n        <ConfirmPopover visible={visibleUpdateConfirmPopover} target={updateConfirmTarget} placement='left' setVisibility={setVisibleUpdateConfirmPopover}\r\n            label='Are you sure to update this question?' onConfirm={updateQuestion}/>\r\n\r\n        <ConfirmPopover visible={visibleClearEntryConfirmPopover} target={clearEntryConfirmTarget} placement='right' setVisibility={setVisibleClearEntryConfirmPopover}\r\n            label='Are you sure to clear entry?' onConfirm={clearQuestionEntry}/>\r\n    </Container>\r\n    );\r\n};\r\n\r\nAdminQuestionsEdit.propTypes = {};\r\nAdminQuestionsEdit.defaultProps = {};\r\n\r\nexport default withRouter(connectToasts(AdminQuestionsEdit));\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Image } from 'react-bootstrap';\r\n\r\nimport { CustomTable } from '../common/table';\r\nimport { AnyTextInput } from '../common/text-input';\r\n\r\nfunction AnswerInRow({ correct, answer, image, tableHeaders, tableData }) {\r\n    return (<Form className='pb-3'>\r\n        <Form.Check className='d-flex align-items-center' type=\"checkbox\" checked={correct} onChange={() => {}} label={<AnyTextInput value={answer} equation/>} />\r\n\r\n        {!!image ? <Form.Row className='ml-3'><Image src={image} rounded style={{ height: 100, maxWidth: '100%' }} /></Form.Row> : null}\r\n\r\n        {(!!tableHeaders && !!tableHeaders.length) ? <CustomTable headers={tableHeaders} data={tableData}/> : null}\r\n    </Form>);\r\n};\r\n\r\nAnswerInRow.propTypes = {\r\n    correct: PropTypes.bool,\r\n    answer: PropTypes.string,\r\n    image: PropTypes.string,\r\n    tableHeaders: PropTypes.arrayOf(PropTypes.string),\r\n    tableData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))\r\n};\r\nAnswerInRow.defaultProps = {\r\n    correct: false,\r\n    answer: '',\r\n    image: '',\r\n    tableHeaders: [],\r\n    tableData: []\r\n};\r\n\r\nexport default AnswerInRow;\r\n","import React, { useState } from 'react';\r\nimport { Accordion, Button, Card, Dropdown, DropdownButton, Form, Image, Overlay, Popover } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\nimport { withRouter } from 'react-router';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport AnswerInRow from './answer-in-row';\r\nimport { CustomTable } from '../common/table';\r\nimport { AnyTextInput } from '../common/text-input';\r\nimport { QuestionStatus } from '../../common/enums/questions';\r\nimport { connectAuth } from '../../common/redux/connects';\r\nimport { UserRole } from '../../common/enums/auth';\r\nimport { ConfirmPopover } from '../common/popover';\r\n\r\nfunction QuestionInRow({\r\n    history, onDelete, topicName, subTopicName,\r\n    id, question, questionNumber, status,\r\n    image, tableHeaders, tableData, answers, user\r\n}) {\r\n    const [isDetailOpened, setIsDetailOpened] = useState(false);\r\n\r\n    const [removingQuestionId, setRemovingQuestionId] = useState(null);\r\n    const [visibleConfirmPopover, setVisibleConfirmPopover] = useState(false);\r\n    const [target, setTarget] = useState(null);\r\n\r\n    const showDeleteQuestionConfirmPopover = (event, questionId) => {\r\n        const dropDownTarget = event.target.parentNode.parentNode.firstChild;\r\n        setTarget(dropDownTarget);\r\n        setVisibleConfirmPopover(!visibleConfirmPopover);\r\n        setRemovingQuestionId(questionId);\r\n    };\r\n\r\n    return (\r\n        <div className='border-bottom border-gray lh-125 mb-0 pt-1'>\r\n            <Accordion>\r\n                <Card>\r\n                    <Card.Header className='d-flex align-items-center'>\r\n                        <div className='m-0 d-flex align-items-center'><strong className='mr-1'>[{questionNumber}]</strong> <AnyTextInput value={question} equation/></div>\r\n\r\n                        <Accordion.Toggle as={FontAwesomeIcon} icon={faAngleDown} size='lg' eventKey='0'\r\n                            className={classNames(['cursor-pointer', 'toggle-arrow', 'ml-auto'], {\r\n                                'toggle-arrow-open': isDetailOpened\r\n                            })} onClick={() => setIsDetailOpened(!isDetailOpened)}>\r\n                            Click me!\r\n                        </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey='0'>\r\n                        <Card.Body>\r\n                            <DropdownButton variant='secondary' size='sm' title='Actions' className='text-right d-block'>\r\n                                <Dropdown.Item disabled={user.role === UserRole.Admin && status === QuestionStatus.Published}\r\n                                    onClick={() => history.push(`/admin/questions/edit/${id}`)}>Edit Entry</Dropdown.Item>\r\n                                <Dropdown.Item disabled={user.role === UserRole.Admin && status === QuestionStatus.Published}\r\n                                    onClick={(e) => showDeleteQuestionConfirmPopover(e, id)}>Delete Question</Dropdown.Item>\r\n                            </DropdownButton>\r\n                            <p><strong>Topic:</strong> {topicName}</p>\r\n                            <p><strong>Sub Topic:</strong> {subTopicName}</p>\r\n                            <div className='m-0 d-flex align-items-center'><AnyTextInput value={question} equation/></div>\r\n                            {/* <p><strong>{question}</strong></p> */}\r\n\r\n                            {!!image ? <Form.Row className='ml-3'><Image src={image} rounded style={{ height: 100, maxWidth: '100%' }} /></Form.Row> : null}\r\n\r\n                            <CustomTable headers={tableHeaders} data={tableData} />\r\n\r\n                            {answers.map((answer, ai) => <AnswerInRow key={ai} {...answer} />)}\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n\r\n            <ConfirmPopover visible={visibleConfirmPopover} target={target} setVisibility={setVisibleConfirmPopover}\r\n                label='Are you sure to delete this question?' onConfirm={() => { setVisibleConfirmPopover(false); onDelete(removingQuestionId); }}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nQuestionInRow.propTypes = {\r\n    id: PropTypes.string,\r\n    examBodyId: PropTypes.string,\r\n    examBodyName: PropTypes.string,\r\n    examBodyLogoUrl: PropTypes.string,\r\n    subjectId: PropTypes.string,\r\n    subjectName: PropTypes.string,\r\n    topicId: PropTypes.string,\r\n    topicName: PropTypes.string,\r\n    subTopicId: PropTypes.string,\r\n    subTopicName: PropTypes.string,\r\n    year: PropTypes.number,\r\n    question: PropTypes.string,\r\n    questionNumber: PropTypes.number,\r\n    image: PropTypes.string,\r\n    status: PropTypes.oneOf(Object.values(QuestionStatus)),\r\n    tableHeaders: PropTypes.arrayOf(PropTypes.string),\r\n    tableData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\r\n    answers: PropTypes.arrayOf(PropTypes.shape({\r\n        correct: PropTypes.bool,\r\n        value: PropTypes.string,\r\n        image: PropTypes.string,\r\n        tableHeaders: PropTypes.arrayOf(PropTypes.string),\r\n        tableData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\r\n    })),\r\n    onDelete: PropTypes.func\r\n};\r\n\r\nQuestionInRow.defaultProps = {\r\n    id: '',\r\n    examBodyId: '',\r\n    examBodyName: '',\r\n    examBodyLogoUrl: '',\r\n    subjectId: '',\r\n    subjectName: '',\r\n    topicId: '',\r\n    topicName: '',\r\n    subTopicId: '',\r\n    subTopicName: '',\r\n    year: 1988,\r\n    question: '',\r\n    questionNumber: 1,\r\n    image: '',\r\n    status: QuestionStatus.Draft,\r\n    tableHeaders: [],\r\n    tableData: [],\r\n    answers: [],\r\n    onDelete: PropTypes.func\r\n};\r\n\r\nexport default withRouter(connectAuth(QuestionInRow));\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Alert, Button, Col, Container, Form, Row } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { CustomSelect } from '../../../components/common/select';\r\nimport { LoadingSpinner } from '../../../components/common/spinner';\r\nimport QuestionInRow from '../../../components/questions/question-in-row';\r\n\r\nimport QuestionsAPI from '../../../common/api/questions';\r\nimport SubTopicsAPI from '../../../common/api/sub-topics';\r\nimport { ToastStatus } from '../../../common/enums/toast';\r\nimport { connectAuth, connectToasts } from '../../../common/redux/connects';\r\nimport { QuestionStatus } from '../../../common/enums/questions';\r\nimport { UserRole } from '../../../common/enums/auth';\r\nimport { ConfirmPopover } from '../../../components/common/popover';\r\n\r\nfunction AdminQuestionsList({ match, history, addToastAction, user }) {\r\n    const [exam, setExam] = useState({\r\n        examBodyId: '', examBodyName: '',\r\n        subjectId: '', subjectName: '', year: 0\r\n    });\r\n    const [topics, setTopics] = useState([{ id: '', name: '- All Topics -' }]);\r\n    const [subTopics, setSubTopics] = useState([{ id: '', name: '- All Sub Topics -' }]);\r\n    const [topicId, setTopicId] = useState('');\r\n    const [subTopicId, setSubTopicId] = useState('');\r\n\r\n    const [questions, setQuestions] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    // Confirm Popover\r\n    const [visiblePublishConfirmPopover, setVisiblePublishConfirmPopover] = useState(false);\r\n    const [publishConfirmTarget, setPublishConfirmTarget] = useState(null);\r\n    const [visibleRequestToPublishConfirmPopover, setVisibleRequestToPublishConfirmPopover] = useState(false);\r\n    const [requestToPublishConfirmTarget, setRequestToPublishConfirmTarget] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const { examBodyId, subjectId, year } = match.params;\r\n        setIsLoading(true);\r\n        QuestionsAPI.initRegisterQuestionsPage(examBodyId, subjectId).then(result => {\r\n            const { examBodyName, subjectName } = result;\r\n            setExam({ examBodyName, subjectName, year: parseInt(year), examBodyId, subjectId });\r\n            setTopics([{ id: '', name: '- All Topics -' }].concat(result.topics));\r\n        }, e => {\r\n            addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger);\r\n            setIsLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        onRefreshQuestionsList();\r\n    }, [exam])\r\n\r\n    useEffect(() => {\r\n        if (topicId) {\r\n            SubTopicsAPI.getSubTopics(topicId).then(arrSubTopics => {\r\n                setSubTopics([{ id: '', name: '- All Sub Topics -' }].concat(arrSubTopics));\r\n                if (!subTopicId) {\r\n                    onRefreshQuestionsList();\r\n                } else { setSubTopicId(''); }\r\n            }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n        } else {\r\n            setSubTopics([{ id: '', name: '- All Sub Topics -' }]);\r\n            if (!subTopicId) {\r\n                onRefreshQuestionsList();\r\n            } else { setSubTopicId(''); }\r\n        }\r\n    }, [topicId]);\r\n\r\n    useEffect(() => {\r\n        onRefreshQuestionsList();\r\n    }, [subTopicId])\r\n\r\n    const onRefreshQuestionsList = () => {\r\n        if (!exam.examBodyId || !exam.subjectId || !exam.year) { return; }\r\n\r\n        setIsLoading(true);\r\n        QuestionsAPI.findQuestionsByExam(\r\n            exam.examBodyId,\r\n            exam.subjectId,\r\n            exam.year,\r\n            { topicId, subTopicId, keyword: '' }\r\n        ).then(qs => {\r\n            setQuestions(qs);\r\n            setIsLoading(false);\r\n        }, e => {\r\n            addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger);\r\n            setIsLoading(false);\r\n        });\r\n    }\r\n\r\n    const onClickRequestToPublishButton = (event) => {\r\n        setRequestToPublishConfirmTarget(event.target);\r\n        setVisibleRequestToPublishConfirmPopover(true);\r\n    };\r\n\r\n    const onRequestToPublish = () => {\r\n        setVisibleRequestToPublishConfirmPopover(false);\r\n        const { examBodyId, subjectId, year } = match.params;\r\n        QuestionsAPI.requestToPublish(examBodyId, subjectId, parseInt(year)).then(result => {\r\n            addToastAction('Success', 'Questions are requested to be published.', ToastStatus.Success);\r\n            updateQuestionsStatus(QuestionStatus.UnderReview);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    };\r\n\r\n    const onClickPublishQuestionsButton = (event) => {\r\n        setPublishConfirmTarget(event.target);\r\n        setVisiblePublishConfirmPopover(true);\r\n    };\r\n\r\n    const onPublishQuestions = () => {\r\n        setVisiblePublishConfirmPopover(false);\r\n        const { examBodyId, subjectId, year } = match.params;\r\n        QuestionsAPI.publishQuestions(examBodyId, subjectId, parseInt(year)).then(result => {\r\n            addToastAction('Success', 'Questions are requested to be published.', ToastStatus.Success);\r\n            updateQuestionsStatus(QuestionStatus.Published);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    }\r\n\r\n    const updateQuestionsStatus = (status) => {\r\n        const newQuestions = JSON.parse(JSON.stringify(questions));\r\n        for (const iterator of newQuestions) {\r\n            iterator.status = status;\r\n        }\r\n        setQuestions(newQuestions);\r\n    }\r\n\r\n    const onDeleteQuestion = (id) => {\r\n        QuestionsAPI.deleteQuestion(id).then(res => {\r\n            const newQuestions = JSON.parse(JSON.stringify(questions));\r\n            const index = newQuestions.findIndex(q => q.id === id);\r\n            newQuestions.splice(index, 1);\r\n            setQuestions(newQuestions);\r\n        }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n    }\r\n\r\n    const renderExaminationStatus = () => {\r\n        if (questions.length < 1) {\r\n            return null;\r\n        }\r\n        if (questions[0].status === QuestionStatus.Draft) {\r\n            return <Alert variant='info'> Questions are in draft.</Alert>\r\n        } else if (questions[0].status === QuestionStatus.UnderReview) {\r\n            return <Alert variant='info'> Questions are under review.</Alert>\r\n        } else {\r\n            return <Alert variant='success'> Questions are already published.</Alert>\r\n        }\r\n    };\r\n\r\n    const renderActionButtons = () => {\r\n        if (questions.length < 1) {\r\n            return null;\r\n        }\r\n        if (questions[0].status === QuestionStatus.Draft) {\r\n            return <Button variant='info' disabled={isLoading} className='float-right' onClick={onClickRequestToPublishButton}>Request to Publish</Button>\r\n        } else if (questions[0].status === QuestionStatus.UnderReview && user.role === UserRole.SuperAdmin) {\r\n            return <Button variant='success' disabled={isLoading} className='float-right' onClick={onClickPublishQuestionsButton}>Publish Now</Button>\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    return (<Container className='pt-4'>\r\n        <Row>\r\n            <Col>\r\n                <Button variant='link' onClick={() => history.goBack()}>\r\n                    <span className='h6'>Back</span>\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n        <Row className='mb-5'>\r\n            <Col>\r\n                <h1 className='text-center text-primary'>Questions List</h1>\r\n            </Col>\r\n        </Row>\r\n        <Form>\r\n            <Row>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Exam Body</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Exam Body\" value={exam.examBodyName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Subject</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Subject\" value={exam.subjectName} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Group>\r\n                        <Form.Label><strong>Year</strong></Form.Label>\r\n                        <Form.Control disabled type=\"text\" placeholder=\"Year\" value={exam.year} />\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={5}><CustomSelect label='Topic' values={topics} value={topicId} onChange={e => setTopicId(e.target.value)} /></Col>\r\n                <Col md={7}><CustomSelect label='Sub Topic' values={subTopics} value={subTopicId} onChange={e => setSubTopicId(e.target.value)} /></Col>\r\n            </Row>\r\n        </Form>\r\n        <Row className='mt-5 mb-3'>\r\n            <Col>\r\n                {renderExaminationStatus()}\r\n                {renderActionButtons()}\r\n            </Col>\r\n        </Row>\r\n        <Row className='justify-content-center'>\r\n            {isLoading ?\r\n                <LoadingSpinner /> :\r\n                questions.map((question, qi) => <Col sm={12} key={qi}><QuestionInRow {...question} onDelete={onDeleteQuestion} /></Col>)\r\n            }\r\n        </Row>\r\n\r\n        <ConfirmPopover visible={visiblePublishConfirmPopover} target={publishConfirmTarget} setVisibility={setVisiblePublishConfirmPopover}\r\n            label='Are you sure to publish questions?' onConfirm={onPublishQuestions}/>\r\n\r\n        <ConfirmPopover visible={visibleRequestToPublishConfirmPopover} target={requestToPublishConfirmTarget}\r\n            setVisibility={setVisibleRequestToPublishConfirmPopover} label='Are you sure to request these questions to publish?' onConfirm={onRequestToPublish}/>\r\n    </Container >);\r\n};\r\n\r\nAdminQuestionsList.propTypes = {};\r\nAdminQuestionsList.defaultProps = {};\r\n\r\nexport default withRouter(connectToasts(connectAuth(AdminQuestionsList)));\r\n","import React, { useEffect, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const CustomSwitch = ({ size, label, color, value, onChange, className }) => {\r\n    const [id, setId] = useState('');\r\n    useEffect(() => {\r\n        setId(String(Date.now()).toLowerCase());\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classNames('custom-control custom-switch', className, {\r\n            'custom-switch-sm': size === 'sm',\r\n            'custom-switch-md': size === 'md',\r\n            'custom-switch-lg': size === 'lg',\r\n            'custom-switch-xl': size === 'xl'\r\n        })}>\r\n            <input type='checkbox' className='custom-control-input' id={`switch-${id}`} checked={value} onChange={onChange}/>\r\n            <label className={classNames('custom-control-label', `custom-control-label-${color}`)} htmlFor={`switch-${id}`}>{}</label>\r\n            <label>{label}</label>\r\n        </div>\r\n    );\r\n};\r\n\r\nCustomSwitch.propTypes = {\r\n    size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),\r\n    color: PropTypes.oneOf(['primary', 'success', 'info', 'warning', 'danger']),\r\n    label: PropTypes.string,\r\n    value: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    className: PropTypes.string\r\n};\r\nCustomSwitch.defaultProps = {\r\n    size: 'md',\r\n    color: 'primary',\r\n    label: '',\r\n    value: false,\r\n    onChange: () => {},\r\n    className: ''\r\n};\r\n","import { ConstantNames } from '../constants/default-values';\r\nimport { UITheme } from '../enums/theme';\r\n\r\nexport const toggleDarkTheme = (isDarkTheme = false, forceRedirect = true) => {\r\n    if (isDarkTheme) {\r\n        localStorage.setItem(ConstantNames.UITheme, UITheme.Dark);\r\n    } else if (!isDarkTheme) {\r\n        localStorage.setItem(ConstantNames.UITheme, UITheme.Light);\r\n    }\r\n    if (forceRedirect) {\r\n        window.location.reload();\r\n    }\r\n};\r\n\r\nexport const isDarkTheme = () => {\r\n    return localStorage.getItem(ConstantNames.UITheme) === UITheme.Dark;\r\n};\r\n","import React, { useState, lazy } from 'react';\r\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    withRouter\r\n} from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// Pages\r\nimport AdminDashboard from '../pages/admin/dashboard';\r\nimport AdminSelectExamBody from '../pages/admin/questions/select-exam-body';\r\nimport AdminQuestionGroups from '../pages/admin/questions/question-groups';\r\nimport AdminQuestionsAdd from '../pages/admin/questions/question-add';\r\nimport AdminQuestionsEdit from '../pages/admin/questions/question-edit';\r\nimport AdminQuestionsList from '../pages/admin/questions/question-list';\r\n\r\n// Components\r\nimport { CustomSwitch } from '../components/common/switch';\r\n\r\n// Utils\r\nimport { connectAuth } from '../common/redux/connects';\r\nimport { isDarkTheme, toggleDarkTheme } from '../common/utils/theme';\r\nimport { UserRole } from '../common/enums/auth';\r\n\r\nconst VideoList = lazy(() => import('../pages/admin/videos/video-list'));\r\nconst VideoView = lazy(() => import('../pages/admin/videos/video-view'));\r\nconst VideoForm = lazy(() => import('../pages/admin/videos/video-form'));\r\n\r\nconst UserList = lazy(() => import('../pages/admin/users/users-list'));\r\nconst UserForm = lazy(() => import('../pages/admin/users/user-form'));\r\nconst UserView = lazy(() => import('../pages/admin/users/user-view'));\r\n\r\nconst ReportList = lazy(() => import('../pages/admin/reports/reports-list'));\r\nconst ReportView = lazy(() => import('../pages/admin/reports/reports-view'));\r\n\r\n\r\n\r\nfunction AdminLayout({ match, history, user, logoutUserAction }) {\r\n    const [darkTheme] = useState(isDarkTheme());\r\n\r\n    return (<div className='vh-100 vw-100'>\r\n        <Navbar className='shadow-sm bg-white' expand='sm'>\r\n            <Navbar.Brand>\r\n                <span className='cursor-pointer' onClick={() => history.push('/')}>Video Watching</span>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className='justify-content-end'>\r\n                <Nav className=\"mr-auto\">\r\n                    <Link className=\"nav-link\" to=\"/admin/users\">Users</Link>\r\n                    <Link className=\"nav-link\" to=\"/admin/videos\">Videos</Link>\r\n                    <Link className=\"nav-link\" to=\"/admin/reports\">Reports</Link>\r\n                    {/* <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                    <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                    <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                    <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                    </NavDropdown> */}\r\n                </Nav>\r\n                <Nav className='ml-auto mr-3'>\r\n                    <div className='d-flex'>\r\n                        <CustomSwitch className='my-auto mr-1' value={darkTheme} onChange={e => toggleDarkTheme(e.target.checked)} />\r\n                        <Nav.Link disabled className='px-0'>Dark Theme</Nav.Link>\r\n                    </div>\r\n                    <NavDropdown alignRight title={<FontAwesomeIcon className='mx-1 my-auto' icon={faUser} size='lg' />}>\r\n                        {/* <NavDropdown.Item disabled={user.role !== UserRole.SuperAdmin}>Exam Bodies</NavDropdown.Item>\r\n                        <NavDropdown.Item disabled={user.role !== UserRole.SuperAdmin}>Subjects</NavDropdown.Item>\r\n                        <NavDropdown.Item disabled={user.role !== UserRole.SuperAdmin}>Topics & Sub Topics</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item disabled>Profile</NavDropdown.Item>\r\n                        <NavDropdown.Item disabled>Notifications</NavDropdown.Item> */}\r\n                        <NavDropdown.Item onClick={logoutUserAction}>Logout</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        <div className='mx-2'>\r\n            <main className='container mt-3 shadow-sm rounded bg-white p-3 mt-2'>\r\n                <Switch>\r\n                    <Route exact path={`${match.url}/dashboard`} component={AdminDashboard} />\r\n                    <Route exact path={`${match.url}/questions/select-exam-body`} component={AdminSelectExamBody} />\r\n                    <Route exact path={`${match.url}/questions/by-exam-body/:examBodyId`} component={AdminQuestionGroups} />\r\n                    <Route exact path={`${match.url}/questions/add/:examBodyId/:subjectId/:year`} component={AdminQuestionsAdd} />\r\n                    <Route exact path={`${match.url}/questions/view/:examBodyId/:subjectId/:year`} component={AdminQuestionsList} />\r\n                    <Route exact path={`${match.url}/questions/edit/:questionId`} component={AdminQuestionsEdit} />\r\n\r\n                    <Route exact path={`${match.url}/videos`} component={VideoList} />\r\n                    <Route exact path={`${match.url}/videos/view/:id`} component={VideoView} />\r\n                    <Route exact path={`${match.url}/videos/add`} component={VideoForm} />\r\n                    <Route exact path={`${match.url}/videos/:id/update`} component={VideoForm} />\r\n\r\n                    <Route exact path={`${match.url}/users`} component={UserList} />\r\n                    <Route exact path={`${match.url}/users/add`} component={UserForm} />\r\n                    <Route exact path={`${match.url}/users/:id/update`} component={UserForm} />\r\n                    <Route exact path={`${match.url}/users/view/:id`} component={UserView} />\r\n\r\n                    <Route exact path={`${match.url}/reports`} component={ReportList} />\r\n                    <Route exact path={`${match.url}/reports/view/:reportId`} component={ReportView} />\r\n\r\n                    <Route path='/' >\r\n                        <Redirect to={`${match.url}/dashboard`} />\r\n                    </Route>\r\n\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    </div>);\r\n};\r\n\r\nexport default withRouter(connectAuth(AdminLayout));","import React from 'react';\r\nimport { withRouter } from 'react-router';\r\n\r\nfunction CustomerDashboard() {\r\n\r\n    return (\r\n        <div className='bg-primary py-100 text-center'>\r\n            <span className='display-4'>Customer Dashboard</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nCustomerDashboard.propTypes = {};\r\nCustomerDashboard.defaultProps = {};\r\n\r\nexport default withRouter(CustomerDashboard);\r\n","import React, { useState, lazy } from 'react';\r\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    withRouter\r\n} from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\n//  pages\r\nimport CustomerDashboard from '../pages/customer/dashboard';\r\n//  pages\r\nimport { CustomSwitch } from '../components/common/switch';\r\nimport { connectAuth } from '../common/redux/connects';\r\nimport { isDarkTheme, toggleDarkTheme } from '../common/utils/theme';\r\n\r\nconst VideoList = lazy(() => import('../pages/customer/videos/video-list'));\r\nconst VideoView = lazy(() => import('../pages/customer/videos/video-view'));\r\n\r\nconst UserView = lazy(() => import('../pages/admin/users/user-view'));\r\nconst ReportView = lazy(() => import('../pages/admin/reports/reports-view'));\r\n\r\nfunction CustomerLayout({ match, history, logoutUserAction, user }) {\r\n    const [darkTheme] = useState(isDarkTheme());\r\n\r\n    return (<div className='vh-100 vw-100'>\r\n        <Navbar bg='dark' variant='dark' expand='md'>\r\n            <Navbar.Brand>\r\n                <span className='cursor-pointer' onClick={() => history.push('/')}>Video Watching</span>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className='justify-content-end'>\r\n                <Nav className=\"mr-auto\">\r\n                    <Link className=\"nav-link\" to={`${match.url}/videos`}>Videos</Link>\r\n                    <Link className=\"nav-link\" to={`${match.url}/users/${user.id}/reports`}>Report</Link>\r\n                </Nav>\r\n\r\n                <Nav className='ml-auto mr-3'>\r\n                    <div className='d-flex'>\r\n                        <CustomSwitch className='my-auto mr-1' value={darkTheme} onChange={e => toggleDarkTheme(e.target.checked)} />\r\n                        <Nav.Link disabled className='px-0'>Dark Theme</Nav.Link>\r\n                    </div>\r\n                    <NavDropdown alignRight title={<FontAwesomeIcon className='mx-1 my-auto' icon={faUser} size='lg' />}>\r\n                        {/* <NavDropdown.Item disabled>Profile</NavDropdown.Item>\r\n                        <NavDropdown.Item disabled>Magazines</NavDropdown.Item>\r\n                        <NavDropdown.Item disabled>Notifications</NavDropdown.Item> */}\r\n                        {/* <NavDropdown.Divider /> */}\r\n                        <NavDropdown.Item onClick={logoutUserAction}>Logout</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <main className='container shadow-sm rounded bg-white p-3 mt-2'>\r\n            <Switch>\r\n                <Route exact path={`${match.url}/dashboard`} component={CustomerDashboard} />\r\n                <Route exact path={`${match.url}/users`}>\r\n                    <div>User Management</div>\r\n                </Route>\r\n                <Route exact path={`${match.url}/users/:id/reports`} component={UserView} />\r\n                <Route exact path={`${match.url}/users/:id/reports/:reportId`} component={ReportView} />\r\n\r\n                <Route exact path={`${match.url}/videos`} component={VideoList} />\r\n                <Route exact path={`${match.url}/videos/view/:id`} component={VideoView} />\r\n\r\n                <Route path='/' >\r\n                    <Redirect to={`${match.url}/videos`} />\r\n                </Route>\r\n            </Switch>\r\n        </main>\r\n    </div>);\r\n};\r\n\r\nexport default withRouter(connectAuth(CustomerLayout));\r\n","import React from 'react';\r\n\r\nfunction LandingPage() {\r\n    return (\r\n        <div className='bg-primary py-100 text-center'>\r\n            <span className='display-1'>Welcome</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nLandingPage.propTypes = {};\r\nLandingPage.defaultProps = {};\r\n\r\nexport default LandingPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form\r\n} from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { getDefaultRedirectPath } from '../../common/utils/auth';\r\nimport { connectAuth } from '../../common/redux/connects';\r\n\r\nfunction LoginPage({ user, loginUserAction, history, authError }) {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isSubmit, setIsSubmit] = useState(false);\r\n\r\n    useEffect(() => {\r\n        user && history.replace(getDefaultRedirectPath());\r\n    }, [user])\r\n\r\n    return (\r\n        <div className='py-100'>\r\n            <Card className='mx-auto shadow-sm' style={{ width: 'fit-content' }}>\r\n                <Card.Header as='h5'>Login</Card.Header>\r\n                <Card.Body>\r\n                    <Form>\r\n                        <Form.Group controlId='loginFormEmail'>\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control type='email' placeholder='Enter email' value={email} onChange={e => setEmail(e.target.value)} />\r\n                            <Form.Text className='text-muted'>  \r\n                                We'll never share your email with anyone else.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId='loginFormPassword'>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type='password' placeholder='Password' value={password} onChange={e => setPassword(e.target.value)}\r\n                                onKeyPress={event => (event.key === 'Enter') && loginUserAction({ email, password }, history)} />\r\n                            {/*\r\n                                <Form.Text className='text-muted'>\r\n                                    <span className='cursor-pointer hover-underline' onClick={() => history.push('/auth/forgot-password')}>Fotgot password?</span>\r\n                                </Form.Text>\r\n                            */}\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Text className='text-center text-danger'>\r\n                                {isSubmit && String(authError)}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Row className='justify-content-end'>\r\n                            <Button className='float-right' variant='primary' onClick={() => {\r\n                                setIsSubmit(true)\r\n                                loginUserAction({ email, password }, history)\r\n                            }}>\r\n                                Login\r\n                            </Button>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row className='flex-direction-column'>\r\n                            <hr className='w-100'></hr>\r\n                            <Form.Text className='text-muted mx-auto'>\r\n                                <span className='cursor-pointer hover-underline' onClick={() => history.push('/auth/register')}>Register now</span>\r\n                            </Form.Text>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(connectAuth(LoginPage));\r\n\r\n","import React from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form\r\n} from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nfunction ForgotPasswordPage({ history }) {\r\n    return (\r\n        <div className='py-100'>\r\n            <Card className='mx-auto shadow-sm' style={{ width: 'fit-content' }}>\r\n                <Card.Header as='h5'>Forgot Password?</Card.Header>\r\n                <Card.Body>\r\n                    <Form>\r\n                        <Form.Group controlId='formBasicEmail'>\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control type='email' placeholder='Enter email' />\r\n                            <Form.Text className='text-muted'>\r\n                                We'll send link to your email.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        \r\n                        <Form.Row className='justify-content-between'>\r\n                            <Button variant='secondary' onClick={() => history.goBack()}>\r\n                                Go back to Login\r\n                            </Button>\r\n\r\n                            <Button className='ml-3' variant='primary'>\r\n                                Submit\r\n                            </Button>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(ForgotPasswordPage);\r\n","import React from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form\r\n} from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nfunction ResetPasswordPage({ history }) {\r\n    return (\r\n        <div className='py-100'>\r\n            <Card className='mx-auto shadow-sm' style={{ width: 'fit-content' }}>\r\n                <Card.Header as='h5'>Reset Password</Card.Header>\r\n                <Card.Body>\r\n                    <Form>\r\n                        <Form.Group controlId='resetPasswordFormPassword'>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type='password' placeholder='Password' />\r\n                            <Form.Text className='text-muted'>\r\n                                Type your password. Preferable a secure combination.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId='resetPasswordFormConfirmPassword'>\r\n                            <Form.Label>Confirm Password</Form.Label>\r\n                            <Form.Control type='password' placeholder='Confirm Password' />\r\n                            <Form.Text className='text-muted'>\r\n                                Confirm your password.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Row className='justify-content-end'>\r\n                            <Button variant='primary' onClick={() => history.push('/auth/login')}>\r\n                                Reset Password\r\n                            </Button>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(ResetPasswordPage);\r\n","import axios from 'axios';\r\n\r\n// Utils\r\nimport { getAccessToken, updateAccessToken, removeAccessToken } from '../utils/auth';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\nimport { UserRole } from '../enums/auth';\r\n\r\nconst authBaseURL = `${APIServerURL}/auth`;\r\nconst AuthAPI =  {\r\n    signInWithEmailAndPassword: (email, password) => {\r\n        const url = `${authBaseURL}/login`;\r\n        return axios.post(url, { email, password }).then(res => {\r\n            updateAccessToken(res.token);\r\n        });\r\n    },\r\n    verifyAccessToken: () => {\r\n        if (!getAccessToken()) {\r\n            return;\r\n        }\r\n        const url = `${authBaseURL}/profile`;\r\n        return axios.get(url).then(user => ({ user }), e => e);\r\n    },\r\n    registerAdminUser: (registerUserDto) => {\r\n        const url = `${authBaseURL}/register`;\r\n        return axios.post(url, { ...registerUserDto, role: UserRole.Admin });\r\n    },\r\n    signOut: () => {\r\n        removeAccessToken();\r\n    },\r\n    sendPasswordResetEmail: (email) => {\r\n\r\n    },\r\n}\r\n\r\nexport default AuthAPI;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    Col,\r\n    Form\r\n} from 'react-bootstrap';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { UserGender } from '../../common/enums/auth';\r\nimport { capitalizeWord, validateEmail } from '../../common/utils/common';\r\n// import { BootstrapDatePicker } from '../../components/common/datepicker';\r\n\r\nimport AuthAPI from '../../common/api/auth';\r\nimport { connectToasts } from '../../common/redux/connects';\r\nimport { ToastStatus } from '../../common/enums/toast';\r\n\r\nfunction RegisterPage({ history, addToastAction }) {\r\n    const [person, setPerson] = useState({\r\n        gender: '', fullName: '',\r\n        password: '', confirmPassword: '', email: ''\r\n    });\r\n    const [validationErrors, setValidationErrors] = useState({\r\n        gender: '', fullName: '',\r\n        password: '', confirmPassword: '', email: '', validated: false\r\n    });\r\n    const [genders, setGenders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const arrGenders = [];\r\n        for (const key in UserGender) {\r\n            if (Object.hasOwnProperty.call(UserGender, key)) {\r\n                const value = UserGender[key];\r\n                arrGenders.push({\r\n                    id: value,\r\n                    name: capitalizeWord(value)\r\n                });\r\n            }\r\n        }\r\n        setGenders(arrGenders);\r\n        setPerson({ ...person, gender: arrGenders[0].id })\r\n    }, []);\r\n\r\n    const onUpdatePerson = (value, key) => {\r\n        setPerson({ ...person, [key]: value });\r\n    }\r\n\r\n    const onRegister = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        \r\n        const { newValidationErrors, invalid } = validateRegisterForm();\r\n        setValidationErrors({\r\n            ...newValidationErrors, validated: true\r\n        });\r\n        if (!invalid) {\r\n            AuthAPI.registerAdminUser({\r\n                email: person.email,\r\n                fullName: person.fullName,\r\n                gender: person.gender,\r\n                password: person.password\r\n            }).then(result => {\r\n                addToastAction(`Congrationations`, 'You have successfully registered a new account.', ToastStatus.Success);\r\n                history.push('/auth/login');\r\n            }, e => addToastAction(`[${e.statusCode}] ${e.error}`, e.message, ToastStatus.Danger));\r\n        }\r\n    };\r\n    \r\n    const validateRegisterForm = () => {\r\n        // Validate Registration Form\r\n        const newValidationErrors = {\r\n            email: '', fullName: '', gender: '',\r\n            password: '', confirmPassword: ''\r\n        };\r\n        let valid = true;\r\n        if (!person.email) {\r\n            newValidationErrors.email = 'Please enter an email';\r\n            valid = false;\r\n        } else if (!validateEmail(person.email)){\r\n            newValidationErrors.email = 'Please enter valid email';\r\n            valid = false;\r\n        }\r\n        if (!person.fullName) {\r\n            newValidationErrors.fullName = 'Please enter Full name';\r\n            valid = false;\r\n        }\r\n        if (!person.gender) {\r\n            newValidationErrors.gender = 'Please select your gender';\r\n            valid = false;\r\n        }\r\n        if (!person.password) {\r\n            newValidationErrors.password = 'Please enter password';\r\n            valid = false;\r\n        }\r\n        if (!person.confirmPassword) {\r\n            newValidationErrors.confirmPassword = 'Please enter password';\r\n            valid = false;\r\n        } else if (person.confirmPassword !== person.password) {\r\n            newValidationErrors.confirmPassword = 'Different password detected';\r\n            valid = false;\r\n        }\r\n        return { newValidationErrors, invalid: !valid };\r\n    };\r\n\r\n    return (\r\n        <div className='py-100'>\r\n            <Card className='mx-auto shadow-sm' style={{width: 'fit-content', minWidth: '400px'}}>\r\n                <Card.Header as='h5'>Register</Card.Header>\r\n                <Card.Body>\r\n                    <Form validated={validationErrors.validated} onSubmit={onRegister}>\r\n                        <Form.Group>\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control required type='email' placeholder='Enter Email' value={person.email} isInvalid={!!validationErrors.email}\r\n                                onChange={e => onUpdatePerson(e.target.value, 'email')} />\r\n                            <Form.Control.Feedback type={!!validationErrors.email ? 'invalid' : 'valid'}>{validationErrors.email}</Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Row>\r\n                            <Col md={12}>\r\n                                <Form.Group>\r\n                                    <Form.Label>Full Name</Form.Label>\r\n                                    <Form.Control required type='text' placeholder='Enter Full Name' value={person.fullName} isInvalid={!!validationErrors.fullName}\r\n                                        onChange={e => onUpdatePerson(e.target.value, 'fullName')} />\r\n                                    <Form.Control.Feedback type={!!validationErrors.fullName ? 'invalid' : 'valid'}>{validationErrors.fullName}</Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n                            <Col xl={12} md={12} >\r\n                                <Form.Group>\r\n                                    <Form.Label>Gender</Form.Label>\r\n                                    <Form.Control required as=\"select\" value={person.gender} isInvalid={!!validationErrors.gender}\r\n                                        onChange={e => onUpdatePerson(e.target.value, 'gender')}>\r\n                                        {genders.map(gender => <option key={gender.id} value={gender.id}>{gender.name}</option>)}\r\n                                    </Form.Control>\r\n                                    <Form.Control.Feedback type={!!validationErrors.gender ? 'invalid' : 'valid'}>{validationErrors.gender}</Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Form.Row>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control required type='password' placeholder='Password' value={person.password} isInvalid={!!validationErrors.password}\r\n                                onChange={e => onUpdatePerson(e.target.value, 'password')} />\r\n                            <Form.Control.Feedback type={!!validationErrors.password ? 'invalid' : 'valid'}>{validationErrors.password}</Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Confirm Password</Form.Label>\r\n                            <Form.Control required type='password' placeholder='Confirm Password' value={person.confirmPassword} isInvalid={!!validationErrors.confirmPassword}\r\n                                onChange={e => onUpdatePerson(e.target.value, 'confirmPassword')} />\r\n                            <Form.Control.Feedback type={!!validationErrors.confirmPassword ? 'invalid' : 'valid'}>{validationErrors.confirmPassword}</Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Row className='justify-content-end'>\r\n                            <Button className='ml-3' variant='primary' onClick={onRegister}>\r\n                                Register\r\n                            </Button>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row className='flex-direction-column'>\r\n                            <hr className='w-100'></hr>\r\n                            <Form.Text className='text-muted mx-auto'>\r\n                                <span className='cursor-pointer hover-underline' onClick={() => history.push('/auth/login')}>Already registered?</span>\r\n                            </Form.Text>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(connectToasts(RegisterPage));\r\n","import React, { useState } from 'react';\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    withRouter\r\n} from 'react-router-dom';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\n\r\nimport LandingPage from '../pages/landing';\r\nimport LoginPage from '../pages/auth/login';\r\nimport ForgotPasswordPage from '../pages/auth/forgot-password';\r\nimport ResetPasswordPage from '../pages/auth/reset-password';\r\nimport RegisterPage from '../pages/auth/register';\r\nimport { CustomSwitch } from '../components/common/switch';\r\nimport { connectAuth } from '../common/redux/connects';\r\nimport { isDarkTheme, toggleDarkTheme } from '../common/utils/theme';\r\nimport { getDefaultRedirectPath } from '../common/utils/auth';\r\n\r\nfunction AnonymousLayout({ user, history, logoutUserAction }) {\r\n    const [darkTheme] = useState(isDarkTheme());\r\n\r\n    return (<div className='vh-100 vw-100'>\r\n        <Navbar bg='dark' variant='dark' expand='md'>\r\n            <Navbar.Brand>\r\n                <span className='cursor-pointer' onClick={() => history.push('/')}>Video Watching</span>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className='justify-content-end'>\r\n                <Nav className='ml-auto mr-3'>\r\n                    {!!user ? <Nav.Link className='ml-2' onClick={() => history.push(getDefaultRedirectPath())}>Go to Dashboard</Nav.Link> : null}\r\n                    <div className='d-flex'>\r\n                        <CustomSwitch className='my-auto mr-1' value={darkTheme} onChange={e => toggleDarkTheme(e.target.checked)} />\r\n                        <Nav.Link disabled className='px-0'>Dark Theme</Nav.Link>\r\n                    </div>\r\n                    {!user ?\r\n                        <Nav.Link className='ml-2' onClick={() => history.push('/auth/login')}>Log in</Nav.Link> :\r\n                        <Nav.Link className='ml-2' onClick={logoutUserAction}>Log out</Nav.Link>\r\n                    }\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <main className='container'>\r\n            <Switch>\r\n                <Route exact path='/' component={LandingPage} />\r\n                <Route path='/auth' >\r\n                    <Switch>\r\n                        <Route exact path='/auth/login' component={LoginPage} />\r\n                        <Route exact path='/auth/forgot-password' component={ForgotPasswordPage} />\r\n                        <Route path='/auth/reset-password' component={ResetPasswordPage} />\r\n                        <Route exact path='/auth/register' component={RegisterPage} />\r\n                    </Switch>\r\n                </Route>\r\n                <Route path='/' >\r\n                    <Redirect to='/' />\r\n                </Route>\r\n            </Switch>\r\n        </main>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(connectAuth(AnonymousLayout));","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { Toast } from 'react-bootstrap';\r\n\r\nimport { connectToasts } from '../../common/redux/connects';\r\nimport { ToastStatus } from '../../common/enums/toast';\r\n\r\nconst ToastList = ({ toasts, removeToastAction }) => {\r\n    return (<div style={{ width: 300, position: 'fixed', right: 5, top: 60, zIndex: 9999 }}\r\n        className='d-flex flex-column align-items-end'>\r\n        {toasts.map((toast, ti) =>\r\n        <Toast key={ti} className='w-100' style={{ flexBasis: 'unset' }} animation onClose={() => removeToastAction(toast.id)}>\r\n            <Toast.Header className={classNames({\r\n                'bg-success': toast.status === ToastStatus.Success,\r\n                'bg-danger': toast.status === ToastStatus.Danger,\r\n                'bg-warning': toast.status === ToastStatus.Warning,\r\n                'bg-info': toast.status === ToastStatus.Info,\r\n            })}>\r\n                <strong className=\"text-white mr-auto\">{toast.title}</strong>\r\n            </Toast.Header>\r\n            <Toast.Body>\r\n                {toast.description}\r\n            </Toast.Body>\r\n        </Toast>)}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default connectToasts(ToastList);\r\n","import React, { Fragment, useEffect } from 'react';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  withRouter\r\n} from 'react-router-dom';\r\n\r\n// Layouts\r\nimport AdminLayout from './layouts/admin';\r\nimport CustomerLayout from './layouts/customer';\r\nimport AnonymousLayout from './layouts/anonymous';\r\n\r\n// Components\r\nimport { LoadingSpinner } from './components/common/spinner';\r\nimport ToastList from './components/common/toast-list';\r\n\r\n// Utils\r\nimport { connectAuthCheck } from './common/redux/connects';\r\nimport { isAdmin } from './common/utils/auth';\r\n\r\nfunction App({ history, tokenVerified, authenticated, userRole, verifyAccessTokenAction }) {\r\n  useEffect(() => {\r\n    verifyAccessTokenAction(history, false);\r\n  });\r\n\r\n  const renderApp = () => (<Fragment>\r\n    <ToastList />\r\n    <Switch>\r\n      <Route path='/admin'>\r\n        {authenticated && isAdmin(userRole) ? <AdminLayout /> : <Redirect to='/' />}\r\n      </Route>\r\n      <Route path='/customer'>\r\n        {authenticated && !isAdmin(userRole) ? <CustomerLayout /> : <Redirect to='/' />}\r\n      </Route>\r\n      <Route path='/'>\r\n        <AnonymousLayout />\r\n      </Route>\r\n    </Switch>\r\n  </Fragment>\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      { !tokenVerified ? <LoadingSpinner /> : renderApp()}\r\n    </Fragment>\r\n\r\n  );\r\n}\r\n\r\nexport default withRouter(connectAuthCheck(App));\r\n","import {\r\n    LOGIN_USER,\r\n    LOGIN_USER_SUCCESS,\r\n    LOGIN_USER_ERROR,\r\n    VERIFY_ACCESS_TOKEN,\r\n    VERIFY_ACCESS_TOKEN_SUCCESS,\r\n    VERIFY_ACCESS_TOKEN_ERROR,\r\n    LOGOUT_USER,\r\n    REGISTER_USER,\r\n    REGISTER_USER_SUCCESS,\r\n    REGISTER_USER_ERROR,\r\n    FORGOT_PASSWORD,\r\n    FORGOT_PASSWORD_SUCCESS,\r\n    FORGOT_PASSWORD_ERROR,\r\n    RESET_PASSWORD,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_ERROR,\r\n} from '../actions/types';\r\n\r\nconst INIT_STATE = {\r\n    user: undefined,\r\n    forgotPasswordEmail: '',\r\n    loading: false,\r\n    error: '',\r\n};\r\n\r\nconst authReducer = (state = INIT_STATE, action) => {\r\n    switch (action.type) {\r\n        case LOGIN_USER:\r\n            return { ...state, user: null, loading: true, error: '' };\r\n        case LOGIN_USER_SUCCESS:\r\n            return { ...state, loading: false, user: null, error: '' };\r\n        case LOGIN_USER_ERROR:\r\n            return { ...state, loading: false, user: null, error: action.payload.message };\r\n        case VERIFY_ACCESS_TOKEN:\r\n            return { ...state, loading: true, error: '' };\r\n        case VERIFY_ACCESS_TOKEN_SUCCESS:\r\n            return { ...state, loading: false, user: action.payload.user, error: '' };\r\n        case VERIFY_ACCESS_TOKEN_ERROR:\r\n            return { ...state, loading: false, user: null, error: action.payload.message };\r\n        case FORGOT_PASSWORD:\r\n            return { ...state, loading: true, error: '' };\r\n        case FORGOT_PASSWORD_SUCCESS:\r\n            return { ...state, loading: false, forgotPasswordEmail: action.payload.email, error: '' };\r\n        case FORGOT_PASSWORD_ERROR:\r\n            return { ...state, loading: false, forgotPasswordEmail: '', error: action.payload.message };\r\n        case RESET_PASSWORD:\r\n            return { ...state, loading: true, error: '' };\r\n        case RESET_PASSWORD_SUCCESS:\r\n            return { ...state, loading: false, error: '' };\r\n        case RESET_PASSWORD_ERROR:\r\n            return { ...state, loading: false, error: action.payload.message };\r\n        case REGISTER_USER:\r\n            return { ...state, loading: true, error: '' };\r\n        case REGISTER_USER_SUCCESS:\r\n            return { ...state, loading: false, error: '' };\r\n        case REGISTER_USER_ERROR:\r\n            return { ...state, loading: false, error: action.payload.message };\r\n        case LOGOUT_USER:\r\n            return { ...state, user: null, error: '' };\r\n        default:\r\n            return { ...state };\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n","import {\r\n    TOAST_ADD,\r\n    TOAST_REMOVE,\r\n    TOAST_REMOVE_ALL,\r\n} from '../actions/types';\r\n\r\nconst initialToastState = {\r\n    toasts: []\r\n};\r\n\r\nconst toastReducer = (state = initialToastState, action) => {\r\n    switch (action.type) {\r\n        case TOAST_ADD:\r\n            return {\r\n                toasts: state.toasts.concat([{\r\n                    id: action.payload.id,\r\n                    title: action.payload.title,\r\n                    status: action.payload.status,\r\n                    description: action.payload.description,\r\n                    createdAt: new Date()\r\n                }])\r\n            };\r\n        case TOAST_REMOVE:\r\n            const newToasts = JSON.parse(JSON.stringify(state.toasts));\r\n            const index = newToasts.findIndex(toast => toast.id === action.payload.id);\r\n            if (index >= 0) {\r\n                newToasts.splice(index, 1);\r\n                return { toasts: newToasts };\r\n            }\r\n            return state;\r\n        case TOAST_REMOVE_ALL:\r\n            return { toasts: [] };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default toastReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport authReducer from './auth-reducer';\r\nimport toastReducer from './toast-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    authReducer,\r\n    toastReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\n// Utils\r\nimport AuthAPI from '../../api/auth';\r\nimport { getDefaultRedirectPath } from '../../utils/auth';\r\n\r\n// Constants\r\nimport {\r\n    LOGIN_USER,\r\n    VERIFY_ACCESS_TOKEN,\r\n    REGISTER_USER,\r\n    LOGOUT_USER,\r\n    FORGOT_PASSWORD,\r\n    RESET_PASSWORD,\r\n} from '../actions/types';\r\n\r\nimport {\r\n    loginUserSuccess,\r\n    loginUserError,\r\n    verifyAccessToken,\r\n    verifyAccessTokenSuccess,\r\n    verifyAccessTokenError,\r\n    registerUserSuccess,\r\n    registerUserError,\r\n    forgotPasswordSuccess,\r\n    forgotPasswordError,\r\n    resetPasswordSuccess,\r\n    resetPasswordError,\r\n} from '../actions/auth-actions';\r\n\r\nexport function* watchLoginUser() {\r\n    yield takeEvery(LOGIN_USER, loginWithEmailPassword);\r\n}\r\n\r\nconst loginWithEmailPasswordAsync = async (email, password) =>\r\n    await AuthAPI.signInWithEmailAndPassword(email, password);\r\n\r\nfunction* loginWithEmailPassword({ payload }) {\r\n    const { email, password } = payload.loginUserDto;\r\n    const { history } = payload;\r\n    AuthAPI.signOut();\r\n    try {\r\n        yield call(loginWithEmailPasswordAsync, email, password);\r\n        yield put(loginUserSuccess());\r\n        yield put(verifyAccessToken(history));\r\n    } catch (error) {\r\n        yield put(loginUserError(error));\r\n    }\r\n}\r\n\r\nexport function* watchVerifyAccessToken() {\r\n    yield takeEvery(VERIFY_ACCESS_TOKEN, verifyAccessTokenNow);\r\n}\r\n\r\nconst verifyAccessTokenAsync = async () =>\r\n    await AuthAPI.verifyAccessToken();\r\n\r\nfunction* verifyAccessTokenNow({ payload }) {\r\n    const { history, forceRedirect } = payload;\r\n    try {\r\n        const { user, message } = yield call(verifyAccessTokenAsync);\r\n\r\n        if (user) {\r\n            yield put(verifyAccessTokenSuccess(user));\r\n            if (forceRedirect) {\r\n                history.replace(getDefaultRedirectPath());\r\n            }\r\n        } else {\r\n            yield put(verifyAccessTokenError(message));\r\n        }\r\n    } catch (error) {\r\n        yield put(verifyAccessTokenError(error));\r\n    }\r\n}\r\n\r\nexport function* watchRegisterUser() {\r\n    yield takeEvery(REGISTER_USER, registerWithEmailPassword);\r\n}\r\n\r\nconst registerUserAsync = async (registerUserDto) =>\r\n    await AuthAPI\r\n        .registerUser(registerUserDto)\r\n        .then(successResponse => successResponse)\r\n        .catch(error => error);\r\n\r\nfunction* registerWithEmailPassword({ payload }) {\r\n    const { history } = payload;\r\n    try {\r\n        const registerUserResponse = yield call(registerUserAsync, payload.registerUserDto);\r\n        if (!registerUserResponse.success) {\r\n            yield put(registerUserSuccess());\r\n            history.push('/auth/login');\r\n        } else {\r\n            yield put(registerUserError(registerUserResponse.message));\r\n        }\r\n    } catch (error) {\r\n        yield put(registerUserError(error));\r\n    }\r\n}\r\n\r\nexport function* watchLogoutUser() {\r\n    yield takeEvery(LOGOUT_USER, logout);\r\n}\r\n\r\nconst logoutAsync = async (history) => {\r\n    AuthAPI.signOut();\r\n    history.replace('/');\r\n};\r\n\r\nfunction* logout({ payload }) {\r\n    const { history } = payload;\r\n    try {\r\n        yield call(logoutAsync, history);\r\n    } catch (error) { }\r\n}\r\n\r\nexport function* watchForgotPassword() {\r\n    yield takeEvery(FORGOT_PASSWORD, forgotPassword);\r\n}\r\n\r\nconst forgotPasswordAsync = async (email) => {\r\n    return await AuthAPI\r\n        .sendPasswordResetEmail(email)\r\n        .then(successResponse => successResponse)\r\n        .catch(error => error);\r\n};\r\n\r\nfunction* forgotPassword({ payload }) {\r\n    const { email } = payload.forgotPasswordDto;\r\n    try {\r\n        const forgotPasswordStatus = yield call(forgotPasswordAsync, email);\r\n        if (!forgotPasswordStatus.success) {\r\n            yield put(forgotPasswordSuccess(email));\r\n        } else {\r\n            yield put(forgotPasswordError(forgotPasswordStatus.message));\r\n        }\r\n    } catch (error) {\r\n        yield put(forgotPasswordError(error));\r\n    }\r\n}\r\n\r\nexport function* watchResetPassword() {\r\n    yield takeEvery(RESET_PASSWORD, resetPassword);\r\n}\r\n\r\nconst resetPasswordAsync = async (resetPasswordCode, newPassword) => {\r\n    return await AuthAPI\r\n        .confirmPasswordReset(resetPasswordCode, newPassword)\r\n        .then(successResponse => successResponse)\r\n        .catch((error) => error);\r\n};\r\n\r\nfunction* resetPassword({ payload }) {\r\n    const { password } = payload.resetPasswordDto;\r\n    const { history } = payload;\r\n    try {\r\n        const resetPasswordStatus = yield call(resetPasswordAsync, password);\r\n        if (!resetPasswordStatus.success) {\r\n            yield put(resetPasswordSuccess());\r\n            history.push('/auth/login');\r\n        } else {\r\n            yield put(resetPasswordError(resetPasswordStatus.message));\r\n        }\r\n    } catch (error) {\r\n        yield put(resetPasswordError(error));\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(watchLoginUser),\r\n        fork(watchVerifyAccessToken),\r\n        fork(watchLogoutUser),\r\n        fork(watchRegisterUser),\r\n        fork(watchForgotPassword),\r\n        fork(watchResetPassword),\r\n    ]);\r\n}\r\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { removeToast } from '../actions/toast-actions';\r\n\r\n// Constants\r\nimport {\r\n    TOAST_ADD,\r\n} from '../actions/types';\r\n\r\nexport function* watchToastAdd() {\r\n    yield takeEvery(TOAST_ADD, autoRemoveToast);\r\n}\r\n\r\nconst delay = time => new Promise(resolve => setTimeout(resolve, time));\r\n\r\nfunction* autoRemoveToast({ payload }) {\r\n    const { id } = payload;\r\n    yield call(delay, 5000);\r\n    yield put(removeToast(id));\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(watchToastAdd),\r\n    ]);\r\n}","import { all } from 'redux-saga/effects';\r\nimport authSagas from './auth-saga';\r\nimport toastSagas from './toast-saga';\r\n\r\nexport default function* rootSaga(getState) {\r\n  yield all([\r\n    authSagas(),\r\n    toastSagas()\r\n  ]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './reducers';\r\nimport sagas from './sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middlewares = [sagaMiddleware];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    compose(applyMiddleware(...middlewares))\r\n);\r\n\r\nsagaMiddleware.run(sagas)\r\n\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { Suspense } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport { LoadingSpinner } from './components/common/spinner';\r\nimport store from './common/redux/store';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Suspense fallback={<LoadingSpinner />}>\r\n        <App />\r\n      </Suspense>\r\n    </Router>\r\n  </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const UITheme = {\r\n    Light: 'LIGHT',\r\n    Dark: 'DARK'\r\n};\r\n","import {\r\n    TOAST_ADD,\r\n    TOAST_REMOVE,\r\n    TOAST_REMOVE_ALL,\r\n} from './types';\r\nimport { ToastStatus } from '../../enums/toast';\r\n\r\nexport const addToast = (title, description, status = ToastStatus.Info) => ({ type: TOAST_ADD, payload: {\r\n    title,\r\n    description,\r\n    status,\r\n    id: `toast-${new Date().getTime()}`\r\n}});\r\nexport const removeToast = id => ({ type: TOAST_REMOVE, payload: { id } });\r\nexport const removeAllToasts = () => ({ type: TOAST_REMOVE_ALL });\r\n"],"sourceRoot":""}