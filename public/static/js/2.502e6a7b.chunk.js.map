{"version":3,"sources":["common/api/watch-history.js","common/api/popup-history.js","pages/admin/reports/reports-view.js"],"names":["BASE_URL","APIServerURL","WahtchHistoryAPI","getAll","page","perPage","userId","url","axios","get","getOne","id","remove","delete","PopupHistoryAPI","ReportView","match","history","addToastAction","user","params","reportId","useState","selectedId","setSelectedId","currentData","setCurrentData","removePopupConfirmTarget","setRemovePopupConfirmTarget","removePopupConfirmVisibility","setRemovePopupConfirmVisibility","removeConfirmTarget","setRemoveConfirmTarget","removeConfirmVisibility","setRemoveConfirmVisibility","useEffect","WatchhistoryApis","then","res","console","log","data","e","error","ToastStatus","Danger","Container","Row","Col","Button","variant","onClick","goBack","className","to","title","fullName","substr","timeFromNow","createdAt","size","aria-disabled","icon","isFinished","faCheck","faExclamationCircle","target","Table","popupHistories","map","item","index","dateToLocalString","isClicked","updatedAt","faUserCheck","faTrash","visible","setVisibility","label","onConfirm","PopuphistoryApis","Success","catch","defaultProps","withRouter","connectToasts","connectAuth"],"mappings":"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","file":"static/js/2.502e6a7b.chunk.js","sourcesContent":["import axios from './configuration';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst BASE_URL = `${APIServerURL}/watch-histories`;\r\nconst WahtchHistoryAPI =  {\r\n    getAll: ({ page, perPage, userId }) => {\r\n        let url = `${BASE_URL}?page=${page}&perPage=${perPage}`;\r\n        if (userId) {\r\n            url += `&userId=${userId}`\r\n        }\r\n        return axios.get(url);\r\n    },\r\n    getOne: ({id}) => {\r\n        return axios.get(`${BASE_URL}/${id}`)\r\n    },\r\n    remove: ({id}) => {\r\n        const url = `${BASE_URL}/${id}`;\r\n\r\n        return axios.delete(url);\r\n    },\r\n}\r\n\r\nexport default WahtchHistoryAPI;\r\n","import axios from './configuration';\r\n\r\n// Constants\r\nimport { APIServerURL } from '../constants/default-values';\r\n\r\nconst BASE_URL = `${APIServerURL}/popup-histories`;\r\nconst PopupHistoryAPI =  {\r\n    getOne: ({id}) => {\r\n        return axios.get(`${BASE_URL}/${id}`)\r\n    },\r\n    remove: ({id}) => {\r\n        const url = `${BASE_URL}/${id}`;\r\n\r\n        return axios.delete(url);\r\n    },\r\n}\r\n\r\nexport default PopupHistoryAPI;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { Button, Container, Row, Col } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash, faExclamationCircle, faCheck, faUserCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { timeFromNow, dateToLocalString } from '../../../common/utils/common';\r\nimport { connectToasts, connectAuth } from '../../../common/redux/connects';\r\nimport { ToastStatus } from '../../../common/enums/toast';\r\nimport { ConfirmPopover } from '../../../components/common/popover';\r\n\r\nimport WatchhistoryApis from '../../../common/api/watch-history';\r\nimport PopuphistoryApis from '../../../common/api/popup-history';\r\nimport { UserRole } from '../../../common/enums/auth';\r\n\r\nfunction ReportView ({match, history, addToastAction, user}) {\r\n    const id = match.params.reportId\r\n    const [selectedId, setSelectedId] = useState(0);\r\n    const [currentData, setCurrentData] = useState(null)\r\n\r\n\r\n    const [removePopupConfirmTarget, setRemovePopupConfirmTarget] = useState(null);\r\n    const [removePopupConfirmVisibility, setRemovePopupConfirmVisibility] = useState(false);\r\n\r\n    const [removeConfirmTarget, setRemoveConfirmTarget] = useState(null);\r\n    const [removeConfirmVisibility, setRemoveConfirmVisibility] = useState(false);\r\n\r\n    const refreshPage = () => {\r\n        WatchhistoryApis\r\n            .getOne({id: id})\r\n            .then(res => {\r\n                console.log(res.data);\r\n                setCurrentData(res.data)\r\n            }, e =>  addToastAction(\"Error\", e.error, ToastStatus.Danger) )\r\n    }\r\n\r\n    const removeHistory = () => {\r\n        PopuphistoryApis\r\n            .remove(selectedId)\r\n            .then(() => {\r\n                addToastAction(\"Alert\", 'Remove success', ToastStatus.Success);\r\n\r\n            })\r\n            .catch(e => {\r\n                addToastAction(\"Alert\", e.error, ToastStatus.Danger)\r\n            })\r\n    }\r\n\r\n    const removePopupHistory = () => {\r\n        WatchhistoryApis\r\n            .remove(id)\r\n            .then(() => {\r\n                addToastAction(\"Alert\", 'Remove success', ToastStatus.Success);\r\n                history.goBack();\r\n            })\r\n            .catch(e => {\r\n                addToastAction(\"Alert\", e.error, ToastStatus.Danger)\r\n            })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        refreshPage();\r\n    }, [ id, selectedId ])\r\n\r\n    if(!currentData) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <Button variant='link' onClick={() => history.goBack()}>\r\n                        <span className='h6'>Back</span>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row className='mb-5'>\r\n                <Col>\r\n                    <h1 className='text-center text-primary'>Report</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row className=''>\r\n                <Col>\r\n                    <p>\r\n                        User name: &nbsp;\r\n                        <Link to={`/admin/users/view/${currentData.user.id}`} title={currentData.user.fullName}>\r\n                            {`${currentData.user.fullName}`.substr(0, 20) }\r\n                        </Link>\r\n                    </p>\r\n                    <p>Played at: {timeFromNow(currentData.createdAt)}</p>\r\n                    <div>\r\n                        <p className=\"float-left\">\r\n                            Finished: \r\n                            <FontAwesomeIcon \r\n                                className=\"cursor-pointer text-danger ml-2\" \r\n                                size='lg'\r\n                                aria-disabled\r\n                                icon={currentData.isFinished ? faCheck : faExclamationCircle }\r\n                                title={currentData.isFinished ? \"Finished\" : \"Didnt Finished\"}\r\n                            />\r\n                        </p>\r\n                        <p className=\"float-right mr-2\">\r\n                            <Button \r\n                                variant=\"outline-danger\" size=\"sm\" \r\n                                onClick={(e) => [setRemovePopupConfirmVisibility(true), setRemovePopupConfirmTarget(e.target)]}\r\n                            >Remove</Button>{' '}\r\n                        </p>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Started At</th>\r\n                                <th>Updated At</th>\r\n                                <th className=\"text-center\">Clicked</th>\r\n                                <th className=\"text-center\">Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                currentData.popupHistories.map((item, index) => (\r\n                                    <tr key={index}>\r\n                                        <td>{index + 1}</td>\r\n                                        {/* <td>\r\n                                            <Link to={`/admin/users/view/${item.user.id}`} title={item.user.fullName}>\r\n                                                { item.user.fullName }\r\n                                            </Link>\r\n                                        </td> */}\r\n                                        <td>{dateToLocalString(item.createdAt)}</td>\r\n                                        <td>{item.isClicked && dateToLocalString(item.updatedAt)}</td>\r\n                                        {/* <td className=\"text-center\">\r\n                                            <Link to={`/admin/videos/view/${item.video.id}`} title={item.video.title}>\r\n                                                { `${item.video.title}`.substr(0, 10) }\r\n                                            </Link>\r\n                                        </td> */}\r\n                                        <td className=\"text-center\">\r\n                                            <FontAwesomeIcon \r\n                                                className=\"cursor-pointer text-danger ml-2\" \r\n                                                size='lg'\r\n                                                aria-disabled\r\n                                                icon={item.isClicked ? faUserCheck : faExclamationCircle }\r\n                                                title={item.isClicked ? \"Clicked\" : \"Didnt Clicked\"}\r\n                                            />\r\n                                        </td>\r\n                                        <td className=\"text-center\">\r\n                                            <FontAwesomeIcon className='cursor-pointer text-danger ml-2' size='lg' icon={faTrash}\r\n                                                onClick={(e) => {\r\n                                                    setRemoveConfirmVisibility(true)\r\n                                                    setSelectedId(item.id)\r\n                                                    setRemoveConfirmTarget(e.target)\r\n                                                }}\r\n                                                title=\"Remove\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n                </Col>\r\n            </Row>\r\n            <ConfirmPopover \r\n                visible={removeConfirmVisibility} \r\n                target={removeConfirmTarget}\r\n                setVisibility={() => setRemoveConfirmVisibility(false)}\r\n                label=\"Are you sure to delete this report?\"\r\n                onConfirm={removeHistory}\r\n            />\r\n            <ConfirmPopover \r\n                visible={removePopupConfirmVisibility} \r\n                target={removePopupConfirmTarget}\r\n                setVisibility={() => setRemovePopupConfirmVisibility(false)}\r\n                label=\"Are you sure to delete this report?\"\r\n                onConfirm={() => removePopupHistory()}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nReportView.propTypes = {\r\n    id: PropTypes.number\r\n};\r\n\r\nReportView.defaultProps = {\r\n    id: 0\r\n};\r\n\r\nexport default withRouter(connectToasts(connectAuth(ReportView)));\r\n"],"sourceRoot":""}