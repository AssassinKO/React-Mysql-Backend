{"version":3,"sources":["common/socket/index.js","common/socket/types.js","pages/customer/videos/video-view.js"],"names":["console","log","process","SocketServerURL","socket","io","auth","authToken","getAccessToken","on","err","message","open","POPUP_DESTROY","VideoView","match","history","addToastAction","videoId","params","id","useState","video","setVideo","watchId","setWatchId","popupHistoryId","setPopupHistoryId","playerProgree","setPlayerProgree","currentTime","setCurrentTime","videoDuration","setVideoDuration","isShowConfirmMessage","setIsShowConfirmMessage","playingVideo","setPlayingVideo","videoPlayerRef","useRef","useEffect","VideoApis","getVideo","then","res","success","data","catch","e","error","ToastStatus","Danger","reportPopupResult","clicked","emit","close","_timer","setInterval","current","duration","getDuration","currentSeconds","getCurrentTime","percent","secsToHMS","clearInterval","videoUrl","AssetsServerURL","src","Container","Row","Col","Button","variant","onClick","goBack","className","title","style","position","paddingTop","width","right","top","zIndex","Toast","show","flexBasis","animation","autohide","onClose","Header","Body","Promise","all","url","left","playing","height","config","file","attributes","controlsList","onContextMenu","preventDefault","ref","onPause","a","b","onEnded","onPlay","newWatchId","newPopupHistoryId","fontSize","transform","size","icon","faPause","faPlay","ProgressBar","animated","now","label","defaultProps","withRouter","connectToasts","connectAuth"],"mappings":"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","file":"static/js/17.e7ca41e8.chunk.js","sourcesContent":["import { io } from \"socket.io-client\";\r\nimport { SocketServerURL } from '../constants/default-values';\r\nimport { getAccessToken }  from '../utils/auth';\r\n\r\nconsole.log(\"process.env.NODE_ENV\", process.env.NODE_ENV);\r\nconsole.log(\"SocketServerURL\", SocketServerURL);\r\n\r\nif(!process.env.NODE_ENV) {\r\n  localStorage.debug = '*';\r\n}\r\n\r\nconst socket = io(SocketServerURL, {\r\n  auth: {\r\n    authToken: getAccessToken()\r\n  }\r\n});\r\n\r\n// socket.io.open(error => {\r\n//   if (error) {\r\n//     console.log(error);\r\n//   }\r\n//   console.log(\"socket server connected\");\r\n// })\r\n\r\nsocket.on(\"connect_error\", (err) => {\r\n  console.log(`connect_error due to ${err.message}`);\r\n  console.log(`trying again`);\r\n  socket.open();\r\n});\r\n\r\nexport default socket;\r\n","export const VIDEO_START_PLAYING = \"VIDEO_START_PLAYING\"\r\nexport const VIDEO_END_VIDEO = \"VIDEO_END_VIDEO\"\r\n\r\nexport const POPUP_DESTROY = \"POPUP_DESTROY\"\r\nexport const POPUP_NOT_PUSHED = \"POPUP_NOT_PUSHED\"\r\nexport const POPUP_PUSH = \"POPUP_PUSH\"\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { Button, Container, Row, Col, Toast, ProgressBar } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faPause } from '@fortawesome/free-solid-svg-icons';\r\nimport PropTypes from 'prop-types';\r\nimport ReactPlayer from 'react-player';\r\n\r\nimport { connectToasts, connectAuth } from '../../../common/redux/connects';\r\nimport { ToastStatus } from '../../../common/enums/toast';\r\nimport { secsToHMS } from '../../../common/utils/common';\r\n\r\nimport VideoApis from '../../../common/api/videos';\r\nimport { AssetsServerURL } from '../../../common/constants/default-values';\r\nimport socket from '../../../common/socket';\r\nimport { POPUP_DESTROY, VIDEO_START_PLAYING, VIDEO_END_VIDEO, POPUP_PUSH } from '../../../common/socket/types';\r\n\r\nfunction VideoView ({match, history, addToastAction}) {\r\n    const videoId = match.params.id\r\n    const [video, setVideo] = useState(null)\r\n    const [watchId, setWatchId] = useState(0)\r\n    const [popupHistoryId, setPopupHistoryId] = useState(0)\r\n    const [playerProgree, setPlayerProgree] = useState(0)\r\n    const [currentTime, setCurrentTime] = useState(0)\r\n    const [videoDuration, setVideoDuration] = useState(0)\r\n    const [isShowConfirmMessage, setIsShowConfirmMessage] = useState(false)\r\n    const [playingVideo, setPlayingVideo] = useState(false)\r\n    const videoPlayerRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        VideoApis\r\n            .getVideo({id: videoId})\r\n            .then(res => {\r\n                if(res.success) {\r\n                    setVideo(res.data)\r\n                }\r\n            })\r\n            .catch(e =>  addToastAction(\"Loading Video\", e.error, ToastStatus.Danger))\r\n    }, [videoId])\r\n\r\n    const onPauseVideo = () => {\r\n        setPlayingVideo(true)\r\n    }\r\n\r\n    const onStartVideo = () => {\r\n        console.log(\"playing video....\");\r\n        setWatchId(0)\r\n        setPopupHistoryId(0)\r\n        socket.open();\r\n\r\n        socket.emit(VIDEO_START_PLAYING, videoId)\r\n\r\n        socket.on(POPUP_PUSH, (newWatchId , newPopupHistoryId) => {\r\n            if(popupHistoryId !== newPopupHistoryId && playingVideo) {\r\n                setWatchId(newWatchId);\r\n                setPopupHistoryId(newPopupHistoryId);\r\n                setIsShowConfirmMessage(true);\r\n                console.log(\"popupHistoryIdx: \", newWatchId); // world\r\n            } else {\r\n                console.log(\"message not pushed\");\r\n            }\r\n        });\r\n    }\r\n\r\n    const onEndedVideo = () => {\r\n        console.log(\"onEndedVideo\");\r\n\r\n        setPlayingVideo(false)\r\n        socket.emit(VIDEO_END_VIDEO, watchId);\r\n        setWatchId(0);\r\n        setPopupHistoryId(0);\r\n        socket.close();\r\n    }\r\n\r\n    const reportPopupResult = (clicked = false) => {\r\n        console.log(\"reportPopupResult: \", clicked);\r\n\r\n        if(watchId && popupHistoryId && playingVideo) {\r\n            socket.emit(POPUP_DESTROY, watchId, popupHistoryId, clicked)\r\n            setPopupHistoryId(0);\r\n        } else {\r\n            console.log(\"watchId or popupHistoryId is null\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            socket.close();\r\n            setIsShowConfirmMessage(false)\r\n        }\r\n    }, [ videoId ])\r\n\r\n    useEffect(() => {\r\n        let _timer = setInterval(() => {\r\n            if(videoPlayerRef.current) {\r\n                const duration = videoPlayerRef.current.getDuration();\r\n                const currentSeconds = videoPlayerRef.current.getCurrentTime();\r\n                let percent = (currentSeconds / duration) * 100;\r\n\r\n                setCurrentTime(secsToHMS(currentSeconds))\r\n                setVideoDuration(secsToHMS(duration))\r\n                setPlayerProgree(percent)\r\n            }\r\n        }, 100);\r\n\r\n        return () => {\r\n            if(_timer) {\r\n                clearInterval(_timer)\r\n            }\r\n        }\r\n    }, [videoPlayerRef])\r\n\r\n    if(!video) {\r\n        return null\r\n    }\r\n\r\n    const videoUrl = `${AssetsServerURL}/${video.src}`;\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <Button variant='link' onClick={() => history.goBack()}>\r\n                        <span className='h6'>Back</span>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <div className='text-center'>\r\n                <p>{video.title}</p>\r\n            </div>\r\n            <div style={{\r\n                    position: 'relative',\r\n                    paddingTop: '56.25%' \r\n                }}\r\n                className=\"player-wrapper\"\r\n            >\r\n            <div \r\n            style={{ \r\n                    width: 300, \r\n                    position: 'absolute', \r\n                    right: 0,\r\n                    top: 0, \r\n                    zIndex: 9999 \r\n                }}\r\n                className='d-flex flex-column align-items-end'\r\n            >\r\n                <Toast \r\n                    show={isShowConfirmMessage}\r\n                    key={1}\r\n                    className='w-100' \r\n                    style={{ flexBasis: 'unset' }} \r\n                    animation\r\n                    autohide\r\n                    // delay={5000}\r\n                    onClose={() => {\r\n                        console.log(\"onclose popup\");\r\n                        reportPopupResult()\r\n                        setIsShowConfirmMessage(false)\r\n                    }}\r\n                >\r\n                    <Toast.Header className={'bg-info'}>\r\n                        <strong className=\"text-white mr-auto\">Alert</strong>\r\n                    </Toast.Header>\r\n                    <Toast.Body className=\"text-center\">\r\n                        <div className=\"mb-3\">\r\n                            Click the here if you are seeing this video\r\n                        </div>\r\n                        <Button variant=\"info\"\r\n                            onClick={() => {\r\n                                Promise.all([\r\n                                    setIsShowConfirmMessage(false),\r\n                                    reportPopupResult(true)\r\n                                ])\r\n                            }}\r\n                        >Cofirm</Button>{' '}\r\n                    </Toast.Body>\r\n                </Toast>\r\n            </div>\r\n                <ReactPlayer\r\n                    className='react-player'\r\n                    url={videoUrl}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0\r\n                    }}\r\n                    playing={playingVideo}\r\n                    width='100%'\r\n                    height='100%'\r\n                    // controls\r\n                    config={{ file: { \r\n                        attributes: { \r\n                            controlsList: 'nodownload'},\r\n                        },\r\n                        onContextMenu: e => e.preventDefault(),\r\n                    }}\r\n                    ref={videoPlayerRef}\r\n                    onPause={(a, b) => onPauseVideo()}\r\n                    onEnded={() => onEndedVideo()}\r\n                    // onStart={() => onStartVideo()}\r\n                    onPlay={() => onStartVideo()}\r\n                />\r\n                <div className={`video-player-controllers text-center pt-2 ${playingVideo && 'd-none'}`}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        left: '50%',\r\n                        top: '50%',\r\n                        fontSize: 50,\r\n                        transform: 'translateX(-50%) translateY(-50%)'\r\n                    }}\r\n                >\r\n                    <FontAwesomeIcon className='cursor-pointer text-info ml-2' size='lg' icon={playingVideo ? faPause : faPlay }  onClick={() => setPlayingVideo(!playingVideo)}/>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div className=\"text-right color-grey\">{videoDuration}</div>\r\n                <ProgressBar className=\"mt-1\" animated  variant=\"info\" now={playerProgree} label={`${currentTime} s`} />\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nVideoView.propTypes = {\r\n    id: PropTypes.number\r\n};\r\n\r\nVideoView.defaultProps = {\r\n    id: 0\r\n};\r\n\r\nexport default withRouter(connectToasts(connectAuth(VideoView)));\r\n"],"sourceRoot":""}